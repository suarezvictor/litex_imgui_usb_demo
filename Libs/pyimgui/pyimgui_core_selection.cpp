
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);
static __Pyx_memviewslice __pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

static PyObject *__pyx_kp_s_3f;
static PyObject *__pyx_kp_s_6f;
static PyObject *__pyx_n_s_ALWAYS;
static PyObject *__pyx_n_s_APPEARING;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_BACKEND_HAS_GAMEPAD;
static PyObject *__pyx_n_s_BACKEND_HAS_MOUSE_CURSORS;
static PyObject *__pyx_n_s_BACKEND_HAS_SET_MOUSE_POS;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_COLOR_BORDER;
static PyObject *__pyx_n_s_COLOR_BORDER_SHADOW;
static PyObject *__pyx_n_s_COLOR_BUTTON;
static PyObject *__pyx_n_s_COLOR_BUTTON_ACTIVE;
static PyObject *__pyx_n_s_COLOR_BUTTON_HOVERED;
static PyObject *__pyx_n_s_COLOR_CHECK_MARK;
static PyObject *__pyx_n_s_COLOR_CHILD_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_COUNT;
static PyObject *__pyx_n_s_COLOR_DRAG_DROP_TARGET;
static PyObject *__pyx_n_s_COLOR_EDIT_ALPHA_BAR;
static PyObject *__pyx_n_s_COLOR_EDIT_ALPHA_PREVIEW;
static PyObject *__pyx_n_s_COLOR_EDIT_ALPHA_PREVIEW_HALF;
static PyObject *__pyx_n_s_COLOR_EDIT_DATA_TYPE_MASK;
static PyObject *__pyx_n_s_COLOR_EDIT_FLOAT;
static PyObject *__pyx_n_s_COLOR_EDIT_HDR;
static PyObject *__pyx_n_s_COLOR_EDIT_HEX;
static PyObject *__pyx_n_s_COLOR_EDIT_HSV;
static PyObject *__pyx_n_s_COLOR_EDIT_INPUTS_MASK;
static PyObject *__pyx_n_s_COLOR_EDIT_NONE;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_ALPHA;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_DRAG_DROP;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_INPUTS;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_LABEL;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_OPTIONS;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_PICKER;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_SIDE_PREVIEW;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_SMALL_PREVIEW;
static PyObject *__pyx_n_s_COLOR_EDIT_NO_TOOLTIP;
static PyObject *__pyx_n_s_COLOR_EDIT_OPTIONS_DEFAULT;
static PyObject *__pyx_n_s_COLOR_EDIT_PICKER_HUE_BAR;
static PyObject *__pyx_n_s_COLOR_EDIT_PICKER_HUE_WHEEL;
static PyObject *__pyx_n_s_COLOR_EDIT_PICKER_MASK;
static PyObject *__pyx_n_s_COLOR_EDIT_RGB;
static PyObject *__pyx_n_s_COLOR_EDIT_UINT8;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED;
static PyObject *__pyx_n_s_COLOR_HEADER;
static PyObject *__pyx_n_s_COLOR_HEADER_ACTIVE;
static PyObject *__pyx_n_s_COLOR_HEADER_HOVERED;
static PyObject *__pyx_n_s_COLOR_MENUBAR_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_MODAL_WINDOW_DIM_BACKGROUN;
static PyObject *__pyx_n_s_COLOR_NAV_HIGHLIGHT;
static PyObject *__pyx_n_s_COLOR_NAV_WINDOWING_DIM_BACKGROU;
static PyObject *__pyx_n_s_COLOR_NAV_WINDOWING_HIGHLIGHT;
static PyObject *__pyx_n_s_COLOR_PLOT_HISTOGRAM;
static PyObject *__pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED;
static PyObject *__pyx_n_s_COLOR_PLOT_LINES;
static PyObject *__pyx_n_s_COLOR_PLOT_LINES_HOVERED;
static PyObject *__pyx_n_s_COLOR_POPUP_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP_HOVERED;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED;
static PyObject *__pyx_n_s_COLOR_SEPARATOR;
static PyObject *__pyx_n_s_COLOR_SEPARATOR_ACTIVE;
static PyObject *__pyx_n_s_COLOR_SEPARATOR_HOVERED;
static PyObject *__pyx_n_s_COLOR_SLIDER_GRAB;
static PyObject *__pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE;
static PyObject *__pyx_n_s_COLOR_TEXT;
static PyObject *__pyx_n_s_COLOR_TEXT_DISABLED;
static PyObject *__pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED;
static PyObject *__pyx_n_s_COLOR_WINDOW_BACKGROUND;
static PyObject *__pyx_n_s_COMBO_HEIGHT_LARGE;
static PyObject *__pyx_n_s_COMBO_HEIGHT_LARGEST;
static PyObject *__pyx_n_s_COMBO_HEIGHT_MASK;
static PyObject *__pyx_n_s_COMBO_HEIGHT_REGULAR;
static PyObject *__pyx_n_s_COMBO_HEIGHT_SMALL;
static PyObject *__pyx_n_s_COMBO_NO_ARROW_BUTTON;
static PyObject *__pyx_n_s_COMBO_NO_PREVIEW;
static PyObject *__pyx_n_s_COMBO_POPUP_ALIGN_LEFT;
static PyObject *__pyx_n_s_CONFIG_IS_RGB;
static PyObject *__pyx_n_s_CONFIG_IS_TOUCH_SCREEN;
static PyObject *__pyx_n_s_CONFIG_NAV_ENABLE_GAMEPAD;
static PyObject *__pyx_n_s_CONFIG_NAV_ENABLE_KEYBOARD;
static PyObject *__pyx_n_s_CONFIG_NAV_ENABLE_SET_MOUSE_POS;
static PyObject *__pyx_n_s_CONFIG_NAV_NO_CAPTURE_KEYBOARD;
static PyObject *__pyx_n_s_CONFIG_NO_MOUSE;
static PyObject *__pyx_n_s_CONFIG_NO_MOUSE_CURSOR_CHANGE;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Colors;
static PyObject *__pyx_kp_s_Context_invalid_None_or_destroye;
static PyObject *__pyx_n_s_DIRECTION_DOWN;
static PyObject *__pyx_n_s_DIRECTION_LEFT;
static PyObject *__pyx_n_s_DIRECTION_NONE;
static PyObject *__pyx_n_s_DIRECTION_RIGHT;
static PyObject *__pyx_n_s_DIRECTION_UP;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_BEFORE_DELIVERY;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_NO_DRAW_DEFAULT;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_NO_PREVIEW_TOOL;
static PyObject *__pyx_n_s_DRAG_DROP_ACCEPT_PEEK_ONLY;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_ALLOW_NULL_ID;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_AUTO_EXPIRE_PAY;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_EXTERN;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_NO_DISABLE_HOVE;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_NO_HOLD_TO_OPEN;
static PyObject *__pyx_n_s_DRAG_DROP_SOURCE_NO_PREVIEW_TOOL;
static PyObject *__pyx_kp_s_Direction_wasn_t_specified;
static PyObject *__pyx_n_s_DrawCmd;
static PyObject *__pyx_n_s_DrawData;
static PyObject *__pyx_n_s_DrawList;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Expected_at_least_d_argument_s_g;
static PyObject *__pyx_n_s_FIRST_USE_EVER;
static PyObject *__pyx_n_s_FOCUS_ANY_WINDOW;
static PyObject *__pyx_n_s_FOCUS_CHILD_WINDOWS;
static PyObject *__pyx_n_s_FOCUS_ROOT_AND_CHILD_WINDOWS;
static PyObject *__pyx_n_s_FOCUS_ROOT_WINDOW;
static PyObject *__pyx_n_s_Font;
static PyObject *__pyx_n_s_FontAtlas;
static PyObject *__pyx_kp_s_Function_call_with_ambiguous_arg;
static PyObject *__pyx_n_s_GuiStyle;
static PyObject *__pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_AC;
static PyObject *__pyx_n_s_HOVERED_ALLOW_WHEN_BLOCKED_BY_PO;
static PyObject *__pyx_n_s_HOVERED_ALLOW_WHEN_OVERLAPPED;
static PyObject *__pyx_n_s_HOVERED_ANY_WINDOW;
static PyObject *__pyx_n_s_HOVERED_CHILD_WINDOWS;
static PyObject *__pyx_n_s_HOVERED_NONE;
static PyObject *__pyx_n_s_HOVERED_RECT_ONLY;
static PyObject *__pyx_n_s_HOVERED_ROOT_AND_CHILD_WINDOWS;
static PyObject *__pyx_n_s_HOVERED_ROOT_WINDOW;
static PyObject *__pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT;
static PyObject *__pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE;
static PyObject *__pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_DECIMAL;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE;
static PyObject *__pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI;
static PyObject *__pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE;
static PyObject *__pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL;
static PyObject *__pyx_n_s_INPUT_TEXT_NO_UNDO_REDO;
static PyObject *__pyx_n_s_INPUT_TEXT_PASSWORD;
static PyObject *__pyx_n_s_INPUT_TEXT_READ_ONLY;
static PyObject *__pyx_n_s_IO;
static PyObject *__pyx_n_s_ImGuiContext;
static PyObject *__pyx_n_s_ImGuiError;
static PyObject *__pyx_n_s_ImGuiID;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Improperly_initialized_use_imgui;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KEY_A;
static PyObject *__pyx_n_s_KEY_BACKSPACE;
static PyObject *__pyx_n_s_KEY_C;
static PyObject *__pyx_n_s_KEY_DELETE;
static PyObject *__pyx_n_s_KEY_DOWN_ARROW;
static PyObject *__pyx_n_s_KEY_END;
static PyObject *__pyx_n_s_KEY_ENTER;
static PyObject *__pyx_n_s_KEY_ESCAPE;
static PyObject *__pyx_n_s_KEY_HOME;
static PyObject *__pyx_n_s_KEY_INSERT;
static PyObject *__pyx_n_s_KEY_LEFT_ARROW;
static PyObject *__pyx_n_s_KEY_PAGE_DOWN;
static PyObject *__pyx_n_s_KEY_PAGE_UP;
static PyObject *__pyx_n_s_KEY_RIGHT_ARROW;
static PyObject *__pyx_n_s_KEY_SPACE;
static PyObject *__pyx_n_s_KEY_TAB;
static PyObject *__pyx_n_s_KEY_UP_ARROW;
static PyObject *__pyx_n_s_KEY_V;
static PyObject *__pyx_n_s_KEY_X;
static PyObject *__pyx_n_s_KEY_Y;
static PyObject *__pyx_n_s_KEY_Z;
static PyObject *__pyx_n_s_MOUSE_CURSOR_ARROW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_HAND;
static PyObject *__pyx_n_s_MOUSE_CURSOR_NONE;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_ALL;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_EW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NESW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NS;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE;
static PyObject *__pyx_n_s_MOUSE_CURSOR_TEXT_INPUT;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_No_matching_signature_found;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_ONCE;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK;
static PyObject *__pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS;
static PyObject *__pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS;
static PyObject *__pyx_n_s_STYLE_ALPHA;
static PyObject *__pyx_n_s_STYLE_BUTTON_TEXT_ALIGN;
static PyObject *__pyx_n_s_STYLE_CHILD_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_CHILD_ROUNDING;
static PyObject *__pyx_n_s_STYLE_FRAME_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_FRAME_PADDING;
static PyObject *__pyx_n_s_STYLE_FRAME_ROUNDING;
static PyObject *__pyx_n_s_STYLE_GRAB_MIN_SIZE;
static PyObject *__pyx_n_s_STYLE_GRAB_ROUNDING;
static PyObject *__pyx_n_s_STYLE_INDENT_SPACING;
static PyObject *__pyx_n_s_STYLE_ITEM_INNER_SPACING;
static PyObject *__pyx_n_s_STYLE_ITEM_SPACING;
static PyObject *__pyx_n_s_STYLE_POPUP_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_POPUP_ROUNDING;
static PyObject *__pyx_n_s_STYLE_SCROLLBAR_ROUNDING;
static PyObject *__pyx_n_s_STYLE_SCROLLBAR_SIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_BORDERSIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_MIN_SIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_PADDING;
static PyObject *__pyx_n_s_STYLE_WINDOW_ROUNDING;
static PyObject *__pyx_n_s_STYLE_WINDOW_TITLE_ALIGN;
static PyObject *__pyx_n_s_StaticGlyphRanges;
static PyObject *__pyx_kp_s_Style_value_must_be_float_or_two;
static PyObject *__pyx_n_s_TREE_NODE_ALLOW_ITEM_OVERLAP;
static PyObject *__pyx_n_s_TREE_NODE_BULLET;
static PyObject *__pyx_n_s_TREE_NODE_COLLAPSING_HEADER;
static PyObject *__pyx_n_s_TREE_NODE_DEFAULT_OPEN;
static PyObject *__pyx_n_s_TREE_NODE_FRAMED;
static PyObject *__pyx_n_s_TREE_NODE_FRAME_PADDING;
static PyObject *__pyx_n_s_TREE_NODE_LEAF;
static PyObject *__pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG;
static PyObject *__pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN;
static PyObject *__pyx_n_s_TREE_NODE_OPEN_ON_ARROW;
static PyObject *__pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK;
static PyObject *__pyx_n_s_TREE_NODE_SELECTED;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_s_Unknown_style_variable;
static PyObject *__pyx_kp_s_Unsufficient_style_info_variable;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Vec2;
static PyObject *__pyx_n_s_Vec4;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR;
static PyObject *__pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR;
static PyObject *__pyx_n_s_WINDOW_MENU_BAR;
static PyObject *__pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU;
static PyObject *__pyx_n_s_WINDOW_NO_COLLAPSE;
static PyObject *__pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING;
static PyObject *__pyx_n_s_WINDOW_NO_INPUTS;
static PyObject *__pyx_n_s_WINDOW_NO_MOVE;
static PyObject *__pyx_n_s_WINDOW_NO_NAV;
static PyObject *__pyx_n_s_WINDOW_NO_NAV_FOCUS;
static PyObject *__pyx_n_s_WINDOW_NO_NAV_INPUTS;
static PyObject *__pyx_n_s_WINDOW_NO_RESIZE;
static PyObject *__pyx_n_s_WINDOW_NO_SAVED_SETTINGS;
static PyObject *__pyx_n_s_WINDOW_NO_SCROLLBAR;
static PyObject *__pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE;
static PyObject *__pyx_n_s_WINDOW_NO_TITLE_BAR;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_kp_s__33;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_kp_s__50;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_accept_drag_drop_payload;
static PyObject *__pyx_n_s_active;
static PyObject *__pyx_n_s_align_text_to_frame_padding;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_alpha_mul;
static PyObject *__pyx_n_s_also_over_items;
static PyObject *__pyx_n_s_ansifeed_text_ansi;
static PyObject *__pyx_n_s_ansifeed_text_ansi_colored;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_arrow_button;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_begin_child;
static PyObject *__pyx_n_s_begin_drag_drop_source;
static PyObject *__pyx_n_s_begin_drag_drop_target;
static PyObject *__pyx_n_s_begin_group;
static PyObject *__pyx_n_s_begin_main_menu_bar;
static PyObject *__pyx_n_s_begin_menu;
static PyObject *__pyx_n_s_begin_menu_bar;
static PyObject *__pyx_n_s_begin_popup;
static PyObject *__pyx_n_s_begin_popup_context_item;
static PyObject *__pyx_n_s_begin_popup_context_window;
static PyObject *__pyx_n_s_begin_popup_modal;
static PyObject *__pyx_n_s_begin_tooltip;
static PyObject *__pyx_n_s_border;
static PyObject *__pyx_n_s_border_color;
static PyObject *__pyx_n_s_buffer_length;
static PyObject *__pyx_n_s_bullet;
static PyObject *__pyx_n_s_bullet_text;
static PyObject *__pyx_n_s_button;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_c_string;
static PyObject *__pyx_n_s_center_y_ratio;
static PyObject *__pyx_n_s_centre_x;
static PyObject *__pyx_n_s_centre_y;
static PyObject *__pyx_n_s_change_speed;
static PyObject *__pyx_n_s_changed;
static PyObject *__pyx_n_s_checkbox;
static PyObject *__pyx_n_s_checkbox_flags;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_clicked;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clip;
static PyObject *__pyx_n_s_closable;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_close_current_popup;
static PyObject *__pyx_n_s_closed;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_collapsed;
static PyObject *__pyx_n_s_collapsing_header;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_color_button;
static PyObject *__pyx_n_s_color_edit3;
static PyObject *__pyx_n_s_color_edit4;
static PyObject *__pyx_n_s_column_index;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_combo;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_contextlib;
static PyObject *__pyx_n_s_contextmanager;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_core;
static PyObject *__pyx_kp_s_core_pyx;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_create;
static PyObject *__pyx_n_s_create_context;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_current;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_defaults;
static PyObject *__pyx_n_s_desc_id;
static PyObject *__pyx_n_s_destroy_context;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_drag_float;
static PyObject *__pyx_n_s_drag_float2;
static PyObject *__pyx_n_s_drag_float3;
static PyObject *__pyx_n_s_drag_float4;
static PyObject *__pyx_n_s_drag_int;
static PyObject *__pyx_n_s_drag_int2;
static PyObject *__pyx_n_s_drag_int3;
static PyObject *__pyx_n_s_drag_int4;
static PyObject *__pyx_n_s_dst;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_dummy;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_end_child;
static PyObject *__pyx_n_s_end_drag_drop_source;
static PyObject *__pyx_n_s_end_drag_drop_target;
static PyObject *__pyx_n_s_end_frame;
static PyObject *__pyx_n_s_end_group;
static PyObject *__pyx_n_s_end_main_menu_bar;
static PyObject *__pyx_n_s_end_menu;
static PyObject *__pyx_n_s_end_menu_bar;
static PyObject *__pyx_n_s_end_popup;
static PyObject *__pyx_n_s_end_tooltip;
static PyObject *__pyx_n_s_end_x;
static PyObject *__pyx_n_s_end_y;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_kp_s_f;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fillvalue;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flags_value;
static PyObject *__pyx_n_s_font;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_fraction;
static PyObject *__pyx_n_s_frame_padding;
static PyObject *__pyx_kp_s_func_is_not_a_callable_s;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_get_clipboard_text_fn;
static PyObject *__pyx_n_s_get_column_index;
static PyObject *__pyx_n_s_get_column_offset;
static PyObject *__pyx_n_s_get_column_width;
static PyObject *__pyx_n_s_get_columns_count;
static PyObject *__pyx_n_s_get_content_region_available;
static PyObject *__pyx_n_s_get_content_region_available_wid;
static PyObject *__pyx_n_s_get_content_region_max;
static PyObject *__pyx_n_s_get_current_context;
static PyObject *__pyx_n_s_get_cursor_pos;
static PyObject *__pyx_n_s_get_cursor_pos_x;
static PyObject *__pyx_n_s_get_cursor_pos_y;
static PyObject *__pyx_n_s_get_cursor_position;
static PyObject *__pyx_n_s_get_cursor_screen_pos;
static PyObject *__pyx_n_s_get_cursor_screen_position;
static PyObject *__pyx_n_s_get_cursor_start_pos;
static PyObject *__pyx_n_s_get_cursor_start_position;
static PyObject *__pyx_n_s_get_draw_data;
static PyObject *__pyx_n_s_get_frame_height;
static PyObject *__pyx_n_s_get_frame_height_with_spacing;
static PyObject *__pyx_n_s_get_io;
static PyObject *__pyx_n_s_get_item_rect_max;
static PyObject *__pyx_n_s_get_item_rect_min;
static PyObject *__pyx_n_s_get_item_rect_size;
static PyObject *__pyx_n_s_get_key_index;
static PyObject *__pyx_n_s_get_mouse_cursor;
static PyObject *__pyx_n_s_get_mouse_drag_delta;
static PyObject *__pyx_n_s_get_mouse_pos;
static PyObject *__pyx_n_s_get_mouse_position;
static PyObject *__pyx_n_s_get_overlay_draw_list;
static PyObject *__pyx_n_s_get_scroll_max_x;
static PyObject *__pyx_n_s_get_scroll_max_y;
static PyObject *__pyx_n_s_get_scroll_x;
static PyObject *__pyx_n_s_get_scroll_y;
static PyObject *__pyx_n_s_get_style;
static PyObject *__pyx_n_s_get_style_color_name;
static PyObject *__pyx_n_s_get_text_line_height;
static PyObject *__pyx_n_s_get_text_line_height_with_spacin;
static PyObject *__pyx_n_s_get_time;
static PyObject *__pyx_n_s_get_version;
static PyObject *__pyx_n_s_get_window_content_region_max;
static PyObject *__pyx_n_s_get_window_content_region_min;
static PyObject *__pyx_n_s_get_window_content_region_width;
static PyObject *__pyx_n_s_get_window_draw_list;
static PyObject *__pyx_n_s_get_window_height;
static PyObject *__pyx_n_s_get_window_position;
static PyObject *__pyx_n_s_get_window_size;
static PyObject *__pyx_n_s_get_window_width;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_glyph_ranges;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_graph_size;
static PyObject *__pyx_n_s_gui_style;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_height_in_items;
static PyObject *__pyx_n_s_hide_text_after_double_hash;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_identifier;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_ignore;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_image_button;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_items;
static PyObject *__pyx_n_s_indent;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inout_color;
static PyObject *__pyx_n_s_inout_current;
static PyObject *__pyx_n_s_inout_flags;
static PyObject *__pyx_n_s_inout_opened;
static PyObject *__pyx_n_s_inout_selected;
static PyObject *__pyx_n_s_inout_state;
static PyObject *__pyx_n_s_inout_text;
static PyObject *__pyx_n_s_inout_value;
static PyObject *__pyx_n_s_inout_values;
static PyObject *__pyx_n_s_inout_visible;
static PyObject *__pyx_n_s_input_double;
static PyObject *__pyx_n_s_input_float;
static PyObject *__pyx_n_s_input_float2;
static PyObject *__pyx_n_s_input_float3;
static PyObject *__pyx_n_s_input_float4;
static PyObject *__pyx_n_s_input_int;
static PyObject *__pyx_n_s_input_int2;
static PyObject *__pyx_n_s_input_int3;
static PyObject *__pyx_n_s_input_int4;
static PyObject *__pyx_n_s_input_text;
static PyObject *__pyx_n_s_input_text_multiline;
static PyObject *__pyx_n_s_invisible_button;
static PyObject *__pyx_n_s_io_clipboard;
static PyObject *__pyx_n_s_is_any_item_active;
static PyObject *__pyx_n_s_is_any_item_focused;
static PyObject *__pyx_n_s_is_any_item_hovered;
static PyObject *__pyx_n_s_is_item_active;
static PyObject *__pyx_n_s_is_item_clicked;
static PyObject *__pyx_n_s_is_item_focused;
static PyObject *__pyx_n_s_is_item_hovered;
static PyObject *__pyx_n_s_is_item_visible;
static PyObject *__pyx_n_s_is_key_down;
static PyObject *__pyx_n_s_is_key_pressed;
static PyObject *__pyx_n_s_is_mouse_clicked;
static PyObject *__pyx_n_s_is_mouse_double_clicked;
static PyObject *__pyx_n_s_is_mouse_down;
static PyObject *__pyx_n_s_is_mouse_dragging;
static PyObject *__pyx_n_s_is_mouse_hovering_rect;
static PyObject *__pyx_n_s_is_mouse_released;
static PyObject *__pyx_n_s_is_rect_visible;
static PyObject *__pyx_n_s_is_window_appearing;
static PyObject *__pyx_n_s_is_window_collapsed;
static PyObject *__pyx_n_s_is_window_focused;
static PyObject *__pyx_n_s_is_window_hovered;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iterator;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip_longest;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_key_index;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_label_text;
static PyObject *__pyx_n_s_listbox;
static PyObject *__pyx_n_s_listbox_footer;
static PyObject *__pyx_n_s_listbox_header;
static PyObject *__pyx_n_s_local_pos;
static PyObject *__pyx_n_s_lock_threshold;
static PyObject *__pyx_n_s_lower_right_x;
static PyObject *__pyx_n_s_lower_right_y;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_value;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_menu_item;
static PyObject *__pyx_n_s_min_value;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mouse_button;
static PyObject *__pyx_n_s_mouse_cursor_type;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_frame;
static PyObject *__pyx_n_s_new_line;
static PyObject *__pyx_n_s_next_column;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_segments;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_n_s_offset_x;
static PyObject *__pyx_n_s_open_popup;
static PyObject *__pyx_n_s_opened;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_overlay;
static PyObject *__pyx_n_s_overlay_text;
static PyObject *__pyx_n_s_overlay_text_b;
static PyObject *__pyx_n_s_overlay_text_ptr;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_kp_s_pair_param_must_be_length_of_2;
static PyObject *__pyx_n_s_payload;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pivot_x;
static PyObject *__pyx_n_s_pivot_y;
static PyObject *__pyx_n_s_plot_histogram;
static PyObject *__pyx_n_s_plot_lines;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_pop_font;
static PyObject *__pyx_n_s_pop_id;
static PyObject *__pyx_n_s_pop_text_wrap_pos;
static PyObject *__pyx_n_s_pop_text_wrap_position;
static PyObject *__pyx_n_s_pos_x;
static PyObject *__pyx_n_s_pos_y;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_power;
static PyObject *__pyx_n_s_progress_bar;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_push_font;
static PyObject *__pyx_n_s_push_id;
static PyObject *__pyx_n_s_push_text_wrap_pos;
static PyObject *__pyx_n_s_push_text_wrap_position;
static PyObject *__pyx_n_s_py_colored;
static PyObject *__pyx_n_s_py_font;
static PyObject *__pyx_n_s_py_index_buffer_index_size;
static PyObject *__pyx_n_s_py_istyled;
static PyObject *__pyx_n_s_py_scoped;
static PyObject *__pyx_n_s_py_string;
static PyObject *__pyx_n_s_py_styled;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_col_off;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_pos_off;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_size;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_uv_offs;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_s_quadruple_param_must_be_length_o;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r_max_x;
static PyObject *__pyx_n_s_r_max_y;
static PyObject *__pyx_n_s_r_min_x;
static PyObject *__pyx_n_s_r_min_y;
static PyObject *__pyx_n_s_radio_button;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_render;
static PyObject *__pyx_n_s_repeat;
static PyObject *__pyx_n_s_require_pointer;
static PyObject *__pyx_n_s_reset_mouse_drag_delta;
static PyObject *__pyx_n_s_rounding;
static PyObject *__pyx_n_s_rounding_corners_flags;
static PyObject *__pyx_kp_s_s_improperly_initialized;
static PyObject *__pyx_n_s_same_line;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_scale_max;
static PyObject *__pyx_n_s_scale_min;
static PyObject *__pyx_n_s_screen_pos;
static PyObject *__pyx_n_s_scroll_x;
static PyObject *__pyx_n_s_scroll_y;
static PyObject *__pyx_n_s_selectable;
static PyObject *__pyx_n_s_selected;
static PyObject *__pyx_kp_s_self__ptr_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_ranges_ptr_cannot_be_conver;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_separator;
static PyObject *__pyx_n_s_set_clipboard_text_fn;
static PyObject *__pyx_n_s_set_column_offset;
static PyObject *__pyx_n_s_set_column_width;
static PyObject *__pyx_n_s_set_current_context;
static PyObject *__pyx_n_s_set_cursor_pos;
static PyObject *__pyx_n_s_set_cursor_pos_x;
static PyObject *__pyx_n_s_set_cursor_pos_y;
static PyObject *__pyx_n_s_set_cursor_position;
static PyObject *__pyx_n_s_set_cursor_screen_pos;
static PyObject *__pyx_n_s_set_cursor_screen_position;
static PyObject *__pyx_n_s_set_drag_drop_payload;
static PyObject *__pyx_n_s_set_item_allow_overlap;
static PyObject *__pyx_n_s_set_item_default_focus;
static PyObject *__pyx_n_s_set_keyboard_focus_here;
static PyObject *__pyx_n_s_set_mouse_cursor;
static PyObject *__pyx_n_s_set_next_window_bg_alpha;
static PyObject *__pyx_n_s_set_next_window_collapsed;
static PyObject *__pyx_n_s_set_next_window_content_size;
static PyObject *__pyx_n_s_set_next_window_focus;
static PyObject *__pyx_n_s_set_next_window_position;
static PyObject *__pyx_n_s_set_next_window_size;
static PyObject *__pyx_n_s_set_scroll_from_pos_y;
static PyObject *__pyx_n_s_set_scroll_here;
static PyObject *__pyx_n_s_set_scroll_x;
static PyObject *__pyx_n_s_set_scroll_y;
static PyObject *__pyx_n_s_set_tooltip;
static PyObject *__pyx_n_s_set_window_collapsed;
static PyObject *__pyx_n_s_set_window_collapsed_labeled;
static PyObject *__pyx_n_s_set_window_focus;
static PyObject *__pyx_n_s_set_window_focus_labeled;
static PyObject *__pyx_n_s_set_window_font_scale;
static PyObject *__pyx_n_s_set_window_position;
static PyObject *__pyx_n_s_set_window_position_labeled;
static PyObject *__pyx_n_s_set_window_size;
static PyObject *__pyx_n_s_set_window_size_named;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shared_font_atlas;
static PyObject *__pyx_n_s_shortcut;
static PyObject *__pyx_n_s_show_alpha;
static PyObject *__pyx_n_s_show_demo_window;
static PyObject *__pyx_n_s_show_font_selector;
static PyObject *__pyx_n_s_show_metrics_window;
static PyObject *__pyx_n_s_show_style_editor;
static PyObject *__pyx_n_s_show_style_selector;
static PyObject *__pyx_n_s_show_test_window;
static PyObject *__pyx_n_s_show_user_guide;
static PyObject *__pyx_n_s_signatures;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_size_height;
static PyObject *__pyx_n_s_size_pixels;
static PyObject *__pyx_n_s_size_width;
static PyObject *__pyx_n_s_slider_angle;
static PyObject *__pyx_n_s_slider_float;
static PyObject *__pyx_n_s_slider_float2;
static PyObject *__pyx_n_s_slider_float3;
static PyObject *__pyx_n_s_slider_float4;
static PyObject *__pyx_n_s_slider_int;
static PyObject *__pyx_n_s_slider_int2;
static PyObject *__pyx_n_s_slider_int3;
static PyObject *__pyx_n_s_slider_int4;
static PyObject *__pyx_n_s_small_button;
static PyObject *__pyx_n_s_spacing;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_x;
static PyObject *__pyx_n_s_start_y;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_step_fast;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_str_id;
static PyObject *__pyx_n_s_stride;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_style;
static PyObject *__pyx_n_s_style_colors_classic;
static PyObject *__pyx_n_s_style_colors_dark;
static PyObject *__pyx_n_s_style_colors_light;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_colored;
static PyObject *__pyx_n_s_text_disabled;
static PyObject *__pyx_n_s_text_unformatted;
static PyObject *__pyx_n_s_text_wrapped;
static PyObject *__pyx_n_s_texture_id;
static PyObject *__pyx_n_s_thickness;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tint_color;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_tree_node;
static PyObject *__pyx_n_s_tree_pop;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unindent;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper_left_x;
static PyObject *__pyx_n_s_upper_left_y;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_uv0;
static PyObject *__pyx_n_s_uv1;
static PyObject *__pyx_n_s_uv_a;
static PyObject *__pyx_n_s_uv_b;
static PyObject *__pyx_n_s_v_slider_float;
static PyObject *__pyx_n_s_v_slider_int;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value0;
static PyObject *__pyx_n_s_value1;
static PyObject *__pyx_n_s_value2;
static PyObject *__pyx_n_s_value3;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_values_count;
static PyObject *__pyx_n_s_values_offset;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_variable;
static PyObject *__pyx_n_s_variables_and_values;
static PyObject *__pyx_n_s_visible;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_wrap_pos_x;
static PyObject *__pyx_n_s_wrap_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zip_longest;

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(PyObject *, int writable_flag);


/*--- Type declarations ---*/
struct __pyx_obj_4core__Font;
struct __pyx_obj_4core__ImGuiContext;
struct __pyx_obj_4core__DrawCmd;
struct __pyx_obj_4core__DrawList;
struct __pyx_obj_4core__Colors;
struct __pyx_obj_4core_GuiStyle;
struct __pyx_obj_4core__DrawData;
struct __pyx_obj_4core__StaticGlyphRanges;
struct __pyx_obj_4core__FontAtlas;
struct __pyx_obj_4core__IO;
struct __pyx_obj_4core___pyx_scope_struct___py_font;
struct __pyx_obj_4core___pyx_scope_struct_1__py_styled;
struct __pyx_obj_4core___pyx_scope_struct_2__py_colored;
struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled;
struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;
struct __pyx_opt_args_4core_calc_text_size;
struct __pyx_opt_args_4core_push_style_color;
struct __pyx_opt_args_4core_pop_style_var;
struct __pyx_opt_args_4core_get_color_u32_idx;
struct __pyx_opt_args_4core_push_text_wrap_pos;
struct __pyx_opt_args_4core_pop_style_color;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults2;
typedef struct __pyx_defaults2 __pyx_defaults2;
struct __pyx_defaults3;
typedef struct __pyx_defaults3 __pyx_defaults3;

/* "core.pyx":6816
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */
struct __pyx_opt_args_4core_calc_text_size {
  int __pyx_n;
  bool hide_text_after_double_hash;
  float wrap_width;
};

/* "core.pyx":6904
 * 
 * cpdef push_style_color(
 *     cimgui.ImGuiCol variable,             # <<<<<<<<<<<<<<
 *     float r,
 *     float g,
 */
struct __pyx_opt_args_4core_push_style_color {
  int __pyx_n;
  float a;
};

/* "core.pyx":6947
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */
struct __pyx_opt_args_4core_pop_style_var {
  int __pyx_n;
  unsigned int count;
};

/* "core.pyx":6985
 * # Neither singledispatch nor multipledispatch seems to be available in Cython :-/
 * 
 * cpdef get_color_u32_idx(cimgui.ImGuiCol idx, float alpha_mul = 1.0):             # <<<<<<<<<<<<<<
 *     """ retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */
struct __pyx_opt_args_4core_get_color_u32_idx {
  int __pyx_n;
  float alpha_mul;
};

/* "core.pyx":7089
 *     return cimgui.CalcItemWidth()
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */
struct __pyx_opt_args_4core_push_text_wrap_pos {
  int __pyx_n;
  float wrap_pos_x;
};

/* "core.pyx":7134
 *     cimgui.PopButtonRepeat()
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */
struct __pyx_opt_args_4core_pop_style_color {
  int __pyx_n;
  unsigned int count;
};
struct __pyx_defaults {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults1 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults2 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults3 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};

/* "core.pxd":39
 * 
 * 
 * cdef class _Font(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImFont* _ptr
 * 
 */
struct __pyx_obj_4core__Font {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__Font *__pyx_vtab;
  ImFont *_ptr;
};


/* "core.pyx":389
 * 
 * 
 * cdef class _ImGuiContext(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 */
struct __pyx_obj_4core__ImGuiContext {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__ImGuiContext *__pyx_vtab;
  ImGuiContext *_ptr;
};


/* "core.pyx":405
 * 
 * 
 * cdef class _DrawCmd(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawCmd* _ptr
 * 
 */
struct __pyx_obj_4core__DrawCmd {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__DrawCmd *__pyx_vtab;
  ImDrawCmd *_ptr;
};


/* "core.pyx":432
 * 
 * 
 * cdef class _DrawList(object):             # <<<<<<<<<<<<<<
 *     """ Low level drawing API.
 * 
 */
struct __pyx_obj_4core__DrawList {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__DrawList *__pyx_vtab;
  ImDrawList *_ptr;
};


/* "core.pyx":872
 * 
 * 
 * cdef class _Colors(object):             # <<<<<<<<<<<<<<
 *     cdef GuiStyle _style
 * 
 */
struct __pyx_obj_4core__Colors {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__Colors *__pyx_vtab;
  struct __pyx_obj_4core_GuiStyle *_style;
};


/* "core.pyx":898
 * 
 * 
 * cdef class GuiStyle(object):             # <<<<<<<<<<<<<<
 *     """
 *     Container for ImGui style information
 */
struct __pyx_obj_4core_GuiStyle {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_GuiStyle *__pyx_vtab;
  ImGuiStyle *_ptr;
  bool _owner;
  struct __pyx_obj_4core__Colors *_colors;
};


/* "core.pyx":1273
 * 
 * 
 * cdef class _DrawData(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawData* _ptr
 * 
 */
struct __pyx_obj_4core__DrawData {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__DrawData *__pyx_vtab;
  ImDrawData *_ptr;
};


/* "core.pyx":1331
 * 
 * 
 * cdef class _StaticGlyphRanges(object):             # <<<<<<<<<<<<<<
 *     cdef const cimgui.ImWchar* ranges_ptr
 * 
 */
struct __pyx_obj_4core__StaticGlyphRanges {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__StaticGlyphRanges *__pyx_vtab;
  ImWchar const *ranges_ptr;
};


/* "core.pyx":1355
 * 
 * 
 * cdef class _FontAtlas(object):             # <<<<<<<<<<<<<<
 *     """Font atlas object responsible for controling and loading fonts.
 * 
 */
struct __pyx_obj_4core__FontAtlas {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__FontAtlas *__pyx_vtab;
  ImFontAtlas *_ptr;
};


/* "core.pyx":1492
 * 
 * 
 * cdef class _IO(object):             # <<<<<<<<<<<<<<
 *     """Main ImGui I/O context class used for ImGui configuration.
 * 
 */
struct __pyx_obj_4core__IO {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core__IO *__pyx_vtab;
  ImGuiIO *_ptr;
  PyObject *_fonts;
  PyObject *_keep_ini_alive;
  PyObject *_keep_logfile_alive;
};


/* "core.pyx":7943
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
struct __pyx_obj_4core___pyx_scope_struct___py_font {
  PyObject_HEAD
  struct __pyx_obj_4core__Font *__pyx_v_font;
};


/* "core.pyx":7975
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
struct __pyx_obj_4core___pyx_scope_struct_1__py_styled {
  PyObject_HEAD
  PyObject *__pyx_v_count;
  PyObject *__pyx_v_value;
  ImGuiStyleVar __pyx_v_variable;
};


/* "core.pyx":7984
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */
struct __pyx_obj_4core___pyx_scope_struct_2__py_colored {
  PyObject_HEAD
  float __pyx_v_a;
  float __pyx_v_b;
  PyObject *__pyx_v_count;
  float __pyx_v_g;
  float __pyx_v_r;
  ImGuiCol __pyx_v_variable;
};


/* "core.pyx":7999
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled {
  PyObject_HEAD
  PyObject *__pyx_v_count;
  PyObject *__pyx_v_iterator;
  PyObject *__pyx_v_val;
  PyObject *__pyx_v_var;
  PyObject *__pyx_v_variables_and_values;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "core.pyx":8027
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */
struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped {
  PyObject_HEAD
  PyObject *__pyx_v_str_id;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};

/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "core.pyx":1344
 * 
 * 
 * cdef class _Font(object):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 */

struct __pyx_vtabstruct_4core__Font {
  PyObject *(*from_ptr)(ImFont *);
};
static struct __pyx_vtabstruct_4core__Font *__pyx_vtabptr_4core__Font;


/* "core.pyx":389
 * 
 * 
 * cdef class _ImGuiContext(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 */

struct __pyx_vtabstruct_4core__ImGuiContext {
  PyObject *(*from_ptr)(ImGuiContext *);
};
static struct __pyx_vtabstruct_4core__ImGuiContext *__pyx_vtabptr_4core__ImGuiContext;


/* "core.pyx":405
 * 
 * 
 * cdef class _DrawCmd(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawCmd* _ptr
 * 
 */

struct __pyx_vtabstruct_4core__DrawCmd {
  PyObject *(*from_ptr)(ImDrawCmd *);
};
static struct __pyx_vtabstruct_4core__DrawCmd *__pyx_vtabptr_4core__DrawCmd;


/* "core.pyx":432
 * 
 * 
 * cdef class _DrawList(object):             # <<<<<<<<<<<<<<
 *     """ Low level drawing API.
 * 
 */

struct __pyx_vtabstruct_4core__DrawList {
  PyObject *(*from_ptr)(ImDrawList *);
};
static struct __pyx_vtabstruct_4core__DrawList *__pyx_vtabptr_4core__DrawList;


/* "core.pyx":872
 * 
 * 
 * cdef class _Colors(object):             # <<<<<<<<<<<<<<
 *     cdef GuiStyle _style
 * 
 */

struct __pyx_vtabstruct_4core__Colors {
  PyObject *(*_check_color)(struct __pyx_obj_4core__Colors *, ImGuiCol);
};
static struct __pyx_vtabstruct_4core__Colors *__pyx_vtabptr_4core__Colors;
static CYTHON_INLINE PyObject *__pyx_f_4core_7_Colors__check_color(struct __pyx_obj_4core__Colors *, ImGuiCol);


/* "core.pyx":898
 * 
 * 
 * cdef class GuiStyle(object):             # <<<<<<<<<<<<<<
 *     """
 *     Container for ImGui style information
 */

struct __pyx_vtabstruct_4core_GuiStyle {
  PyObject *(*_check_ptr)(struct __pyx_obj_4core_GuiStyle *);
  struct __pyx_obj_4core_GuiStyle *(*from_ref)(ImGuiStyle &);
  struct __pyx_obj_4core_GuiStyle *(*_create)(void);
};
static struct __pyx_vtabstruct_4core_GuiStyle *__pyx_vtabptr_4core_GuiStyle;
static CYTHON_INLINE PyObject *__pyx_f_4core_8GuiStyle__check_ptr(struct __pyx_obj_4core_GuiStyle *);


/* "core.pyx":1273
 * 
 * 
 * cdef class _DrawData(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawData* _ptr
 * 
 */

struct __pyx_vtabstruct_4core__DrawData {
  PyObject *(*from_ptr)(ImDrawData *);
};
static struct __pyx_vtabstruct_4core__DrawData *__pyx_vtabptr_4core__DrawData;


/* "core.pyx":1331
 * 
 * 
 * cdef class _StaticGlyphRanges(object):             # <<<<<<<<<<<<<<
 *     cdef const cimgui.ImWchar* ranges_ptr
 * 
 */

struct __pyx_vtabstruct_4core__StaticGlyphRanges {
  PyObject *(*from_ptr)(ImWchar const *);
};
static struct __pyx_vtabstruct_4core__StaticGlyphRanges *__pyx_vtabptr_4core__StaticGlyphRanges;


/* "core.pyx":1355
 * 
 * 
 * cdef class _FontAtlas(object):             # <<<<<<<<<<<<<<
 *     """Font atlas object responsible for controling and loading fonts.
 * 
 */

struct __pyx_vtabstruct_4core__FontAtlas {
  PyObject *(*from_ptr)(ImFontAtlas *);
};
static struct __pyx_vtabstruct_4core__FontAtlas *__pyx_vtabptr_4core__FontAtlas;


/* "core.pyx":1492
 * 
 * 
 * cdef class _IO(object):             # <<<<<<<<<<<<<<
 *     """Main ImGui I/O context class used for ImGui configuration.
 * 
 */

struct __pyx_vtabstruct_4core__IO {
  char const *(*_get_clipboard_text)(void *);
  void (*_set_clipboard_text)(void *, char const *);
};
static struct __pyx_vtabstruct_4core__IO *__pyx_vtabptr_4core__IO;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

static PyObject *__pyx_float_1_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__30;
static PyObject *__pyx_k__31;
static ImGuiCond __pyx_k__37;
static ImGuiCond __pyx_k__38;
static ImGuiCond __pyx_k__39;
static ImGuiCond __pyx_k__40;
static ImGuiCond __pyx_k__41;
static ImGuiCond __pyx_k__42;
static ImGuiCond __pyx_k__43;
static ImGuiCond __pyx_k__44;
static ImGuiCond __pyx_k__45;
static ImGuiDir __pyx_k__46;
static float __pyx_k__51;
static float __pyx_k__52;
static int __pyx_k__53;
static float __pyx_k__54;
static float __pyx_k__55;
static int __pyx_k__56;
static float __pyx_k__57;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__79;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__222;
static PyObject *__pyx_tuple__224;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__228;
static PyObject *__pyx_tuple__230;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_tuple__236;
static PyObject *__pyx_tuple__238;
static PyObject *__pyx_tuple__240;
static PyObject *__pyx_tuple__242;
static PyObject *__pyx_tuple__244;
static PyObject *__pyx_tuple__246;
static PyObject *__pyx_tuple__248;
static PyObject *__pyx_tuple__250;
static PyObject *__pyx_tuple__252;
static PyObject *__pyx_tuple__254;
static PyObject *__pyx_tuple__256;
static PyObject *__pyx_tuple__258;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__266;
static PyObject *__pyx_tuple__268;
static PyObject *__pyx_tuple__270;
static PyObject *__pyx_tuple__272;
static PyObject *__pyx_tuple__274;
static PyObject *__pyx_tuple__276;
static PyObject *__pyx_tuple__278;
static PyObject *__pyx_tuple__280;
static PyObject *__pyx_tuple__282;
static PyObject *__pyx_tuple__284;
static PyObject *__pyx_tuple__286;
static PyObject *__pyx_tuple__288;
static PyObject *__pyx_tuple__290;
static PyObject *__pyx_tuple__292;
static PyObject *__pyx_tuple__294;
static PyObject *__pyx_tuple__296;
static PyObject *__pyx_tuple__298;
static PyObject *__pyx_tuple__300;
static PyObject *__pyx_tuple__302;
static PyObject *__pyx_tuple__304;
static PyObject *__pyx_tuple__306;
static PyObject *__pyx_tuple__308;
static PyObject *__pyx_tuple__311;
static PyObject *__pyx_tuple__313;
static PyObject *__pyx_tuple__317;
static PyObject *__pyx_tuple__327;
static PyObject *__pyx_tuple__329;
static PyObject *__pyx_tuple__331;
static PyObject *__pyx_tuple__333;
static PyObject *__pyx_tuple__336;
static PyObject *__pyx_tuple__338;
static PyObject *__pyx_tuple__340;
static PyObject *__pyx_tuple__342;
static PyObject *__pyx_tuple__344;
static PyObject *__pyx_tuple__346;
static PyObject *__pyx_tuple__348;
static PyObject *__pyx_tuple__350;
static PyObject *__pyx_tuple__352;
static PyObject *__pyx_tuple__354;
static PyObject *__pyx_tuple__357;
static PyObject *__pyx_tuple__360;
static PyObject *__pyx_tuple__362;
static PyObject *__pyx_tuple__364;
static PyObject *__pyx_tuple__366;
static PyObject *__pyx_tuple__370;
static PyObject *__pyx_tuple__374;
static PyObject *__pyx_tuple__376;
static PyObject *__pyx_tuple__378;
static PyObject *__pyx_tuple__380;
static PyObject *__pyx_tuple__384;
static PyObject *__pyx_tuple__386;
static PyObject *__pyx_tuple__388;
static PyObject *__pyx_tuple__390;
static PyObject *__pyx_tuple__393;
static PyObject *__pyx_tuple__395;
static PyObject *__pyx_tuple__399;
static PyObject *__pyx_tuple__407;
static PyObject *__pyx_tuple__409;
static PyObject *__pyx_tuple__411;
static PyObject *__pyx_tuple__415;
static PyObject *__pyx_tuple__422;
static PyObject *__pyx_tuple__424;
static PyObject *__pyx_tuple__426;
static PyObject *__pyx_tuple__428;
static PyObject *__pyx_tuple__430;
static PyObject *__pyx_tuple__433;
static PyObject *__pyx_tuple__435;
static PyObject *__pyx_tuple__437;
static PyObject *__pyx_tuple__438;
static PyObject *__pyx_tuple__439;
static PyObject *__pyx_tuple__440;
static PyObject *__pyx_tuple__441;
static PyObject *__pyx_tuple__447;
static PyObject *__pyx_tuple__448;
static PyObject *__pyx_tuple__449;
static PyObject *__pyx_tuple__450;
static PyObject *__pyx_tuple__451;
static PyObject *__pyx_tuple__452;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__130;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__134;
static PyObject *__pyx_codeobj__136;
static PyObject *__pyx_codeobj__138;
static PyObject *__pyx_codeobj__140;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__146;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__148;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__176;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__180;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__182;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__184;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__188;
static PyObject *__pyx_codeobj__190;
static PyObject *__pyx_codeobj__192;
static PyObject *__pyx_codeobj__194;
static PyObject *__pyx_codeobj__196;
static PyObject *__pyx_codeobj__198;
static PyObject *__pyx_codeobj__200;
static PyObject *__pyx_codeobj__201;
static PyObject *__pyx_codeobj__202;
static PyObject *__pyx_codeobj__204;
static PyObject *__pyx_codeobj__206;
static PyObject *__pyx_codeobj__208;
static PyObject *__pyx_codeobj__210;
static PyObject *__pyx_codeobj__212;
static PyObject *__pyx_codeobj__214;
static PyObject *__pyx_codeobj__215;
static PyObject *__pyx_codeobj__217;
static PyObject *__pyx_codeobj__219;
static PyObject *__pyx_codeobj__221;
static PyObject *__pyx_codeobj__223;
static PyObject *__pyx_codeobj__225;
static PyObject *__pyx_codeobj__227;
static PyObject *__pyx_codeobj__229;
static PyObject *__pyx_codeobj__231;
static PyObject *__pyx_codeobj__233;
static PyObject *__pyx_codeobj__235;
static PyObject *__pyx_codeobj__237;
static PyObject *__pyx_codeobj__239;
static PyObject *__pyx_codeobj__241;
static PyObject *__pyx_codeobj__243;
static PyObject *__pyx_codeobj__245;
static PyObject *__pyx_codeobj__247;
static PyObject *__pyx_codeobj__249;
static PyObject *__pyx_codeobj__251;
static PyObject *__pyx_codeobj__253;
static PyObject *__pyx_codeobj__255;
static PyObject *__pyx_codeobj__257;
static PyObject *__pyx_codeobj__259;
static PyObject *__pyx_codeobj__261;
static PyObject *__pyx_codeobj__263;
static PyObject *__pyx_codeobj__265;
static PyObject *__pyx_codeobj__267;
static PyObject *__pyx_codeobj__269;
static PyObject *__pyx_codeobj__271;
static PyObject *__pyx_codeobj__273;
static PyObject *__pyx_codeobj__275;
static PyObject *__pyx_codeobj__277;
static PyObject *__pyx_codeobj__279;
static PyObject *__pyx_codeobj__281;
static PyObject *__pyx_codeobj__283;
static PyObject *__pyx_codeobj__285;
static PyObject *__pyx_codeobj__287;
static PyObject *__pyx_codeobj__289;
static PyObject *__pyx_codeobj__291;
static PyObject *__pyx_codeobj__293;
static PyObject *__pyx_codeobj__295;
static PyObject *__pyx_codeobj__297;
static PyObject *__pyx_codeobj__299;
static PyObject *__pyx_codeobj__301;
static PyObject *__pyx_codeobj__303;
static PyObject *__pyx_codeobj__305;
static PyObject *__pyx_codeobj__307;
static PyObject *__pyx_codeobj__309;
static PyObject *__pyx_codeobj__310;
static PyObject *__pyx_codeobj__312;
static PyObject *__pyx_codeobj__314;
static PyObject *__pyx_codeobj__315;
static PyObject *__pyx_codeobj__316;
static PyObject *__pyx_codeobj__318;
static PyObject *__pyx_codeobj__319;
static PyObject *__pyx_codeobj__320;
static PyObject *__pyx_codeobj__321;
static PyObject *__pyx_codeobj__322;
static PyObject *__pyx_codeobj__323;
static PyObject *__pyx_codeobj__324;
static PyObject *__pyx_codeobj__325;
static PyObject *__pyx_codeobj__326;
static PyObject *__pyx_codeobj__328;
static PyObject *__pyx_codeobj__330;
static PyObject *__pyx_codeobj__332;
static PyObject *__pyx_codeobj__334;
static PyObject *__pyx_codeobj__335;
static PyObject *__pyx_codeobj__337;
static PyObject *__pyx_codeobj__339;
static PyObject *__pyx_codeobj__341;
static PyObject *__pyx_codeobj__343;
static PyObject *__pyx_codeobj__345;
static PyObject *__pyx_codeobj__347;
static PyObject *__pyx_codeobj__349;
static PyObject *__pyx_codeobj__351;
static PyObject *__pyx_codeobj__353;
static PyObject *__pyx_codeobj__355;
static PyObject *__pyx_codeobj__356;
static PyObject *__pyx_codeobj__358;
static PyObject *__pyx_codeobj__359;
static PyObject *__pyx_codeobj__361;
static PyObject *__pyx_codeobj__363;
static PyObject *__pyx_codeobj__365;
static PyObject *__pyx_codeobj__367;
static PyObject *__pyx_codeobj__368;
static PyObject *__pyx_codeobj__369;
static PyObject *__pyx_codeobj__371;
static PyObject *__pyx_codeobj__372;
static PyObject *__pyx_codeobj__373;
static PyObject *__pyx_codeobj__375;
static PyObject *__pyx_codeobj__377;
static PyObject *__pyx_codeobj__379;
static PyObject *__pyx_codeobj__381;
static PyObject *__pyx_codeobj__382;
static PyObject *__pyx_codeobj__383;
static PyObject *__pyx_codeobj__385;
static PyObject *__pyx_codeobj__387;
static PyObject *__pyx_codeobj__389;
static PyObject *__pyx_codeobj__391;
static PyObject *__pyx_codeobj__392;
static PyObject *__pyx_codeobj__394;
static PyObject *__pyx_codeobj__396;
static PyObject *__pyx_codeobj__397;
static PyObject *__pyx_codeobj__398;
static PyObject *__pyx_codeobj__400;
static PyObject *__pyx_codeobj__401;
static PyObject *__pyx_codeobj__402;
static PyObject *__pyx_codeobj__403;
static PyObject *__pyx_codeobj__404;
static PyObject *__pyx_codeobj__405;
static PyObject *__pyx_codeobj__406;
static PyObject *__pyx_codeobj__408;
static PyObject *__pyx_codeobj__410;
static PyObject *__pyx_codeobj__412;
static PyObject *__pyx_codeobj__413;
static PyObject *__pyx_codeobj__414;
static PyObject *__pyx_codeobj__416;
static PyObject *__pyx_codeobj__417;
static PyObject *__pyx_codeobj__418;
static PyObject *__pyx_codeobj__419;
static PyObject *__pyx_codeobj__420;
static PyObject *__pyx_codeobj__421;
static PyObject *__pyx_codeobj__423;
static PyObject *__pyx_codeobj__425;
static PyObject *__pyx_codeobj__427;
static PyObject *__pyx_codeobj__429;
static PyObject *__pyx_codeobj__431;
static PyObject *__pyx_codeobj__432;
static PyObject *__pyx_codeobj__434;
static PyObject *__pyx_codeobj__436;
static PyObject *__pyx_codeobj__442;
static PyObject *__pyx_codeobj__443;
static PyObject *__pyx_codeobj__444;
static PyObject *__pyx_codeobj__445;
static PyObject *__pyx_codeobj__446;
static PyObject *__pyx_codeobj__453;


/* Module declarations from 'core' */
static PyTypeObject *__pyx_ptype_4core__Font = 0;
static PyTypeObject *__pyx_ptype_4core__ImGuiContext = 0;
static PyTypeObject *__pyx_ptype_4core__DrawCmd = 0;
static PyTypeObject *__pyx_ptype_4core__DrawList = 0;
static PyTypeObject *__pyx_ptype_4core__Colors = 0;
static PyTypeObject *__pyx_ptype_4core_GuiStyle = 0;
static PyTypeObject *__pyx_ptype_4core__DrawData = 0;
static PyTypeObject *__pyx_ptype_4core__StaticGlyphRanges = 0;
static PyTypeObject *__pyx_ptype_4core__FontAtlas = 0;
static PyTypeObject *__pyx_ptype_4core__IO = 0;
static PyTypeObject *__pyx_ptype_4core___pyx_scope_struct___py_font = 0;
static PyTypeObject *__pyx_ptype_4core___pyx_scope_struct_1__py_styled = 0;
static PyTypeObject *__pyx_ptype_4core___pyx_scope_struct_2__py_colored = 0;
static PyTypeObject *__pyx_ptype_4core___pyx_scope_struct_3__py_istyled = 0;
static PyTypeObject *__pyx_ptype_4core___pyx_scope_struct_4__py_scoped = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static unsigned short *__pyx_v_4core__LATIN_ALL;
//__PYX_EXTERN_C DL_EXPORT(PyObject) *ImGuiError;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
//static PyObject *__pyx_f_4core__bytes(PyObject *); /*proto*/
//static PyObject *__pyx_f_4core__from_bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_4core__cast_ImVec2_tuple(ImVec2); /*proto*/
static ImVec2 __pyx_f_4core__cast_tuple_ImVec2(PyObject *); /*proto*/
static ImVec2 __pyx_f_4core__cast_args_ImVec2(float, float); /*proto*/
static ImVec4 __pyx_f_4core__cast_tuple_ImVec4(PyObject *); /*proto*/
static ImVec4 __pyx_f_4core__cast_args_ImVec4(float, float, float, float); /*proto*/
static PyObject *__pyx_f_4core__cast_ImVec4_tuple(ImVec4); /*proto*/
static PyObject *__pyx_f_4core_calc_text_size(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4core_calc_text_size *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4core_push_style_var(ImGuiStyleVar, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_push_style_color(ImGuiCol, float, float, float, int __pyx_skip_dispatch, struct __pyx_opt_args_4core_push_style_color *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4core_pop_style_var(int __pyx_skip_dispatch, struct __pyx_opt_args_4core_pop_style_var *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4core_get_font_size(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_get_style_color_vec_4(ImGuiCol, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_get_font_tex_uv_white_pixel(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_get_color_u32_idx(ImGuiCol, int __pyx_skip_dispatch, struct __pyx_opt_args_4core_get_color_u32_idx *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4core_get_color_u32_rgba(float, float, float, float, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_get_color_u32(ImU32, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_push_item_width(float, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_pop_item_width(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_calculate_item_width(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_push_text_wrap_pos(int __pyx_skip_dispatch, struct __pyx_opt_args_4core_push_text_wrap_pos *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4core_pop_text_wrap_pos(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_push_allow_keyboard_focus(bool, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_pop_allow_keyboard_focus(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_push_button_repeat(bool, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_pop_button_repeat(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4core_pop_style_color(int __pyx_skip_dispatch, struct __pyx_opt_args_4core_pop_style_color *__pyx_optional_args); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/

static PyObject *__pyx_f_4core_13_ImGuiContext_from_ptr(ImGuiContext *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_4core_8_DrawCmd_from_ptr(ImDrawCmd *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_4core_9_DrawList_from_ptr(ImDrawList *__pyx_v_ptr); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_4core_7_Colors__check_color(CYTHON_UNUSED struct __pyx_obj_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_4core_8GuiStyle__check_ptr(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto*/
static struct __pyx_obj_4core_GuiStyle *__pyx_f_4core_8GuiStyle_from_ref(ImGuiStyle &__pyx_v_ref); /* proto*/
static struct __pyx_obj_4core_GuiStyle *__pyx_f_4core_8GuiStyle__create(void); /* proto*/
static PyObject *__pyx_f_4core_9_DrawData_from_ptr(ImDrawData *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_4core_18_StaticGlyphRanges_from_ptr(ImWchar const *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_4core_5_Font_from_ptr(ImFont *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_4core_10_FontAtlas_from_ptr(ImFontAtlas *__pyx_v_ptr); /* proto*/
static char const *__pyx_f_4core_3_IO__get_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data); /* proto*/
static void __pyx_f_4core_3_IO__set_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data, char const *__pyx_v_text); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

static PyObject *__pyx_pf_4core_13_ImGuiContext___eq__(struct __pyx_obj_4core__ImGuiContext *__pyx_v_self, struct __pyx_obj_4core__ImGuiContext *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_4core_13_ImGuiContext_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__ImGuiContext *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13_ImGuiContext_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__ImGuiContext *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_8_DrawCmd_10texture_id___get__(struct __pyx_obj_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8_DrawCmd_9clip_rect___get__(struct __pyx_obj_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8_DrawCmd_10elem_count___get__(struct __pyx_obj_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8_DrawCmd___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8_DrawCmd_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_15cmd_buffer_size___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_15cmd_buffer_data___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_15vtx_buffer_size___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_15vtx_buffer_data___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_15idx_buffer_size___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_15idx_buffer_data___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_add_line(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_start_x, float __pyx_v_start_y, float __pyx_v_end_x, float __pyx_v_end_y, ImU32 __pyx_v_col, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_2add_rect(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_4add_rect_filled(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_6add_circle(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, int __pyx_v_num_segments, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_8add_circle_filled(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, ImU32 __pyx_v_num_segments); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_10add_text(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_pos_x, float __pyx_v_pos_y, ImU32 __pyx_v_col, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_12add_image(struct __pyx_obj_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_texture_id, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_uv_a, PyObject *__pyx_v_uv_b, ImU32 __pyx_v_col); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_14add_polyline(struct __pyx_obj_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_points, ImU32 __pyx_v_col, bool __pyx_v_closed, float __pyx_v_thickness); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_16channels_split(struct __pyx_obj_4core__DrawList *__pyx_v_self, int __pyx_v_channels_count); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_18channels_set_current(struct __pyx_obj_4core__DrawList *__pyx_v_self, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_20channels_merge(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_8commands___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawList_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_7_Colors___cinit__(struct __pyx_obj_4core__Colors *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7_Colors_2__init__(struct __pyx_obj_4core__Colors *__pyx_v_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_gui_style); /* proto */
static PyObject *__pyx_pf_4core_7_Colors_4__getitem__(struct __pyx_obj_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable); /* proto */
static int __pyx_pf_4core_7_Colors_6__setitem__(struct __pyx_obj_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7_Colors_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Colors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7_Colors_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Colors *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_8GuiStyle___cinit__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static void __pyx_pf_4core_8GuiStyle_2__dealloc__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_4__eq__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_6create(void); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_5alpha___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_5alpha_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_14window_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_14window_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_15window_min_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_15window_min_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_15window_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_15window_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_18window_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_18window_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_14child_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_14child_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_17child_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_17child_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_14popup_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_14popup_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_17popup_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_17popup_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_18window_title_align___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_18window_title_align_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_13frame_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_13frame_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_14frame_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_14frame_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_17frame_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_17frame_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_12item_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_12item_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_18item_inner_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_18item_inner_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_19touch_extra_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_19touch_extra_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_14indent_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_14indent_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_19columns_min_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_19columns_min_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_14scrollbar_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_14scrollbar_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_18scrollbar_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_18scrollbar_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_13grab_min_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_13grab_min_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_13grab_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_13grab_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_17button_text_align___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_17button_text_align_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_22display_window_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_22display_window_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_25display_safe_area_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_25display_safe_area_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_18mouse_cursor_scale___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_18mouse_cursor_scale_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_18anti_aliased_lines___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_18anti_aliased_lines_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_17anti_aliased_fill___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_17anti_aliased_fill_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_28curve_tessellation_tolerance___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_8color(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, ImGuiCol __pyx_v_variable); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_6colors___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_8GuiStyle_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_GuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_9_DrawData___init__(CYTHON_UNUSED struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_2_require_pointer(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_4deindex_all_buffers(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_6scale_clip_rects(struct __pyx_obj_4core__DrawData *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_5valid___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_9cmd_count___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_15total_vtx_count___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_15total_idx_count___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_14commands_lists___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9_DrawData_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_18_StaticGlyphRanges___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18_StaticGlyphRanges_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_5_Font___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Font *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_5_Font_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Font *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_10_FontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_2_require_pointer(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_4add_font_default(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_6add_font_from_file_ttf(struct __pyx_obj_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_filename, float __pyx_v_size_pixels, struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_glyph_ranges); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_8clear_tex_data(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_10clear_input_data(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_12clear_fonts(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_14clear(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_16get_glyph_ranges_default(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_18get_glyph_ranges_korean(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_20get_glyph_ranges_japanese(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_22get_glyph_ranges_chinese_full(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_24get_glyph_ranges_chinese(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_26get_glyph_ranges_cyrillic(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_28get_glyph_ranges_latin(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_30get_tex_data_as_alpha8(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_32get_tex_data_as_rgba32(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_10texture_id___get__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static int __pyx_pf_4core_10_FontAtlas_10texture_id_2__set__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_13texture_width___get__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_14texture_height___get__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10_FontAtlas_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_3_IO___init__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_12config_flags___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_12config_flags_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, ImGuiConfigFlags __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_13backend_flags___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_13backend_flags_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, ImGuiBackendFlags __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_12display_size___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_12display_size_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_10delta_time___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_10delta_time_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_time); /* proto */
static PyObject *__pyx_pf_4core_3_IO_15ini_saving_rate___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_15ini_saving_rate_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_13log_file_name___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_13log_file_name_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_13ini_file_name___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_13ini_file_name_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_23mouse_double_click_time___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_23mouse_double_click_time_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_31mouse_double_click_max_distance___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_31mouse_double_click_max_distance_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_20mouse_drag_threshold___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_20mouse_drag_threshold_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_7key_map___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_16key_repeat_delay___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_16key_repeat_delay_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_15key_repeat_rate___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_15key_repeat_rate_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_5fonts___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_17font_global_scale___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_17font_global_scale_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_23font_allow_user_scaling___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_23font_allow_user_scaling_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_16display_fb_scale___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_16display_fb_scale_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_19display_visible_min___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_19display_visible_min_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_19display_visible_max___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_19display_visible_max_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_24config_mac_osx_behaviors___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_24config_mac_osx_behaviors_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_19config_cursor_blink___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_19config_cursor_blink_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_32config_resize_windows_from_edges___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_32config_resize_windows_from_edges_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_21get_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_21get_clipboard_text_fn_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_4core_3_IO_21set_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_21set_clipboard_text_fn_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_4core_3_IO_9mouse_pos___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_9mouse_pos_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_10mouse_down___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_11mouse_wheel___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_11mouse_wheel_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_22mouse_wheel_horizontal___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_22mouse_wheel_horizontal_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_17mouse_draw_cursor___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_17mouse_draw_cursor_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_8key_ctrl___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_8key_ctrl_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_9key_shift___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_9key_shift_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_7key_alt___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_7key_alt_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_9key_super___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_3_IO_9key_super_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_3_IO_9keys_down___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_2add_input_character(struct __pyx_obj_4core__IO *__pyx_v_self, ImWchar __pyx_v_c); /* proto */
static PyObject *__pyx_pf_4core_3_IO_4add_input_characters_utf8(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_utf8_chars); /* proto */
static PyObject *__pyx_pf_4core_3_IO_6clear_input_characters(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_18want_capture_mouse___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_21want_capture_keyboard___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_15want_text_input___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_18want_set_mouse_pos___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_21want_save_ini_setting___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_10nav_active___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_11nav_visible___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_9framerate___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_23metrics_render_vertices___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_22metrics_active_windows___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_11mouse_delta___get__(struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_3_IO_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_get_io(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_2get_style(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_4new_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_6end_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_8render(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_10show_user_guide(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_12get_version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_14style_colors_dark(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_dst); /* proto */
static PyObject *__pyx_pf_4core_16style_colors_classic(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_dst); /* proto */
static PyObject *__pyx_pf_4core_18style_colors_light(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_dst); /* proto */
static PyObject *__pyx_pf_4core_20show_style_editor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_style); /* proto */
static PyObject *__pyx_pf_4core_22show_demo_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable); /* proto */
static PyObject *__pyx_pf_4core_24show_test_window(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_26show_metrics_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable); /* proto */
static PyObject *__pyx_pf_4core_28show_style_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4core_30show_font_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4core_32begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_closable, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_34get_draw_data(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_36end(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_38begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_pf_4core_507__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_497begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_509__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_499begin_child(CYTHON_UNUSED PyObject *__pyx_self, ImGuiID __pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_40end_child(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_42get_content_region_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_44get_content_region_available(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_46get_content_region_available_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_48get_window_content_region_min(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_50get_window_content_region_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_52get_window_content_region_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_54set_window_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_56set_window_focus_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4core_58set_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_60set_window_size_named(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_62get_scroll_x(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_64get_scroll_y(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_66get_scroll_max_x(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_68get_scroll_max_y(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_70set_scroll_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_x); /* proto */
static PyObject *__pyx_pf_4core_72set_scroll_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_y); /* proto */
static PyObject *__pyx_pf_4core_74set_window_font_scale(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scale); /* proto */
static PyObject *__pyx_pf_4core_76set_next_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_78set_next_window_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_80set_next_window_bg_alpha(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_4core_82get_window_draw_list(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_84get_overlay_draw_list(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_86get_window_position(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_88get_window_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_90get_window_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_92get_window_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_94set_next_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition, float __pyx_v_pivot_x, float __pyx_v_pivot_y); /* proto */
static PyObject *__pyx_pf_4core_96set_next_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_98set_next_window_content_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_100set_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_102set_window_position_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_104set_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_106set_window_collapsed_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_108is_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_110is_window_appearing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_112tree_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, ImGuiTreeNodeFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_114tree_pop(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_116collapsing_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, PyObject *__pyx_v_visible, ImGuiTreeNodeFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_118selectable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_selected, ImGuiTreeNodeFlags __pyx_v_flags, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_120listbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items); /* proto */
static PyObject *__pyx_pf_4core_122listbox_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_124listbox_footer(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_126set_tooltip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_128begin_tooltip(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_130end_tooltip(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_132begin_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_134end_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_136begin_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_138end_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_140begin_menu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_4core_142end_menu(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_144menu_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_shortcut, bool __pyx_v_selected, PyObject *__pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_4core_146open_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4core_148begin_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_150begin_popup_modal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_visible, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_152begin_popup_context_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_4core_154begin_popup_context_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_also_over_items, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_4core_156end_popup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_158close_current_popup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_160text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_162text_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_4core_164text_disabled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_166text_wrapped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_168label_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_170text_unformatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_172bullet(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_174bullet_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_176button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_178small_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4core_180arrow_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiDir __pyx_v_direction); /* proto */
static PyObject *__pyx_pf_4core_182invisible_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_identifier, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_184color_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_desc_id, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_a, PyObject *__pyx_v_flags, float __pyx_v_width, float __pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_186image_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color, int __pyx_v_frame_padding); /* proto */
static PyObject *__pyx_pf_4core_188image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color); /* proto */
static PyObject *__pyx_pf_4core_190checkbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_state); /* proto */
static PyObject *__pyx_pf_4core_192checkbox_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, unsigned int __pyx_v_flags, unsigned int __pyx_v_flags_value); /* proto */
static PyObject *__pyx_pf_4core_194radio_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_active); /* proto */
static PyObject *__pyx_pf_4core_196combo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items); /* proto */
static PyObject *__pyx_pf_4core_198color_edit3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_200color_edit4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, bool __pyx_v_show_alpha, PyObject *__pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_202drag_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_204drag_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_206drag_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_208drag_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_210drag_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_212drag_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_214drag_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_216drag_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_218input_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_220input_text_multiline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, float __pyx_v_width, float __pyx_v_height, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_222input_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_step, float __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_224input_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_226input_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_228input_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_230input_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_step, int __pyx_v_step_fast, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_232input_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_234input_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_236input_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_238input_double(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, double __pyx_v_value, double __pyx_v_step, double __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_240slider_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value); /* proto */
static PyObject *__pyx_pf_4core_242slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_244slider_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_246slider_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_248slider_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_250slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_252slider_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_254slider_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_256slider_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_258v_slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_4core_260v_slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_4core_262plot_lines(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride); /* proto */
static PyObject *__pyx_pf_4core_264plot_histogram(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride); /* proto */
static PyObject *__pyx_pf_4core_266progress_bar(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_fraction, PyObject *__pyx_v_size, PyObject *__pyx_v_overlay); /* proto */
static PyObject *__pyx_pf_4core_268set_item_default_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_270set_keyboard_focus_here(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_offset); /* proto */
static PyObject *__pyx_pf_4core_272is_item_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_274is_item_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_276is_item_active(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_278is_item_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_4core_280is_item_visible(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_282is_any_item_hovered(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_284is_any_item_active(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_286is_any_item_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_288get_item_rect_min(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_290get_item_rect_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_292get_item_rect_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_294set_item_allow_overlap(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_296is_window_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_298is_window_focused(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_300is_rect_visible(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_size_width, float __pyx_v_size_height); /* proto */
static PyObject *__pyx_pf_4core_302get_style_color_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_4core_304get_time(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_306get_key_index(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_key); /* proto */
static PyObject *__pyx_pf_4core_308is_key_pressed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_key_index, bool __pyx_v_repeat); /* proto */
static PyObject *__pyx_pf_4core_310is_key_down(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_key_index); /* proto */
static PyObject *__pyx_pf_4core_312is_mouse_hovering_rect(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r_min_x, float __pyx_v_r_min_y, float __pyx_v_r_max_x, float __pyx_v_r_max_y, bool __pyx_v_clip); /* proto */
static PyObject *__pyx_pf_4core_314is_mouse_double_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_4core_316is_mouse_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, bool __pyx_v_repeat); /* proto */
static PyObject *__pyx_pf_4core_318is_mouse_released(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_4core_320is_mouse_down(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_4core_322is_mouse_dragging(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold); /* proto */
static PyObject *__pyx_pf_4core_324get_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold); /* proto */
static PyObject *__pyx_pf_4core_326get_mouse_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_328reset_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_4core_330get_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_332set_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self, ImGuiMouseCursor __pyx_v_mouse_cursor_type); /* proto */
static PyObject *__pyx_pf_4core_334set_scroll_here(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_center_y_ratio); /* proto */
static PyObject *__pyx_pf_4core_336set_scroll_from_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_pos_y, float __pyx_v_center_y_ratio); /* proto */
static PyObject *__pyx_pf_4core_338push_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__Font *__pyx_v_font); /* proto */
static PyObject *__pyx_pf_4core_340pop_font(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_342calc_text_size(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, bool __pyx_v_hide_text_after_double_hash, float __pyx_v_wrap_width); /* proto */
static PyObject *__pyx_pf_4core_344push_style_var(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_346push_style_color(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_4core_348pop_style_var(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_4core_350get_font_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_352get_style_color_vec_4(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_4core_354get_font_tex_uv_white_pixel(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_356get_color_u32_idx(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx, float __pyx_v_alpha_mul); /* proto */
static PyObject *__pyx_pf_4core_358get_color_u32_rgba(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_4core_360get_color_u32(CYTHON_UNUSED PyObject *__pyx_self, ImU32 __pyx_v_col); /* proto */
static PyObject *__pyx_pf_4core_362push_item_width(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_item_width); /* proto */
static PyObject *__pyx_pf_4core_364pop_item_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_366calculate_item_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_368push_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_wrap_pos_x); /* proto */
static PyObject *__pyx_pf_4core_370pop_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_372push_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_allow_focus); /* proto */
static PyObject *__pyx_pf_4core_374pop_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_376push_button_repeat(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_repeat); /* proto */
static PyObject *__pyx_pf_4core_378pop_button_repeat(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_380pop_style_color(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_4core_382separator(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_384same_line(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position, float __pyx_v_spacing); /* proto */
static PyObject *__pyx_pf_4core_386new_line(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_388spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_390dummy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_4core_392indent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_4core_394unindent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_4core_396columns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_count, PyObject *__pyx_v_identifier, bool __pyx_v_border); /* proto */
static PyObject *__pyx_pf_4core_398next_column(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_400get_column_index(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_402get_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index); /* proto */
static PyObject *__pyx_pf_4core_404set_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_offset_x); /* proto */
static PyObject *__pyx_pf_4core_406get_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index); /* proto */
static PyObject *__pyx_pf_4core_408set_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_4core_410get_columns_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_412begin_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self, ImGuiDragDropFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_414set_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, PyObject *__pyx_v_data, ImGuiCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_4core_416end_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_418begin_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_420accept_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, ImGuiDragDropFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_422end_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_424begin_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_426end_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_428get_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_430get_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_432get_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_434set_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_local_pos); /* proto */
static PyObject *__pyx_pf_4core_436set_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x); /* proto */
static PyObject *__pyx_pf_4core_438set_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_4core_440get_cursor_start_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_442get_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_444set_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_screen_pos); /* proto */
static PyObject *__pyx_pf_4core_446align_text_to_frame_padding(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_448get_text_line_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_450get_text_line_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_452get_frame_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_454get_frame_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_456create_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__FontAtlas *__pyx_v_shared_font_atlas); /* proto */
static PyObject *__pyx_pf_4core_458destroy_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__ImGuiContext *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_4core_460get_current_context(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_462set_current_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__ImGuiContext *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_4core_464push_id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id); /* proto */
static PyObject *__pyx_pf_4core_466pop_id(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_468_ansifeed_text_ansi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4core_470_ansifeed_text_ansi_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_4core_472_py_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__Font *__pyx_v_font); /* proto */
static PyObject *__pyx_pf_4core_475_py_styled(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_478_py_colored(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_4core_481_py_istyled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variables_and_values); /* proto */
static PyObject *__pyx_pf_4core_484_py_scoped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id); /* proto */
static PyObject *__pyx_pf_4core_487_py_vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_489_py_vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_491_py_vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_493_py_vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_495_py_index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4core__Font(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__ImGuiContext(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__DrawCmd(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__DrawList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__Colors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_GuiStyle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__DrawData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__StaticGlyphRanges(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__FontAtlas(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core__IO(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core___pyx_scope_struct___py_font(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core___pyx_scope_struct_1__py_styled(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core___pyx_scope_struct_2__py_colored(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core___pyx_scope_struct_3__py_istyled(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core___pyx_scope_struct_4__py_scoped(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_ value);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImU32 __Pyx_PyInt_As_ImU32(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiCol __Pyx_PyInt_As_ImGuiCol(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiConfigFlags __Pyx_PyInt_As_ImGuiConfigFlags(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiBackendFlags __Pyx_PyInt_As_ImGuiBackendFlags(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImWchar __Pyx_PyInt_As_ImWchar(PyObject *);

/* CIntToPy.proto */
//static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiID __Pyx_PyInt_As_ImGuiID(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags(ImGuiWindowFlags value);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiCond __Pyx_PyInt_As_ImGuiCond(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiTreeNodeFlags __Pyx_PyInt_As_ImGuiTreeNodeFlags(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiDir __Pyx_PyInt_As_ImGuiDir(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiInputTextFlags __Pyx_PyInt_As_ImGuiInputTextFlags(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiHoveredFlags __Pyx_PyInt_As_ImGuiHoveredFlags(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiMouseCursor __Pyx_PyInt_As_ImGuiMouseCursor(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiStyleVar __Pyx_PyInt_As_ImGuiStyleVar(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE ImGuiDragDropFlags __Pyx_PyInt_As_ImGuiDragDropFlags(PyObject *);

/* CIntToPy.proto */
//static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
//static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
//static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol(ImGuiCol value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags(ImGuiConfigFlags value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags(ImGuiBackendFlags value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiID(ImGuiID value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir(ImGuiDir value);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiColorEditFlags __Pyx_PyInt_As_ImGuiColorEditFlags(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor(ImGuiMouseCursor value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar(ImGuiStyleVar value);

/* CIntToPy.proto */
//static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImU32(ImU32 value);

/* ImportNumPyArray.proto */
static PyObject *__pyx_numpy_ndarray = NULL;
static PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void);

/* CIntFromPy.proto */
//static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
//static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);


/* "core.pyx":343
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

static PyObject *__pyx_f_4core__cast_ImVec2_tuple(ImVec2 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec2_tuple", 0);

  /* "core.pyx":344
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa
 *     return Vec2(vec.x, vec.y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":343
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core._cast_ImVec2_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":347
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_4core__cast_tuple_ImVec2(PyObject *__pyx_v_pair) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec2", 0);

  /* "core.pyx":350
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "core.pyx":351
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 351, __pyx_L1_error)

    /* "core.pyx":350
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  }

  /* "core.pyx":353
 *         raise ValueError("pair param must be length of 2")
 * 
 *     vec.x, vec.y = pair             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_pair))) || (PyList_CheckExact(__pyx_v_pair))) {
    PyObject* sequence = __pyx_v_pair;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_v_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 353, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vec.x = __pyx_t_7;
  __pyx_v_vec.y = __pyx_t_8;

  /* "core.pyx":355
 *     vec.x, vec.y = pair
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "core.pyx":347
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core._cast_tuple_ImVec2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":358
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_4core__cast_args_ImVec2(float __pyx_v_x, float __pyx_v_y) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("_cast_args_ImVec2", 0);

  /* "core.pyx":361
 *     cdef cimgui.ImVec2 vec
 * 
 *     vec.x, vec.y = x, y             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;

  /* "core.pyx":363
 *     vec.x, vec.y = x, y
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "core.pyx":358
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":366
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_4core__cast_tuple_ImVec4(PyObject *__pyx_v_quadruple) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec4", 0);

  /* "core.pyx":369
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_quadruple); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "core.pyx":370
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 370, __pyx_L1_error)

    /* "core.pyx":369
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  }

  /* "core.pyx":372
 *         raise ValueError("quadruple param must be length of 4")
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_quadruple))) || (PyList_CheckExact(__pyx_v_quadruple))) {
    PyObject* sequence = __pyx_v_quadruple;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 372, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_v_quadruple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 372, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_vec.x = __pyx_t_9;
  __pyx_v_vec.y = __pyx_t_10;
  __pyx_v_vec.z = __pyx_t_11;
  __pyx_v_vec.w = __pyx_t_12;

  /* "core.pyx":374
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "core.pyx":366
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("core._cast_tuple_ImVec4", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":377
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_4core__cast_args_ImVec4(float __pyx_v_x, float __pyx_v_y, float __pyx_v_z, float __pyx_v_w) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  __Pyx_RefNannySetupContext("_cast_args_ImVec4", 0);

  /* "core.pyx":380
 *     cdef cimgui.ImVec4 vec
 * 
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_t_3 = __pyx_v_z;
  __pyx_t_4 = __pyx_v_w;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;
  __pyx_v_vec.z = __pyx_t_3;
  __pyx_v_vec.w = __pyx_t_4;

  /* "core.pyx":382
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "core.pyx":377
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":385
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

static PyObject *__pyx_f_4core__cast_ImVec4_tuple(ImVec4 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec4_tuple", 0);

  /* "core.pyx":386
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":385
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core._cast_ImVec4_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":393
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_13_ImGuiContext_from_ptr(ImGuiContext *__pyx_v_ptr) {
  struct __pyx_obj_4core__ImGuiContext *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":394
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":395
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _ImGuiContext()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":394
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":397
 *             return None
 * 
 *         instance = _ImGuiContext()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__ImGuiContext)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__ImGuiContext *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":398
 * 
 *         instance = _ImGuiContext()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "core.pyx":399
 *         instance = _ImGuiContext()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":393
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImGuiContext* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._ImGuiContext.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":401
 *         return instance
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13_ImGuiContext_1__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_4core_13_ImGuiContext_1__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_4core__ImGuiContext, 1, "other", 0))) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_13_ImGuiContext___eq__(((struct __pyx_obj_4core__ImGuiContext *)__pyx_v_self), ((struct __pyx_obj_4core__ImGuiContext *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13_ImGuiContext___eq__(struct __pyx_obj_4core__ImGuiContext *__pyx_v_self, struct __pyx_obj_4core__ImGuiContext *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "core.pyx":402
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):
 *         return other._ptr == self._ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_other->_ptr == __pyx_v_self->_ptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":401
 *         return instance
 * 
 *     def __eq__(_ImGuiContext self, _ImGuiContext other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._ImGuiContext.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13_ImGuiContext_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_13_ImGuiContext_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13_ImGuiContext_2__reduce_cython__(((struct __pyx_obj_4core__ImGuiContext *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13_ImGuiContext_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__ImGuiContext *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._ImGuiContext.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13_ImGuiContext_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_13_ImGuiContext_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13_ImGuiContext_4__setstate_cython__(((struct __pyx_obj_4core__ImGuiContext *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13_ImGuiContext_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__ImGuiContext *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._ImGuiContext.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":411
 *     #       see: http://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#fast-instantiation
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_8_DrawCmd_from_ptr(ImDrawCmd *__pyx_v_ptr) {
  struct __pyx_obj_4core__DrawCmd *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":412
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":413
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _DrawCmd()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":412
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":415
 *             return None
 * 
 *         instance = _DrawCmd()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__DrawCmd)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__DrawCmd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":416
 * 
 *         instance = _DrawCmd()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "core.pyx":417
 *         instance = _DrawCmd()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":411
 *     #       see: http://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#fast-instantiation
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._DrawCmd.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":420
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         return <object>self._ptr.TextureId
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8_DrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8_DrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8_DrawCmd_10texture_id___get__(((struct __pyx_obj_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8_DrawCmd_10texture_id___get__(struct __pyx_obj_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":421
 *     @property
 *     def texture_id(self):
 *         return <object>self._ptr.TextureId             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ptr->TextureId));
  __pyx_r = ((PyObject *)__pyx_v_self->_ptr->TextureId);
  goto __pyx_L0;

  /* "core.pyx":420
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         return <object>self._ptr.TextureId
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":424
 * 
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8_DrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8_DrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8_DrawCmd_9clip_rect___get__(((struct __pyx_obj_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8_DrawCmd_9clip_rect___get__(struct __pyx_obj_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":425
 *     @property
 *     def clip_rect(self):
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec4_tuple(__pyx_v_self->_ptr->ClipRect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":424
 * 
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawCmd.clip_rect.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":428
 * 
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ElemCount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8_DrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8_DrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8_DrawCmd_10elem_count___get__(((struct __pyx_obj_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8_DrawCmd_10elem_count___get__(struct __pyx_obj_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":429
 *     @property
 *     def elem_count(self):
 *         return self._ptr.ElemCount             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_ptr->ElemCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":428
 * 
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ElemCount
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawCmd.elem_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8_DrawCmd_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_8_DrawCmd_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8_DrawCmd___reduce_cython__(((struct __pyx_obj_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8_DrawCmd___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawCmd.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8_DrawCmd_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_8_DrawCmd_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8_DrawCmd_2__setstate_cython__(((struct __pyx_obj_4core__DrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8_DrawCmd_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawCmd.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":440
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_9_DrawList_from_ptr(ImDrawList *__pyx_v_ptr) {
  struct __pyx_obj_4core__DrawList *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":441
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":442
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _DrawList()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":441
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":444
 *             return None
 * 
 *         instance = _DrawList()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__DrawList)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__DrawList *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":445
 * 
 *         instance = _DrawList()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "core.pyx":446
 *         instance = _DrawList()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":440
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._DrawList.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":449
 * 
 *     @property
 *     def cmd_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15cmd_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15cmd_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_15cmd_buffer_size___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_15cmd_buffer_size___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":450
 *     @property
 *     def cmd_buffer_size(self):
 *         return self._ptr.CmdBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->CmdBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":449
 * 
 *     @property
 *     def cmd_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.cmd_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":453
 * 
 *     @property
 *     def cmd_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.CmdBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15cmd_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15cmd_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_15cmd_buffer_data___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_15cmd_buffer_data___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":454
 *     @property
 *     def cmd_buffer_data(self):
 *         return <uintptr_t>self._ptr.CmdBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->CmdBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":453
 * 
 *     @property
 *     def cmd_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.CmdBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.cmd_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":457
 * 
 *     @property
 *     def vtx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.VtxBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15vtx_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15vtx_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_15vtx_buffer_size___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_15vtx_buffer_size___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":458
 *     @property
 *     def vtx_buffer_size(self):
 *         return self._ptr.VtxBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->VtxBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":457
 * 
 *     @property
 *     def vtx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.VtxBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.vtx_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":461
 * 
 *     @property
 *     def vtx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.VtxBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15vtx_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15vtx_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_15vtx_buffer_data___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_15vtx_buffer_data___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":462
 *     @property
 *     def vtx_buffer_data(self):
 *         return <uintptr_t>self._ptr.VtxBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->VtxBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":461
 * 
 *     @property
 *     def vtx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.VtxBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.vtx_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":465
 * 
 *     @property
 *     def idx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IdxBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15idx_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15idx_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_15idx_buffer_size___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_15idx_buffer_size___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":466
 *     @property
 *     def idx_buffer_size(self):
 *         return self._ptr.IdxBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->IdxBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":465
 * 
 *     @property
 *     def idx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IdxBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.idx_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":469
 * 
 *     @property
 *     def idx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.IdxBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15idx_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15idx_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_15idx_buffer_data___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_15idx_buffer_data___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":470
 *     @property
 *     def idx_buffer_data(self):
 *         return <uintptr_t>self._ptr.IdxBuffer.Data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->IdxBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":469
 * 
 *     @property
 *     def idx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.IdxBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.idx_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":473
 * 
 * 
 *     def add_line(             # <<<<<<<<<<<<<<
 *             self,
 *             float start_x, float start_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_1add_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_1add_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_start_x;
  float __pyx_v_start_y;
  float __pyx_v_end_x;
  float __pyx_v_end_y;
  ImU32 __pyx_v_col;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_x,&__pyx_n_s_start_y,&__pyx_n_s_end_x,&__pyx_n_s_end_y,&__pyx_n_s_col,&__pyx_n_s_thickness,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 1); __PYX_ERR(0, 473, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 2); __PYX_ERR(0, 473, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 3); __PYX_ERR(0, 473, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, 4); __PYX_ERR(0, 473, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_line") < 0)) __PYX_ERR(0, 473, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_start_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_start_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_start_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_end_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_end_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
    __pyx_v_end_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_end_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 477, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_line", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 473, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_add_line(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_start_x, __pyx_v_start_y, __pyx_v_end_x, __pyx_v_end_y, __pyx_v_col, __pyx_v_thickness);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_add_line(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_start_x, float __pyx_v_start_y, float __pyx_v_end_x, float __pyx_v_end_y, ImU32 __pyx_v_col, float __pyx_v_thickness) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_line", 0);

  /* "core.pyx":511
 *         """
 *         self._ptr.AddLine(
 *             _cast_args_ImVec2(start_x, start_y),             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(end_x, end_y),
 *             col,
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_start_x, __pyx_v_start_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)

  /* "core.pyx":512
 *         self._ptr.AddLine(
 *             _cast_args_ImVec2(start_x, start_y),
 *             _cast_args_ImVec2(end_x, end_y),             # <<<<<<<<<<<<<<
 *             col,
 *             thickness,
 */
  __pyx_t_2 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_end_x, __pyx_v_end_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)

  /* "core.pyx":510
 *             )
 *         """
 *         self._ptr.AddLine(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(start_x, start_y),
 *             _cast_args_ImVec2(end_x, end_y),
 */
  try {
    __pyx_v_self->_ptr->AddLine(__pyx_t_1, __pyx_t_2, __pyx_v_col, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 510, __pyx_L1_error)
  }

  /* "core.pyx":473
 * 
 * 
 *     def add_line(             # <<<<<<<<<<<<<<
 *             self,
 *             float start_x, float start_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.add_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":517
 *         )
 * 
 *     def add_rect(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_3add_rect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_3add_rect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_upper_left_x;
  float __pyx_v_upper_left_y;
  float __pyx_v_lower_right_x;
  float __pyx_v_lower_right_y;
  ImU32 __pyx_v_col;
  float __pyx_v_rounding;
  ImGuiWindowFlags __pyx_v_rounding_corners_flags;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upper_left_x,&__pyx_n_s_upper_left_y,&__pyx_n_s_lower_right_x,&__pyx_n_s_lower_right_y,&__pyx_n_s_col,&__pyx_n_s_rounding,&__pyx_n_s_rounding_corners_flags,&__pyx_n_s_thickness,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 1); __PYX_ERR(0, 517, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 2); __PYX_ERR(0, 517, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 3); __PYX_ERR(0, 517, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, 4); __PYX_ERR(0, 517, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding_corners_flags);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rect") < 0)) __PYX_ERR(0, 517, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_upper_left_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_upper_left_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_upper_left_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_upper_left_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_lower_right_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_lower_right_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L3_error)
    __pyx_v_lower_right_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_lower_right_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_rounding = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_rounding == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L3_error)
    } else {
      __pyx_v_rounding = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_rounding_corners_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[6]); if (unlikely((__pyx_v_rounding_corners_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L3_error)
    } else {
      __pyx_v_rounding_corners_flags = ((ImGuiWindowFlags)0xF);
    }
    if (values[7]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rect", 0, 5, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 517, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_2add_rect(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_upper_left_x, __pyx_v_upper_left_y, __pyx_v_lower_right_x, __pyx_v_lower_right_y, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags, __pyx_v_thickness);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_2add_rect(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags, float __pyx_v_thickness) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_rect", 0);

  /* "core.pyx":561
 *         """
 *         self._ptr.AddRect(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 *             col,
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_upper_left_x, __pyx_v_upper_left_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L1_error)

  /* "core.pyx":562
 *         self._ptr.AddRect(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),             # <<<<<<<<<<<<<<
 *             col,
 *             rounding,
 */
  __pyx_t_2 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_lower_right_x, __pyx_v_lower_right_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L1_error)

  /* "core.pyx":560
 *             )
 *         """
 *         self._ptr.AddRect(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 */
  try {
    __pyx_v_self->_ptr->AddRect(__pyx_t_1, __pyx_t_2, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 560, __pyx_L1_error)
  }

  /* "core.pyx":517
 *         )
 * 
 *     def add_rect(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.add_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":569
 *         )
 * 
 *     def add_rect_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_5add_rect_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_5add_rect_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_upper_left_x;
  float __pyx_v_upper_left_y;
  float __pyx_v_lower_right_x;
  float __pyx_v_lower_right_y;
  ImU32 __pyx_v_col;
  float __pyx_v_rounding;
  ImGuiWindowFlags __pyx_v_rounding_corners_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rect_filled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upper_left_x,&__pyx_n_s_upper_left_y,&__pyx_n_s_lower_right_x,&__pyx_n_s_lower_right_y,&__pyx_n_s_col,&__pyx_n_s_rounding,&__pyx_n_s_rounding_corners_flags,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_left_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 1); __PYX_ERR(0, 569, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 2); __PYX_ERR(0, 569, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_right_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 3); __PYX_ERR(0, 569, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, 4); __PYX_ERR(0, 569, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rounding_corners_flags);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rect_filled") < 0)) __PYX_ERR(0, 569, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_upper_left_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_upper_left_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
    __pyx_v_upper_left_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_upper_left_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
    __pyx_v_lower_right_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_lower_right_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L3_error)
    __pyx_v_lower_right_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_lower_right_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_rounding = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_rounding == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    } else {
      __pyx_v_rounding = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_rounding_corners_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[6]); if (unlikely((__pyx_v_rounding_corners_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L3_error)
    } else {
      __pyx_v_rounding_corners_flags = ((ImGuiWindowFlags)0xF);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rect_filled", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 569, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_rect_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_4add_rect_filled(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_upper_left_x, __pyx_v_upper_left_y, __pyx_v_lower_right_x, __pyx_v_lower_right_y, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_4add_rect_filled(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_upper_left_x, float __pyx_v_upper_left_y, float __pyx_v_lower_right_x, float __pyx_v_lower_right_y, ImU32 __pyx_v_col, float __pyx_v_rounding, ImGuiWindowFlags __pyx_v_rounding_corners_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_rect_filled", 0);

  /* "core.pyx":610
 *         """
 *         self._ptr.AddRectFilled(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 *             col,
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_upper_left_x, __pyx_v_upper_left_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L1_error)

  /* "core.pyx":611
 *         self._ptr.AddRectFilled(
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),             # <<<<<<<<<<<<<<
 *             col,
 *             rounding,
 */
  __pyx_t_2 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_lower_right_x, __pyx_v_lower_right_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L1_error)

  /* "core.pyx":609
 *             )
 *         """
 *         self._ptr.AddRectFilled(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(upper_left_x, upper_left_y),
 *             _cast_args_ImVec2(lower_right_x, lower_right_y),
 */
  try {
    __pyx_v_self->_ptr->AddRectFilled(__pyx_t_1, __pyx_t_2, __pyx_v_col, __pyx_v_rounding, __pyx_v_rounding_corners_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 609, __pyx_L1_error)
  }

  /* "core.pyx":569
 *         )
 * 
 *     def add_rect_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float upper_left_x, float upper_left_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.add_rect_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":617
 *         )
 * 
 *     def add_circle(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_7add_circle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_7add_circle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_centre_x;
  float __pyx_v_centre_y;
  float __pyx_v_radius;
  ImU32 __pyx_v_col;
  int __pyx_v_num_segments;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_circle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centre_x,&__pyx_n_s_centre_y,&__pyx_n_s_radius,&__pyx_n_s_col,&__pyx_n_s_num_segments,&__pyx_n_s_thickness,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, 1); __PYX_ERR(0, 617, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, 2); __PYX_ERR(0, 617, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, 3); __PYX_ERR(0, 617, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_segments);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_circle") < 0)) __PYX_ERR(0, 617, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_centre_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_centre_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_centre_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_centre_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[3]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_num_segments = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_num_segments == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L3_error)
    } else {
      __pyx_v_num_segments = ((int)12);
    }
    if (values[5]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_circle", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 617, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_6add_circle(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_centre_x, __pyx_v_centre_y, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments, __pyx_v_thickness);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_6add_circle(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, int __pyx_v_num_segments, float __pyx_v_thickness) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_circle", 0);

  /* "core.pyx":656
 *         """
 *         self._ptr.AddCircle(
 *             _cast_args_ImVec2(centre_x, centre_y),             # <<<<<<<<<<<<<<
 *             radius,
 *             col,
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_centre_x, __pyx_v_centre_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L1_error)

  /* "core.pyx":655
 *             )
 *         """
 *         self._ptr.AddCircle(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(centre_x, centre_y),
 *             radius,
 */
  try {
    __pyx_v_self->_ptr->AddCircle(__pyx_t_1, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 655, __pyx_L1_error)
  }

  /* "core.pyx":617
 *         )
 * 
 *     def add_circle(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.add_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":663
 *         )
 * 
 *     def add_circle_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_9add_circle_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_9add_circle_filled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_centre_x;
  float __pyx_v_centre_y;
  float __pyx_v_radius;
  ImU32 __pyx_v_col;
  ImU32 __pyx_v_num_segments;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_circle_filled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centre_x,&__pyx_n_s_centre_y,&__pyx_n_s_radius,&__pyx_n_s_col,&__pyx_n_s_num_segments,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centre_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, 1); __PYX_ERR(0, 663, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, 2); __PYX_ERR(0, 663, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, 3); __PYX_ERR(0, 663, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_segments);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_circle_filled") < 0)) __PYX_ERR(0, 663, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_centre_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_centre_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L3_error)
    __pyx_v_centre_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_centre_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[3]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_num_segments = __Pyx_PyInt_As_ImU32(values[4]); if (unlikely((__pyx_v_num_segments == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
    } else {
      __pyx_v_num_segments = ((ImU32)12);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_circle_filled", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 663, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_circle_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_8add_circle_filled(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_centre_x, __pyx_v_centre_y, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_8add_circle_filled(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_centre_x, float __pyx_v_centre_y, float __pyx_v_radius, ImU32 __pyx_v_col, ImU32 __pyx_v_num_segments) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_circle_filled", 0);

  /* "core.pyx":700
 *         """
 *         self._ptr.AddCircleFilled(
 *             _cast_args_ImVec2(centre_x, centre_y),             # <<<<<<<<<<<<<<
 *             radius,
 *             col,
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_centre_x, __pyx_v_centre_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L1_error)

  /* "core.pyx":699
 *             )
 *         """
 *         self._ptr.AddCircleFilled(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(centre_x, centre_y),
 *             radius,
 */
  try {
    __pyx_v_self->_ptr->AddCircleFilled(__pyx_t_1, __pyx_v_radius, __pyx_v_col, __pyx_v_num_segments);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 699, __pyx_L1_error)
  }

  /* "core.pyx":663
 *         )
 * 
 *     def add_circle_filled(             # <<<<<<<<<<<<<<
 *             self,
 *             float centre_x, float centre_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.add_circle_filled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":706
 *         )
 * 
 *     def add_text(             # <<<<<<<<<<<<<<
 *             self,
 *             float pos_x, float pos_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_11add_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_11add_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_pos_x;
  float __pyx_v_pos_y;
  ImU32 __pyx_v_col;
  PyObject *__pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos_x,&__pyx_n_s_pos_y,&__pyx_n_s_col,&__pyx_n_s_text,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, 1); __PYX_ERR(0, 706, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, 2); __PYX_ERR(0, 706, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, 3); __PYX_ERR(0, 706, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_text") < 0)) __PYX_ERR(0, 706, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_pos_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_pos_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 708, __pyx_L3_error)
    __pyx_v_pos_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_pos_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 708, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[2]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
    __pyx_v_text = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_text", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 706, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 710, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_9_DrawList_10add_text(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_pos_x, __pyx_v_pos_y, __pyx_v_col, __pyx_v_text);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_10add_text(struct __pyx_obj_4core__DrawList *__pyx_v_self, float __pyx_v_pos_x, float __pyx_v_pos_y, ImU32 __pyx_v_col, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_text", 0);

  /* "core.pyx":739
 *         """
 *         self._ptr.AddText(
 *             _cast_args_ImVec2(pos_x, pos_y),             # <<<<<<<<<<<<<<
 *             col,
 *             _bytes(text),
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_pos_x, __pyx_v_pos_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L1_error)

  /* "core.pyx":741
 *             _cast_args_ImVec2(pos_x, pos_y),
 *             col,
 *             _bytes(text),             # <<<<<<<<<<<<<<
 *             NULL
 *         )
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 741, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 741, __pyx_L1_error)

  /* "core.pyx":738
 *             )
 *         """
 *         self._ptr.AddText(             # <<<<<<<<<<<<<<
 *             _cast_args_ImVec2(pos_x, pos_y),
 *             col,
 */
  try {
    __pyx_v_self->_ptr->AddText(__pyx_t_1, __pyx_v_col, __pyx_t_3, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 738, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":706
 *         )
 * 
 *     def add_text(             # <<<<<<<<<<<<<<
 *             self,
 *             float pos_x, float pos_y,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._DrawList.add_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":745
 *         )
 * 
 *     def add_image(self,             # <<<<<<<<<<<<<<
 *         texture_id,
 *         tuple a,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_13add_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_13add_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_uv_a = 0;
  PyObject *__pyx_v_uv_b = 0;
  ImU32 __pyx_v_col;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_uv_a,&__pyx_n_s_uv_b,&__pyx_n_s_col,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "core.pyx":749
 *         tuple a,
 *         tuple b,
 *         tuple uv_a=(0,0),             # <<<<<<<<<<<<<<
 *         tuple uv_b=(1,1),
 *         cimgui.ImU32 col=0xffffffff):
 */
    values[3] = ((PyObject*)__pyx_tuple__8);

    /* "core.pyx":750
 *         tuple b,
 *         tuple uv_a=(0,0),
 *         tuple uv_b=(1,1),             # <<<<<<<<<<<<<<
 *         cimgui.ImU32 col=0xffffffff):
 *         """Add image to the draw list. Aspect ratio is not preserved.
 */
    values[4] = ((PyObject*)__pyx_tuple__9);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_image", 0, 3, 6, 1); __PYX_ERR(0, 745, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_image", 0, 3, 6, 2); __PYX_ERR(0, 745, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_a);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_b);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_image") < 0)) __PYX_ERR(0, 745, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_a = ((PyObject*)values[1]);
    __pyx_v_b = ((PyObject*)values[2]);
    __pyx_v_uv_a = ((PyObject*)values[3]);
    __pyx_v_uv_b = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_col = __Pyx_PyInt_As_ImU32(values[5]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L3_error)
    } else {
      __pyx_v_col = ((ImU32)0xffffffff);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_image", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 745, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyTuple_Type), 1, "a", 1))) __PYX_ERR(0, 747, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyTuple_Type), 1, "b", 1))) __PYX_ERR(0, 748, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv_a), (&PyTuple_Type), 1, "uv_a", 1))) __PYX_ERR(0, 749, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv_b), (&PyTuple_Type), 1, "uv_b", 1))) __PYX_ERR(0, 750, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_9_DrawList_12add_image(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_texture_id, __pyx_v_a, __pyx_v_b, __pyx_v_uv_a, __pyx_v_uv_b, __pyx_v_col);

  /* "core.pyx":745
 *         )
 * 
 *     def add_image(self,             # <<<<<<<<<<<<<<
 *         texture_id,
 *         tuple a,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_12add_image(struct __pyx_obj_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_texture_id, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_uv_a, PyObject *__pyx_v_uv_b, ImU32 __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  ImVec2 __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_image", 0);

  /* "core.pyx":785
 *         self._ptr.AddImage(
 *             <void*>texture_id,
 *             _cast_tuple_ImVec2(a),             # <<<<<<<<<<<<<<
 *             _cast_tuple_ImVec2(b),
 *             _cast_tuple_ImVec2(uv_a),
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L1_error)

  /* "core.pyx":786
 *             <void*>texture_id,
 *             _cast_tuple_ImVec2(a),
 *             _cast_tuple_ImVec2(b),             # <<<<<<<<<<<<<<
 *             _cast_tuple_ImVec2(uv_a),
 *             _cast_tuple_ImVec2(uv_b),
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)

  /* "core.pyx":787
 *             _cast_tuple_ImVec2(a),
 *             _cast_tuple_ImVec2(b),
 *             _cast_tuple_ImVec2(uv_a),             # <<<<<<<<<<<<<<
 *             _cast_tuple_ImVec2(uv_b),
 *             col
 */
  __pyx_t_3 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_uv_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L1_error)

  /* "core.pyx":788
 *             _cast_tuple_ImVec2(b),
 *             _cast_tuple_ImVec2(uv_a),
 *             _cast_tuple_ImVec2(uv_b),             # <<<<<<<<<<<<<<
 *             col
 *         )
 */
  __pyx_t_4 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_uv_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 788, __pyx_L1_error)

  /* "core.pyx":783
 *             )
 *         """
 *         self._ptr.AddImage(             # <<<<<<<<<<<<<<
 *             <void*>texture_id,
 *             _cast_tuple_ImVec2(a),
 */
  try {
    __pyx_v_self->_ptr->AddImage(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_v_col);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 783, __pyx_L1_error)
  }

  /* "core.pyx":745
 *         )
 * 
 *     def add_image(self,             # <<<<<<<<<<<<<<
 *         texture_id,
 *         tuple a,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.add_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":792
 *         )
 * 
 *     def add_polyline(             # <<<<<<<<<<<<<<
 *             self,
 *             list points,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_15add_polyline(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_15add_polyline(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  ImU32 __pyx_v_col;
  bool __pyx_v_closed;
  float __pyx_v_thickness;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_polyline (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_col,&__pyx_n_s_closed,&__pyx_n_s_thickness,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_polyline", 0, 2, 4, 1); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thickness);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_polyline") < 0)) __PYX_ERR(0, 792, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = ((PyObject*)values[0]);
    __pyx_v_col = __Pyx_PyInt_As_ImU32(values[1]); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_closed = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_closed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L3_error)
    } else {

      /* "core.pyx":796
 *             list points,
 *             cimgui.ImU32 col,
 *             bool closed=False,             # <<<<<<<<<<<<<<
 *             float thickness=1.0
 *         ):
 */
      __pyx_v_closed = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_thickness = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_thickness == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 797, __pyx_L3_error)
    } else {
      __pyx_v_thickness = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_polyline", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 792, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.add_polyline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), (&PyList_Type), 1, "points", 1))) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_9_DrawList_14add_polyline(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), __pyx_v_points, __pyx_v_col, __pyx_v_closed, __pyx_v_thickness);

  /* "core.pyx":792
 *         )
 * 
 *     def add_polyline(             # <<<<<<<<<<<<<<
 *             self,
 *             list points,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_14add_polyline(struct __pyx_obj_4core__DrawList *__pyx_v_self, PyObject *__pyx_v_points, ImU32 __pyx_v_col, bool __pyx_v_closed, float __pyx_v_thickness) {
  PyObject *__pyx_v_num_points = NULL;
  ImVec2 *__pyx_v_pts;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  float __pyx_t_7;
  float __pyx_t_8;
  ImVec2 __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_polyline", 0);

  /* "core.pyx":827
 *             )
 *         """
 *         num_points = len(points)             # <<<<<<<<<<<<<<
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 */
  if (unlikely(__pyx_v_points == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 827, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 827, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_num_points = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "core.pyx":829
 *         num_points = len(points)
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))             # <<<<<<<<<<<<<<
 *         for i in range(num_points):
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(ImVec2))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_num_points, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pts = ((ImVec2 *)malloc(__pyx_t_4));

  /* "core.pyx":830
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 *         self._ptr.AddPolyline(
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_num_points); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 830, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 830, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 830, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 830, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "core.pyx":831
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 *         for i in range(num_points):
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])             # <<<<<<<<<<<<<<
 *         self._ptr.AddPolyline(
 *             pts,
 */
    if (unlikely(__pyx_v_points == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 831, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v_points == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 831, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_7, __pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L1_error)
    (__pyx_v_pts[__pyx_t_10]) = __pyx_t_9;

    /* "core.pyx":830
 *         cdef cimgui.ImVec2 *pts
 *         pts = <cimgui.ImVec2 *>malloc(num_points * cython.sizeof(cimgui.ImVec2))
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 *         self._ptr.AddPolyline(
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":834
 *         self._ptr.AddPolyline(
 *             pts,
 *             num_points,             # <<<<<<<<<<<<<<
 *             col,
 *             closed,
 */
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_num_points); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)

  /* "core.pyx":832
 *         for i in range(num_points):
 *             pts[i] = _cast_args_ImVec2(points[i][0], points[i][1])
 *         self._ptr.AddPolyline(             # <<<<<<<<<<<<<<
 *             pts,
 *             num_points,
 */
  try {
    __pyx_v_self->_ptr->AddPolyline(__pyx_v_pts, __pyx_t_11, __pyx_v_col, __pyx_v_closed, __pyx_v_thickness);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 832, __pyx_L1_error)
  }

  /* "core.pyx":839
 *             thickness
 *         )
 *         free(pts)             # <<<<<<<<<<<<<<
 * 
 *     # channels
 */
  free(__pyx_v_pts);

  /* "core.pyx":792
 *         )
 * 
 *     def add_polyline(             # <<<<<<<<<<<<<<
 *             self,
 *             list points,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core._DrawList.add_polyline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_num_points);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":843
 *     # channels
 * 
 *     def channels_split(self, int channels_count):             # <<<<<<<<<<<<<<
 *         """
 *         Warning - be careful with using channels as "layers".
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_17channels_split(PyObject *__pyx_v_self, PyObject *__pyx_arg_channels_count); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_17channels_split(PyObject *__pyx_v_self, PyObject *__pyx_arg_channels_count) {
  int __pyx_v_channels_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("channels_split (wrapper)", 0);
  assert(__pyx_arg_channels_count); {
    __pyx_v_channels_count = __Pyx_PyInt_As_int(__pyx_arg_channels_count); if (unlikely((__pyx_v_channels_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.channels_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_16channels_split(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), ((int)__pyx_v_channels_count));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_16channels_split(struct __pyx_obj_4core__DrawList *__pyx_v_self, int __pyx_v_channels_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channels_split", 0);

  /* "core.pyx":851
 *         """
 *         # TODO: document
 *         self._ptr.ChannelsSplit(channels_count)             # <<<<<<<<<<<<<<
 * 
 *     def channels_set_current(self, int idx):
 */
  try {
    __pyx_v_self->_ptr->ChannelsSplit(__pyx_v_channels_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 851, __pyx_L1_error)
  }

  /* "core.pyx":843
 *     # channels
 * 
 *     def channels_split(self, int channels_count):             # <<<<<<<<<<<<<<
 *         """
 *         Warning - be careful with using channels as "layers".
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.channels_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":853
 *         self._ptr.ChannelsSplit(channels_count)
 * 
 *     def channels_set_current(self, int idx):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsSetCurrent(idx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_19channels_set_current(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_19channels_set_current(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("channels_set_current (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_int(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawList.channels_set_current", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawList_18channels_set_current(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), ((int)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_18channels_set_current(struct __pyx_obj_4core__DrawList *__pyx_v_self, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channels_set_current", 0);

  /* "core.pyx":855
 *     def channels_set_current(self, int idx):
 *         # TODO: document
 *         self._ptr.ChannelsSetCurrent(idx)             # <<<<<<<<<<<<<<
 * 
 *     def channels_merge(self):
 */
  try {
    __pyx_v_self->_ptr->ChannelsSetCurrent(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 855, __pyx_L1_error)
  }

  /* "core.pyx":853
 *         self._ptr.ChannelsSplit(channels_count)
 * 
 *     def channels_set_current(self, int idx):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsSetCurrent(idx)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.channels_set_current", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":857
 *         self._ptr.ChannelsSetCurrent(idx)
 * 
 *     def channels_merge(self):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsMerge()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_21channels_merge(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_21channels_merge(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("channels_merge (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_20channels_merge(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_20channels_merge(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channels_merge", 0);

  /* "core.pyx":859
 *     def channels_merge(self):
 *         # TODO: document
 *         self._ptr.ChannelsMerge()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->_ptr->ChannelsMerge();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 859, __pyx_L1_error)
  }

  /* "core.pyx":857
 *         self._ptr.ChannelsSetCurrent(idx)
 * 
 *     def channels_merge(self):             # <<<<<<<<<<<<<<
 *         # TODO: document
 *         self._ptr.ChannelsMerge()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._DrawList.channels_merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":862
 * 
 *     @property
 *     def commands(self):             # <<<<<<<<<<<<<<
 *         return [
 *             # todo: consider operator overloading in pxd file
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_8commands_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_8commands_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_8commands___get__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_8commands___get__(struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":863
 *     @property
 *     def commands(self):
 *         return [             # <<<<<<<<<<<<<<
 *             # todo: consider operator overloading in pxd file
 *             _DrawCmd.from_ptr(&self._ptr.CmdBuffer.Data[idx])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":868
 *             # perf: short-wiring instead of using property
 *             # note: add py3k compat
 *             for idx in xrange(self._ptr.CmdBuffer.Size)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_2 = __pyx_v_self->_ptr->CmdBuffer.Size;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "core.pyx":865
 *         return [
 *             # todo: consider operator overloading in pxd file
 *             _DrawCmd.from_ptr(&self._ptr.CmdBuffer.Data[idx])             # <<<<<<<<<<<<<<
 *             # perf: short-wiring instead of using property
 *             # note: add py3k compat
 */
    __pyx_t_5 = __pyx_f_4core_8_DrawCmd_from_ptr((&(__pyx_v_self->_ptr->CmdBuffer.Data[__pyx_v_idx]))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":862
 * 
 *     @property
 *     def commands(self):             # <<<<<<<<<<<<<<
 *         return [
 *             # todo: consider operator overloading in pxd file
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core._DrawList.commands.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_22__reduce_cython__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawList_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawList_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawList_24__setstate_cython__(((struct __pyx_obj_4core__DrawList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawList_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":875
 *     cdef GuiStyle _style
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._style = None
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_7_Colors_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_7_Colors_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_7_Colors___cinit__(((struct __pyx_obj_4core__Colors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7_Colors___cinit__(struct __pyx_obj_4core__Colors *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "core.pyx":876
 * 
 *     def __cinit__(self):
 *         self._style = None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, GuiStyle gui_style):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_style);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_style));
  __pyx_v_self->_style = ((struct __pyx_obj_4core_GuiStyle *)Py_None);

  /* "core.pyx":875
 *     cdef GuiStyle _style
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._style = None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":878
 *         self._style = None
 * 
 *     def __init__(self, GuiStyle gui_style):             # <<<<<<<<<<<<<<
 *         self._style = gui_style
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_7_Colors_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_7_Colors_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_GuiStyle *__pyx_v_gui_style = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gui_style,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gui_style)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 878, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_gui_style = ((struct __pyx_obj_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 878, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._Colors.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gui_style), __pyx_ptype_4core_GuiStyle, 1, "gui_style", 0))) __PYX_ERR(0, 878, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_7_Colors_2__init__(((struct __pyx_obj_4core__Colors *)__pyx_v_self), __pyx_v_gui_style);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7_Colors_2__init__(struct __pyx_obj_4core__Colors *__pyx_v_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_gui_style) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":879
 * 
 *     def __init__(self, GuiStyle gui_style):
 *         self._style = gui_style             # <<<<<<<<<<<<<<
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_gui_style));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_gui_style));
  __Pyx_GOTREF(__pyx_v_self->_style);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_style));
  __pyx_v_self->_style = __pyx_v_gui_style;

  /* "core.pyx":878
 *         self._style = None
 * 
 *     def __init__(self, GuiStyle gui_style):             # <<<<<<<<<<<<<<
 *         self._style = gui_style
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":881
 *         self._style = gui_style
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

static CYTHON_INLINE PyObject *__pyx_f_4core_7_Colors__check_color(CYTHON_UNUSED struct __pyx_obj_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_color", 0);

  /* "core.pyx":882
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiCol_COUNT);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "core.pyx":883
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_ImGuiCol(__pyx_v_variable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 883, __pyx_L1_error)

    /* "core.pyx":882
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  }

  /* "core.pyx":881
 *         self._style = gui_style
 * 
 *     cdef inline _check_color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core._Colors._check_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":885
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7_Colors_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable); /*proto*/
static PyObject *__pyx_pw_4core_7_Colors_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable) {
  ImGuiCol __pyx_v_variable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_variable); {
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_variable); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 885, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._Colors.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7_Colors_4__getitem__(((struct __pyx_obj_4core__Colors *)__pyx_v_self), ((ImGuiCol)__pyx_v_variable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7_Colors_4__getitem__(struct __pyx_obj_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable) {
  int __pyx_v_ix;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "core.pyx":886
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):
 *         self._check_color(variable)             # <<<<<<<<<<<<<<
 *         self._style._check_ptr()
 *         cdef int ix = variable
 */
  __pyx_t_1 = __pyx_f_4core_7_Colors__check_color(__pyx_v_self, __pyx_v_variable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":887
 *     def __getitem__(self, cimgui.ImGuiCol variable):
 *         self._check_color(variable)
 *         self._style._check_ptr()             # <<<<<<<<<<<<<<
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self->_style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":888
 *         self._check_color(variable)
 *         self._style._check_ptr()
 *         cdef int ix = variable             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 * 
 */
  __pyx_v_ix = __pyx_v_variable;

  /* "core.pyx":889
 *         self._style._check_ptr()
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec4_tuple((__pyx_v_self->_style->_ptr->Colors[__pyx_v_ix])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":885
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 *     def __getitem__(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._Colors.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":891
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

/* Python wrapper */
static int __pyx_pw_4core_7_Colors_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7_Colors_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable, PyObject *__pyx_v_value) {
  ImGuiCol __pyx_v_variable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_variable); {
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_variable); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._Colors.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7_Colors_6__setitem__(((struct __pyx_obj_4core__Colors *)__pyx_v_self), ((ImGuiCol)__pyx_v_variable), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7_Colors_6__setitem__(struct __pyx_obj_4core__Colors *__pyx_v_self, ImGuiCol __pyx_v_variable, PyObject *__pyx_v_value) {
  int __pyx_v_ix;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "core.pyx":892
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):
 *         self._check_color(variable)             # <<<<<<<<<<<<<<
 *         self._style._check_ptr()
 *         cdef int ix = variable
 */
  __pyx_t_1 = __pyx_f_4core_7_Colors__check_color(__pyx_v_self, __pyx_v_variable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":893
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):
 *         self._check_color(variable)
 *         self._style._check_ptr()             # <<<<<<<<<<<<<<
 *         cdef int ix = variable
 *         self._style._ptr.Colors[ix] = _cast_tuple_ImVec4(value)
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self->_style); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":894
 *         self._check_color(variable)
 *         self._style._check_ptr()
 *         cdef int ix = variable             # <<<<<<<<<<<<<<
 *         self._style._ptr.Colors[ix] = _cast_tuple_ImVec4(value)
 * 
 */
  __pyx_v_ix = __pyx_v_variable;

  /* "core.pyx":895
 *         self._style._check_ptr()
 *         cdef int ix = variable
 *         self._style._ptr.Colors[ix] = _cast_tuple_ImVec4(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_self->_style->_ptr->Colors[__pyx_v_ix]) = __pyx_f_4core__cast_tuple_ImVec4(__pyx_v_value);

  /* "core.pyx":891
 *         return _cast_ImVec4_tuple(self._style._ptr.Colors[ix])
 * 
 *     def __setitem__(self, cimgui.ImGuiCol variable, value):             # <<<<<<<<<<<<<<
 *         self._check_color(variable)
 *         self._style._check_ptr()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._Colors.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7_Colors_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_7_Colors_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7_Colors_8__reduce_cython__(((struct __pyx_obj_4core__Colors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7_Colors_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Colors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._Colors.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7_Colors_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_7_Colors_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7_Colors_10__setstate_cython__(((struct __pyx_obj_4core__Colors *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7_Colors_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Colors *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._Colors.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":907
 *     cdef _Colors _colors
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = NULL
 *         self._owner = False
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_8GuiStyle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_8GuiStyle___cinit__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle___cinit__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "core.pyx":908
 * 
 *     def __cinit__(self):
 *         self._ptr = NULL             # <<<<<<<<<<<<<<
 *         self._owner = False
 *         self._colors = None
 */
  __pyx_v_self->_ptr = NULL;

  /* "core.pyx":909
 *     def __cinit__(self):
 *         self._ptr = NULL
 *         self._owner = False             # <<<<<<<<<<<<<<
 *         self._colors = None
 * 
 */
  __pyx_v_self->_owner = 0;

  /* "core.pyx":910
 *         self._ptr = NULL
 *         self._owner = False
 *         self._colors = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_colors);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_colors));
  __pyx_v_self->_colors = ((struct __pyx_obj_4core__Colors *)Py_None);

  /* "core.pyx":907
 *     cdef _Colors _colors
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = NULL
 *         self._owner = False
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":912
 *         self._colors = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._owner:
 *             del self._ptr
 */

/* Python wrapper */
static void __pyx_pw_4core_8GuiStyle_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4core_8GuiStyle_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4core_8GuiStyle_2__dealloc__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4core_8GuiStyle_2__dealloc__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "core.pyx":913
 * 
 *     def __dealloc__(self):
 *         if self._owner:             # <<<<<<<<<<<<<<
 *             del self._ptr
 *             self._ptr = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_owner != 0);
  if (__pyx_t_1) {

    /* "core.pyx":914
 *     def __dealloc__(self):
 *         if self._owner:
 *             del self._ptr             # <<<<<<<<<<<<<<
 *             self._ptr = NULL
 * 
 */
    delete __pyx_v_self->_ptr;

    /* "core.pyx":915
 *         if self._owner:
 *             del self._ptr
 *             self._ptr = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->_ptr = NULL;

    /* "core.pyx":913
 * 
 *     def __dealloc__(self):
 *         if self._owner:             # <<<<<<<<<<<<<<
 *             del self._ptr
 *             self._ptr = NULL
 */
  }

  /* "core.pyx":912
 *         self._colors = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._owner:
 *             del self._ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "core.pyx":918
 * 
 * 
 *     cdef inline _check_ptr(self):             # <<<<<<<<<<<<<<
 *         if self._ptr is NULL:
 *             raise RuntimeError(
 */

static CYTHON_INLINE PyObject *__pyx_f_4core_8GuiStyle__check_ptr(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_ptr", 0);

  /* "core.pyx":919
 * 
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "Improperly initialized, use imgui.get_style() or "
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "core.pyx":920
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "Improperly initialized, use imgui.get_style() or "
 *                 "GuiStyle.created() to obtain style classes"
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 920, __pyx_L1_error)

    /* "core.pyx":919
 * 
 *     cdef inline _check_ptr(self):
 *         if self._ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "Improperly initialized, use imgui.get_style() or "
 */
  }

  /* "core.pyx":918
 * 
 * 
 *     cdef inline _check_ptr(self):             # <<<<<<<<<<<<<<
 *         if self._ptr is NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.GuiStyle._check_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":925
 *             )
 * 
 *     def __eq__(GuiStyle self, GuiStyle other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_4core_GuiStyle, 1, "other", 0))) __PYX_ERR(0, 925, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_8GuiStyle_4__eq__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((struct __pyx_obj_4core_GuiStyle *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_4__eq__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "core.pyx":926
 * 
 *     def __eq__(GuiStyle self, GuiStyle other):
 *         return other._ptr == self._ptr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_other->_ptr == __pyx_v_self->_ptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":925
 *             )
 * 
 *     def __eq__(GuiStyle self, GuiStyle other):             # <<<<<<<<<<<<<<
 *         return other._ptr == self._ptr
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":929
 * 
 *     @staticmethod
 *     def create():             # <<<<<<<<<<<<<<
 *         return GuiStyle._create()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_7create(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_8GuiStyle_7create = {"create", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_8GuiStyle_7create, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_8GuiStyle_7create(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("create", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create", 0))) return NULL;
  __pyx_r = __pyx_pf_4core_8GuiStyle_6create();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_6create(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "core.pyx":930
 *     @staticmethod
 *     def create():
 *         return GuiStyle._create()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4core_8GuiStyle__create()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":929
 * 
 *     @staticmethod
 *     def create():             # <<<<<<<<<<<<<<
 *         return GuiStyle._create()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":933
 * 
 *     @staticmethod
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):             # <<<<<<<<<<<<<<
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref
 */

static struct __pyx_obj_4core_GuiStyle *__pyx_f_4core_8GuiStyle_from_ref(ImGuiStyle &__pyx_v_ref) {
  struct __pyx_obj_4core_GuiStyle *__pyx_v_instance = 0;
  struct __pyx_obj_4core_GuiStyle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ref", 0);

  /* "core.pyx":934
 *     @staticmethod
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):
 *         cdef GuiStyle instance = GuiStyle()             # <<<<<<<<<<<<<<
 *         instance._ptr = &ref
 *         instance._colors = _Colors(instance)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core_GuiStyle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_4core_GuiStyle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":935
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref             # <<<<<<<<<<<<<<
 *         instance._colors = _Colors(instance)
 *         return instance
 */
  __pyx_v_instance->_ptr = (&__pyx_v_ref);

  /* "core.pyx":936
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref
 *         instance._colors = _Colors(instance)             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4core__Colors), ((PyObject *)__pyx_v_instance)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_instance->_colors);
  __Pyx_DECREF(((PyObject *)__pyx_v_instance->_colors));
  __pyx_v_instance->_colors = ((struct __pyx_obj_4core__Colors *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":937
 *         instance._ptr = &ref
 *         instance._colors = _Colors(instance)
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = __pyx_v_instance;
  goto __pyx_L0;

  /* "core.pyx":933
 * 
 *     @staticmethod
 *     cdef GuiStyle from_ref(cimgui.ImGuiStyle& ref):             # <<<<<<<<<<<<<<
 *         cdef GuiStyle instance = GuiStyle()
 *         instance._ptr = &ref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.from_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":940
 * 
 *     @staticmethod
 *     cdef GuiStyle _create():             # <<<<<<<<<<<<<<
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 */

static struct __pyx_obj_4core_GuiStyle *__pyx_f_4core_8GuiStyle__create(void) {
  ImGuiStyle *__pyx_v__ptr;
  struct __pyx_obj_4core_GuiStyle *__pyx_v_instance = 0;
  struct __pyx_obj_4core_GuiStyle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiStyle *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_create", 0);

  /* "core.pyx":941
 *     @staticmethod
 *     cdef GuiStyle _create():
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()             # <<<<<<<<<<<<<<
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 *         instance._owner = True
 */
  try {
    __pyx_t_1 = new ImGuiStyle();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 941, __pyx_L1_error)
  }
  __pyx_v__ptr = __pyx_t_1;

  /* "core.pyx":942
 *     cdef GuiStyle _create():
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))             # <<<<<<<<<<<<<<
 *         instance._owner = True
 *         instance._colors = _Colors(instance)
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_4core_8GuiStyle_from_ref((*__pyx_v__ptr))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core_GuiStyle *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":943
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 *         instance._owner = True             # <<<<<<<<<<<<<<
 *         instance._colors = _Colors(instance)
 *         return instance
 */
  __pyx_v_instance->_owner = 1;

  /* "core.pyx":944
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 *         instance._owner = True
 *         instance._colors = _Colors(instance)             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4core__Colors), ((PyObject *)__pyx_v_instance)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_instance->_colors);
  __Pyx_DECREF(((PyObject *)__pyx_v_instance->_colors));
  __pyx_v_instance->_colors = ((struct __pyx_obj_4core__Colors *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":945
 *         instance._owner = True
 *         instance._colors = _Colors(instance)
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = __pyx_v_instance;
  goto __pyx_L0;

  /* "core.pyx":940
 * 
 *     @staticmethod
 *     cdef GuiStyle _create():             # <<<<<<<<<<<<<<
 *         cdef cimgui.ImGuiStyle* _ptr = new cimgui.ImGuiStyle()
 *         cdef GuiStyle instance = GuiStyle.from_ref(deref(_ptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.GuiStyle._create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":948
 * 
 *     @property
 *     def alpha(self):             # <<<<<<<<<<<<<<
 *         """Global alpha blending parameter for windows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_5alpha___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_5alpha___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":954
 *             float
 *         """
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.Alpha
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":955
 *         """
 *         self._check_ptr()
 *         return self._ptr.Alpha             # <<<<<<<<<<<<<<
 * 
 *     @alpha.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->Alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":948
 * 
 *     @property
 *     def alpha(self):             # <<<<<<<<<<<<<<
 *         """Global alpha blending parameter for windows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":958
 * 
 *     @alpha.setter
 *     def alpha(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.Alpha = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.alpha.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_5alpha_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_5alpha_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":959
 *     @alpha.setter
 *     def alpha(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.Alpha = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":960
 *     def alpha(self, float value):
 *         self._check_ptr()
 *         self._ptr.Alpha = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->Alpha = __pyx_v_value;

  /* "core.pyx":958
 * 
 *     @alpha.setter
 *     def alpha(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.Alpha = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.alpha.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":963
 * 
 *     @property
 *     def window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_14window_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_14window_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14window_padding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_14window_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":964
 *     @property
 *     def window_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":965
 *     def window_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)             # <<<<<<<<<<<<<<
 * 
 *     @window_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->WindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":963
 * 
 *     @property
 *     def window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":968
 * 
 *     @window_padding.setter
 *     def window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_14window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_14window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14window_padding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_14window_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":969
 *     @window_padding.setter
 *     def window_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":970
 *     def window_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
  __pyx_v_self->_ptr->WindowPadding = __pyx_t_2;

  /* "core.pyx":968
 * 
 *     @window_padding.setter
 *     def window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":973
 * 
 *     @property
 *     def window_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_15window_min_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_15window_min_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_15window_min_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_15window_min_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":974
 *     @property
 *     def window_min_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":975
 *     def window_min_size(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)             # <<<<<<<<<<<<<<
 * 
 *     @window_min_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->WindowMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":973
 * 
 *     @property
 *     def window_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowMinSize)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_min_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":978
 * 
 *     @window_min_size.setter
 *     def window_min_size(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_15window_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_15window_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_15window_min_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_15window_min_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":979
 *     @window_min_size.setter
 *     def window_min_size(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":980
 *     def window_min_size(self, value):
 *         self._check_ptr()
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_v_self->_ptr->WindowMinSize = __pyx_t_2;

  /* "core.pyx":978
 * 
 *     @window_min_size.setter
 *     def window_min_size(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowMinSize = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":983
 * 
 *     @property
 *     def window_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_15window_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_15window_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_15window_rounding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_15window_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":984
 *     @property
 *     def window_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.WindowRounding
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":985
 *     def window_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.WindowRounding             # <<<<<<<<<<<<<<
 * 
 *     @window_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->WindowRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":983
 * 
 *     @property
 *     def window_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":988
 * 
 *     @window_rounding.setter
 *     def window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowRounding = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_15window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_15window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.window_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_15window_rounding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_15window_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":989
 *     @window_rounding.setter
 *     def window_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":990
 *     def window_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.WindowRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->WindowRounding = __pyx_v_value;

  /* "core.pyx":988
 * 
 *     @window_rounding.setter
 *     def window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":993
 * 
 *     @property
 *     def window_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_18window_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_18window_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18window_border_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_18window_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":994
 *     @property
 *     def window_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.WindowBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":995
 *     def window_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.WindowBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @window_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->WindowBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":993
 * 
 *     @property
 *     def window_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.WindowBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":998
 * 
 *     @window_border_size.setter
 *     def window_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_18window_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_18window_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 998, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.window_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_18window_border_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_18window_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":999
 *     @window_border_size.setter
 *     def window_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1000
 *     def window_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.WindowBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->WindowBorderSize = __pyx_v_value;

  /* "core.pyx":998
 * 
 *     @window_border_size.setter
 *     def window_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1003
 * 
 *     @property
 *     def child_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_14child_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_14child_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14child_rounding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_14child_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1004
 *     @property
 *     def child_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ChildRounding
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1005
 *     def child_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.ChildRounding             # <<<<<<<<<<<<<<
 * 
 *     @child_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ChildRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1003
 * 
 *     @property
 *     def child_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.child_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1008
 * 
 *     @child_rounding.setter
 *     def child_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildRounding = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_14child_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_14child_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.child_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_14child_rounding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_14child_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1009
 *     @child_rounding.setter
 *     def child_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ChildRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1010
 *     def child_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.ChildRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ChildRounding = __pyx_v_value;

  /* "core.pyx":1008
 * 
 *     @child_rounding.setter
 *     def child_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.child_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1013
 * 
 *     @property
 *     def child_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_17child_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_17child_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_17child_border_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_17child_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1014
 *     @property
 *     def child_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ChildBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1015
 *     def child_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.ChildBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @child_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ChildBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1013
 * 
 *     @property
 *     def child_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ChildBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.child_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1018
 * 
 *     @child_border_size.setter
 *     def child_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_17child_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_17child_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.child_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_17child_border_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_17child_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1019
 *     @child_border_size.setter
 *     def child_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ChildBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1020
 *     def child_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ChildBorderSize = __pyx_v_value;

  /* "core.pyx":1018
 * 
 *     @child_border_size.setter
 *     def child_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.child_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1023
 * 
 *     @property
 *     def popup_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_14popup_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_14popup_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14popup_rounding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_14popup_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1024
 *     @property
 *     def popup_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.PopupRounding
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1025
 *     def popup_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.PopupRounding             # <<<<<<<<<<<<<<
 * 
 *     @popup_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->PopupRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1023
 * 
 *     @property
 *     def popup_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.popup_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1028
 * 
 *     @popup_rounding.setter
 *     def popup_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.PopupRounding = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_14popup_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_14popup_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1028, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.popup_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_14popup_rounding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_14popup_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1029
 *     @popup_rounding.setter
 *     def popup_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.PopupRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1030
 *     def popup_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.PopupRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->PopupRounding = __pyx_v_value;

  /* "core.pyx":1028
 * 
 *     @popup_rounding.setter
 *     def popup_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.PopupRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.popup_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1033
 * 
 *     @property
 *     def popup_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_17popup_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_17popup_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_17popup_border_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_17popup_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1034
 *     @property
 *     def popup_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.PopupBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1035
 *     def popup_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.PopupBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @popup_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->PopupBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1033
 * 
 *     @property
 *     def popup_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.PopupBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.popup_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1038
 * 
 *     @popup_border_size.setter
 *     def popup_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_17popup_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_17popup_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1038, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.popup_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_17popup_border_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_17popup_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1039
 *     @popup_border_size.setter
 *     def popup_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ChildBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1040
 *     def popup_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ChildBorderSize = __pyx_v_value;

  /* "core.pyx":1038
 * 
 *     @popup_border_size.setter
 *     def popup_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ChildBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.popup_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1043
 * 
 *     @property
 *     def window_title_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_18window_title_align_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_18window_title_align_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18window_title_align___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_18window_title_align___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1044
 *     @property
 *     def window_title_align(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1045
 *     def window_title_align(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)             # <<<<<<<<<<<<<<
 * 
 *     @window_title_align.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->WindowTitleAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1043
 * 
 *     @property
 *     def window_title_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.WindowTitleAlign)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_title_align.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1048
 * 
 *     @window_title_align.setter
 *     def window_title_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_18window_title_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_18window_title_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18window_title_align_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_18window_title_align_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1049
 *     @window_title_align.setter
 *     def window_title_align(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1050
 *     def window_title_align(self, value):
 *         self._check_ptr()
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L1_error)
  __pyx_v_self->_ptr->WindowTitleAlign = __pyx_t_2;

  /* "core.pyx":1048
 * 
 *     @window_title_align.setter
 *     def window_title_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.WindowTitleAlign = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.window_title_align.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1053
 * 
 *     @property
 *     def frame_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_13frame_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_13frame_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_13frame_padding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_13frame_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1054
 *     @property
 *     def frame_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1055
 *     def frame_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)             # <<<<<<<<<<<<<<
 * 
 *     @frame_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->FramePadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1053
 * 
 *     @property
 *     def frame_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.FramePadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.frame_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1058
 * 
 *     @frame_padding.setter
 *     def frame_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_13frame_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_13frame_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_13frame_padding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_13frame_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1059
 *     @frame_padding.setter
 *     def frame_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1060
 *     def frame_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L1_error)
  __pyx_v_self->_ptr->FramePadding = __pyx_t_2;

  /* "core.pyx":1058
 * 
 *     @frame_padding.setter
 *     def frame_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FramePadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.frame_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1063
 * 
 *     @property
 *     def frame_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_14frame_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_14frame_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14frame_rounding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_14frame_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1064
 *     @property
 *     def frame_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.FrameRounding
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1065
 *     def frame_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.FrameRounding             # <<<<<<<<<<<<<<
 * 
 *     @frame_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FrameRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1063
 * 
 *     @property
 *     def frame_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.frame_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1068
 * 
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameRounding = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_14frame_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_14frame_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1068, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.frame_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_14frame_rounding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_14frame_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1069
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.FrameRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1070
 *     def frame_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.FrameRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FrameRounding = __pyx_v_value;

  /* "core.pyx":1068
 * 
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.frame_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1073
 * 
 *     @property
 *     def frame_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameBorderSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_17frame_border_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_17frame_border_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_17frame_border_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_17frame_border_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1074
 *     @property
 *     def frame_border_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.FrameBorderSize
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1075
 *     def frame_border_size(self):
 *         self._check_ptr()
 *         return self._ptr.FrameBorderSize             # <<<<<<<<<<<<<<
 * 
 *     @frame_border_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FrameBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1073
 * 
 *     @property
 *     def frame_border_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.FrameBorderSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.frame_border_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1078
 * 
 *     @frame_border_size.setter
 *     def frame_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameBorderSize = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_17frame_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_17frame_border_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.frame_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_17frame_border_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_17frame_border_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1079
 *     @frame_border_size.setter
 *     def frame_border_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.FrameBorderSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1080
 *     def frame_border_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.FrameBorderSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FrameBorderSize = __pyx_v_value;

  /* "core.pyx":1078
 * 
 *     @frame_border_size.setter
 *     def frame_border_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.FrameBorderSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.frame_border_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1083
 * 
 *     @property
 *     def item_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_12item_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_12item_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_12item_spacing___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_12item_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1084
 *     @property
 *     def item_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1085
 *     def item_spacing(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)             # <<<<<<<<<<<<<<
 * 
 *     @item_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->ItemSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1083
 * 
 *     @property
 *     def item_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemSpacing)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.item_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1088
 * 
 *     @item_spacing.setter
 *     def item_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_12item_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_12item_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_12item_spacing_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_12item_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1089
 *     @item_spacing.setter
 *     def item_spacing(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1090
 *     def item_spacing(self, value):
 *         self._check_ptr()
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1090, __pyx_L1_error)
  __pyx_v_self->_ptr->ItemSpacing = __pyx_t_2;

  /* "core.pyx":1088
 * 
 *     @item_spacing.setter
 *     def item_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemSpacing = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.item_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1093
 * 
 *     @property
 *     def item_inner_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_18item_inner_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_18item_inner_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18item_inner_spacing___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_18item_inner_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1094
 *     @property
 *     def item_inner_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1095
 *     def item_inner_spacing(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)             # <<<<<<<<<<<<<<
 * 
 *     @item_inner_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->ItemInnerSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1093
 * 
 *     @property
 *     def item_inner_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ItemInnerSpacing)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.item_inner_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1098
 * 
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_18item_inner_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_18item_inner_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18item_inner_spacing_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_18item_inner_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1099
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1100
 *     def item_inner_spacing(self, value):
 *         self._check_ptr()
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
  __pyx_v_self->_ptr->ItemInnerSpacing = __pyx_t_2;

  /* "core.pyx":1098
 * 
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.item_inner_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1103
 * 
 *     @property
 *     def touch_extra_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_19touch_extra_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_19touch_extra_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_19touch_extra_padding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_19touch_extra_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1104
 *     @property
 *     def touch_extra_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1105
 *     def touch_extra_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)             # <<<<<<<<<<<<<<
 * 
 *     @touch_extra_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->TouchExtraPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1103
 * 
 *     @property
 *     def touch_extra_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.TouchExtraPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.touch_extra_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1108
 * 
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_19touch_extra_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_19touch_extra_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_19touch_extra_padding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_19touch_extra_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1109
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1110
 *     def touch_extra_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1110, __pyx_L1_error)
  __pyx_v_self->_ptr->TouchExtraPadding = __pyx_t_2;

  /* "core.pyx":1108
 * 
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.TouchExtraPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.touch_extra_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1113
 * 
 *     @property
 *     def indent_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.IndentSpacing
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_14indent_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_14indent_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14indent_spacing___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_14indent_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1114
 *     @property
 *     def indent_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.IndentSpacing
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1115
 *     def indent_spacing(self):
 *         self._check_ptr()
 *         return self._ptr.IndentSpacing             # <<<<<<<<<<<<<<
 * 
 *     @indent_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->IndentSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1113
 * 
 *     @property
 *     def indent_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.IndentSpacing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.indent_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1118
 * 
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.IndentSpacing = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_14indent_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_14indent_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1118, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.indent_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_14indent_spacing_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_14indent_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1119
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.IndentSpacing = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1120
 *     def indent_spacing(self, float value):
 *         self._check_ptr()
 *         self._ptr.IndentSpacing = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IndentSpacing = __pyx_v_value;

  /* "core.pyx":1118
 * 
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.IndentSpacing = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.indent_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1123
 * 
 *     @property
 *     def columns_min_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ColumnsMinSpacing
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_19columns_min_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_19columns_min_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_19columns_min_spacing___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_19columns_min_spacing___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1124
 *     @property
 *     def columns_min_spacing(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ColumnsMinSpacing
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1125
 *     def columns_min_spacing(self):
 *         self._check_ptr()
 *         return self._ptr.ColumnsMinSpacing             # <<<<<<<<<<<<<<
 * 
 *     @columns_min_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ColumnsMinSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1123
 * 
 *     @property
 *     def columns_min_spacing(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ColumnsMinSpacing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.columns_min_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1128
 * 
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ColumnsMinSpacing = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_19columns_min_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_19columns_min_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1128, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.columns_min_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_19columns_min_spacing_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_19columns_min_spacing_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1129
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ColumnsMinSpacing = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1130
 *     def columns_min_spacing(self, float value):
 *         self._check_ptr()
 *         self._ptr.ColumnsMinSpacing = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ColumnsMinSpacing = __pyx_v_value;

  /* "core.pyx":1128
 * 
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ColumnsMinSpacing = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.columns_min_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1133
 * 
 *     @property
 *     def scrollbar_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_14scrollbar_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_14scrollbar_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_14scrollbar_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_14scrollbar_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1134
 *     @property
 *     def scrollbar_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ScrollbarSize
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1135
 *     def scrollbar_size(self):
 *         self._check_ptr()
 *         return self._ptr.ScrollbarSize             # <<<<<<<<<<<<<<
 * 
 *     @scrollbar_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ScrollbarSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1133
 * 
 *     @property
 *     def scrollbar_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.scrollbar_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1138
 * 
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarSize = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_14scrollbar_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_14scrollbar_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1138, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.scrollbar_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_14scrollbar_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_14scrollbar_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1139
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ScrollbarSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1140
 *     def scrollbar_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.ScrollbarSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ScrollbarSize = __pyx_v_value;

  /* "core.pyx":1138
 * 
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.scrollbar_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1143
 * 
 *     @property
 *     def scrollbar_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_18scrollbar_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_18scrollbar_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18scrollbar_rounding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_18scrollbar_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1144
 *     @property
 *     def scrollbar_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.ScrollbarRounding
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1145
 *     def scrollbar_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.ScrollbarRounding             # <<<<<<<<<<<<<<
 * 
 *     @scrollbar_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->ScrollbarRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1143
 * 
 *     @property
 *     def scrollbar_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.ScrollbarRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.scrollbar_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1148
 * 
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarRounding = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_18scrollbar_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_18scrollbar_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1148, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.scrollbar_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_18scrollbar_rounding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_18scrollbar_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1149
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ScrollbarRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1150
 *     def scrollbar_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.ScrollbarRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ScrollbarRounding = __pyx_v_value;

  /* "core.pyx":1148
 * 
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ScrollbarRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.scrollbar_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1153
 * 
 *     @property
 *     def grab_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabMinSize
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_13grab_min_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_13grab_min_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_13grab_min_size___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_13grab_min_size___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1154
 *     @property
 *     def grab_min_size(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.GrabMinSize
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1155
 *     def grab_min_size(self):
 *         self._check_ptr()
 *         return self._ptr.GrabMinSize             # <<<<<<<<<<<<<<
 * 
 *     @grab_min_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->GrabMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1153
 * 
 *     @property
 *     def grab_min_size(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabMinSize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.grab_min_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1158
 * 
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabMinSize = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_13grab_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_13grab_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.grab_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_13grab_min_size_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_13grab_min_size_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1159
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.GrabMinSize = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1160
 *     def grab_min_size(self, float value):
 *         self._check_ptr()
 *         self._ptr.GrabMinSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->GrabMinSize = __pyx_v_value;

  /* "core.pyx":1158
 * 
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabMinSize = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.grab_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1163
 * 
 *     @property
 *     def grab_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabRounding
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_13grab_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_13grab_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_13grab_rounding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_13grab_rounding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1164
 *     @property
 *     def grab_rounding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.GrabRounding
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1165
 *     def grab_rounding(self):
 *         self._check_ptr()
 *         return self._ptr.GrabRounding             # <<<<<<<<<<<<<<
 * 
 *     @grab_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->GrabRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1163
 * 
 *     @property
 *     def grab_rounding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.GrabRounding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.grab_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1168
 * 
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabRounding = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_13grab_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_13grab_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1168, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.grab_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_13grab_rounding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_13grab_rounding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1169
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.GrabRounding = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1170
 *     def grab_rounding(self, float value):
 *         self._check_ptr()
 *         self._ptr.GrabRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->GrabRounding = __pyx_v_value;

  /* "core.pyx":1168
 * 
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.GrabRounding = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.grab_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1173
 * 
 *     @property
 *     def button_text_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_17button_text_align_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_17button_text_align_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_17button_text_align___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_17button_text_align___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1174
 *     @property
 *     def button_text_align(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1175
 *     def button_text_align(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)             # <<<<<<<<<<<<<<
 * 
 *     @button_text_align.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->ButtonTextAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1173
 * 
 *     @property
 *     def button_text_align(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.ButtonTextAlign)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.button_text_align.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1178
 * 
 *     @button_text_align.setter
 *     def button_text_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_17button_text_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_17button_text_align_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_17button_text_align_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_17button_text_align_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1179
 *     @button_text_align.setter
 *     def button_text_align(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1180
 *     def button_text_align(self, value):
 *         self._check_ptr()
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_v_self->_ptr->ButtonTextAlign = __pyx_t_2;

  /* "core.pyx":1178
 * 
 *     @button_text_align.setter
 *     def button_text_align(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.ButtonTextAlign = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.button_text_align.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1183
 * 
 *     @property
 *     def display_window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_22display_window_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_22display_window_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_22display_window_padding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_22display_window_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1184
 *     @property
 *     def display_window_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1185
 *     def display_window_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)             # <<<<<<<<<<<<<<
 * 
 *     @display_window_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayWindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1183
 * 
 *     @property
 *     def display_window_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplayWindowPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.display_window_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1188
 * 
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_22display_window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_22display_window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_22display_window_padding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_22display_window_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1189
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1190
 *     def display_window_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1190, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayWindowPadding = __pyx_t_2;

  /* "core.pyx":1188
 * 
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.display_window_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1193
 * 
 *     @property
 *     def display_safe_area_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_25display_safe_area_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_25display_safe_area_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_25display_safe_area_padding___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_25display_safe_area_padding___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1194
 *     @property
 *     def display_safe_area_padding(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1195
 *     def display_safe_area_padding(self):
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)             # <<<<<<<<<<<<<<
 * 
 *     @display_safe_area_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplaySafeAreaPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1193
 * 
 *     @property
 *     def display_safe_area_padding(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySafeAreaPadding)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.display_safe_area_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1198
 * 
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_25display_safe_area_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_25display_safe_area_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_25display_safe_area_padding_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_25display_safe_area_padding_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1199
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1200
 *     def display_safe_area_padding(self, value):
 *         self._check_ptr()
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1200, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplaySafeAreaPadding = __pyx_t_2;

  /* "core.pyx":1198
 * 
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.display_safe_area_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1203
 * 
 *     @property
 *     def mouse_cursor_scale(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.MouseCursorScale
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_18mouse_cursor_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_18mouse_cursor_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18mouse_cursor_scale___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_18mouse_cursor_scale___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1204
 *     @property
 *     def mouse_cursor_scale(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseCursorScale
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1205
 *     def mouse_cursor_scale(self):
 *         self._check_ptr()
 *         return self._ptr.MouseCursorScale             # <<<<<<<<<<<<<<
 * 
 *     @mouse_cursor_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseCursorScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1203
 * 
 *     @property
 *     def mouse_cursor_scale(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.MouseCursorScale
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.mouse_cursor_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1208
 * 
 *     @mouse_cursor_scale.setter
 *     def mouse_cursor_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.MouseCursorScale = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_18mouse_cursor_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_18mouse_cursor_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18mouse_cursor_scale_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_18mouse_cursor_scale_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1209
 *     @mouse_cursor_scale.setter
 *     def mouse_cursor_scale(self, value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.MouseCursorScale = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1210
 *     def mouse_cursor_scale(self, value):
 *         self._check_ptr()
 *         self._ptr.MouseCursorScale = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L1_error)
  __pyx_v_self->_ptr->MouseCursorScale = __pyx_t_2;

  /* "core.pyx":1208
 * 
 *     @mouse_cursor_scale.setter
 *     def mouse_cursor_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.MouseCursorScale = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.mouse_cursor_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1213
 * 
 *     @property
 *     def anti_aliased_lines(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedLines
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_18anti_aliased_lines_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_18anti_aliased_lines_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_18anti_aliased_lines___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_18anti_aliased_lines___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1214
 *     @property
 *     def anti_aliased_lines(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.AntiAliasedLines
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1215
 *     def anti_aliased_lines(self):
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedLines             # <<<<<<<<<<<<<<
 * 
 *     @anti_aliased_lines.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->AntiAliasedLines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1213
 * 
 *     @property
 *     def anti_aliased_lines(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedLines
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.anti_aliased_lines.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1218
 * 
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedLines = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_18anti_aliased_lines_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_18anti_aliased_lines_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1218, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.anti_aliased_lines.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_18anti_aliased_lines_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_18anti_aliased_lines_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1219
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.AntiAliasedLines = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1220
 *     def anti_aliased_lines(self, cimgui.bool value):
 *         self._check_ptr()
 *         self._ptr.AntiAliasedLines = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->AntiAliasedLines = __pyx_v_value;

  /* "core.pyx":1218
 * 
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedLines = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.anti_aliased_lines.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1223
 * 
 *     @property
 *     def anti_aliased_fill(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedFill
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_17anti_aliased_fill_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_17anti_aliased_fill_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_17anti_aliased_fill___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_17anti_aliased_fill___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1224
 *     @property
 *     def anti_aliased_fill(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.AntiAliasedFill
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1225
 *     def anti_aliased_fill(self):
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedFill             # <<<<<<<<<<<<<<
 * 
 *     @anti_aliased_fill.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->AntiAliasedFill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1223
 * 
 *     @property
 *     def anti_aliased_fill(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.AntiAliasedFill
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.anti_aliased_fill.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1228
 * 
 *     @anti_aliased_fill.setter
 *     def anti_aliased_fill(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedFill = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_17anti_aliased_fill_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_17anti_aliased_fill_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1228, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.anti_aliased_fill.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_17anti_aliased_fill_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_17anti_aliased_fill_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1229
 *     @anti_aliased_fill.setter
 *     def anti_aliased_fill(self, cimgui.bool value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.AntiAliasedFill = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1230
 *     def anti_aliased_fill(self, cimgui.bool value):
 *         self._check_ptr()
 *         self._ptr.AntiAliasedFill = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->AntiAliasedFill = __pyx_v_value;

  /* "core.pyx":1228
 * 
 *     @anti_aliased_fill.setter
 *     def anti_aliased_fill(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.AntiAliasedFill = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.anti_aliased_fill.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1233
 * 
 *     @property
 *     def curve_tessellation_tolerance(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.CurveTessellationTol
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_28curve_tessellation_tolerance___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_28curve_tessellation_tolerance___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1234
 *     @property
 *     def curve_tessellation_tolerance(self):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._ptr.CurveTessellationTol
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1235
 *     def curve_tessellation_tolerance(self):
 *         self._check_ptr()
 *         return self._ptr.CurveTessellationTol             # <<<<<<<<<<<<<<
 * 
 *     @curve_tessellation_tolerance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->CurveTessellationTol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1233
 * 
 *     @property
 *     def curve_tessellation_tolerance(self):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         return self._ptr.CurveTessellationTol
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.curve_tessellation_tolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1238
 * 
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.CurveTessellationTol = value
 */

/* Python wrapper */
static int __pyx_pw_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1238, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.curve_tessellation_tolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1239
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         self._ptr.CurveTessellationTol = value
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1240
 *     def curve_tessellation_tolerance(self, float value):
 *         self._check_ptr()
 *         self._ptr.CurveTessellationTol = value             # <<<<<<<<<<<<<<
 * 
 *     def color(self, cimgui.ImGuiCol variable):
 */
  __pyx_v_self->_ptr->CurveTessellationTol = __pyx_v_value;

  /* "core.pyx":1238
 * 
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):             # <<<<<<<<<<<<<<
 *         self._check_ptr()
 *         self._ptr.CurveTessellationTol = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.curve_tessellation_tolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1242
 *         self._ptr.CurveTessellationTol = value
 * 
 *     def color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_9color(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_9color(PyObject *__pyx_v_self, PyObject *__pyx_arg_variable) {
  ImGuiCol __pyx_v_variable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color (wrapper)", 0);
  assert(__pyx_arg_variable); {
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_variable); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.GuiStyle.color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_8GuiStyle_8color(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((ImGuiCol)__pyx_v_variable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_8color(struct __pyx_obj_4core_GuiStyle *__pyx_v_self, ImGuiCol __pyx_v_variable) {
  int __pyx_v_ix;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color", 0);

  /* "core.pyx":1243
 * 
 *     def color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiCol_COUNT);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "core.pyx":1244
 *     def color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 * 
 *         self._check_ptr()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_ImGuiCol(__pyx_v_variable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1244, __pyx_L1_error)

    /* "core.pyx":1243
 * 
 *     def color(self, cimgui.ImGuiCol variable):
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 */
  }

  /* "core.pyx":1246
 *             raise ValueError("Unknown style variable: {}".format(variable))
 * 
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._ptr.Colors[ix])
 */
  __pyx_t_4 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "core.pyx":1247
 * 
 *         self._check_ptr()
 *         cdef int ix = variable             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.Colors[ix])
 * 
 */
  __pyx_v_ix = __pyx_v_variable;

  /* "core.pyx":1248
 *         self._check_ptr()
 *         cdef int ix = variable
 *         return _cast_ImVec4_tuple(self._ptr.Colors[ix])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_f_4core__cast_ImVec4_tuple((__pyx_v_self->_ptr->Colors[__pyx_v_ix])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "core.pyx":1242
 *         self._ptr.CurveTessellationTol = value
 * 
 *     def color(self, cimgui.ImGuiCol variable):             # <<<<<<<<<<<<<<
 *         if not (0 <= variable < enums.ImGuiCol_COUNT):
 *             raise ValueError("Unknown style variable: {}".format(variable))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.GuiStyle.color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1251
 * 
 *     @property
 *     def colors(self):             # <<<<<<<<<<<<<<
 *         """Retrieve and modify style colors through list-like interface.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_6colors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_6colors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_6colors___get__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_6colors___get__(struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1269
 *             imgui.end()
 *         """
 *         self._check_ptr()             # <<<<<<<<<<<<<<
 *         return self._colors
 * 
 */
  __pyx_t_1 = __pyx_f_4core_8GuiStyle__check_ptr(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1270
 *         """
 *         self._check_ptr()
 *         return self._colors             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_colors));
  __pyx_r = ((PyObject *)__pyx_v_self->_colors);
  goto __pyx_L0;

  /* "core.pyx":1251
 * 
 *     @property
 *     def colors(self):             # <<<<<<<<<<<<<<
 *         """Retrieve and modify style colors through list-like interface.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.colors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_10__reduce_cython__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_8GuiStyle_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_8GuiStyle_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8GuiStyle_12__setstate_cython__(((struct __pyx_obj_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8GuiStyle_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_GuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.GuiStyle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1276
 *     cdef cimgui.ImDrawData* _ptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_9_DrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_9_DrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_9_DrawData___init__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_9_DrawData___init__(CYTHON_UNUSED struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1279
 *         pass
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_pointer (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_2_require_pointer(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_2_require_pointer(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_require_pointer", 0);

  /* "core.pyx":1280
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "core.pyx":1282
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s_improperly_initialized, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "core.pyx":1281
 *     def _require_pointer(self):
 *         if self._ptr == NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "%s improperly initialized" % self.__class__.__name__
 *             )
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1281, __pyx_L1_error)

    /* "core.pyx":1280
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  }

  /* "core.pyx":1279
 *         pass
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData._require_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1286
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_9_DrawData_from_ptr(ImDrawData *__pyx_v_ptr) {
  struct __pyx_obj_4core__DrawData *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":1287
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":1288
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _DrawData()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":1287
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":1290
 *             return None
 * 
 *         instance = _DrawData()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__DrawData)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__DrawData *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1291
 * 
 *         instance = _DrawData()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "core.pyx":1292
 *         instance = _DrawData()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def deindex_all_buffers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":1286
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._DrawData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1294
 *         return instance
 * 
 *     def deindex_all_buffers(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_5deindex_all_buffers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_5deindex_all_buffers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deindex_all_buffers (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_4deindex_all_buffers(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_4deindex_all_buffers(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deindex_all_buffers", 0);

  /* "core.pyx":1295
 * 
 *     def deindex_all_buffers(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         self._ptr.DeIndexAllBuffers()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1296
 *     def deindex_all_buffers(self):
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()             # <<<<<<<<<<<<<<
 * 
 *     def scale_clip_rects(self, width, height):
 */
  try {
    __pyx_v_self->_ptr->DeIndexAllBuffers();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1296, __pyx_L1_error)
  }

  /* "core.pyx":1294
 *         return instance
 * 
 *     def deindex_all_buffers(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData.deindex_all_buffers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1298
 *         self._ptr.DeIndexAllBuffers()
 * 
 *     def scale_clip_rects(self, width, height):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_7scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_7scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_clip_rects (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale_clip_rects", 1, 2, 2, 1); __PYX_ERR(0, 1298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale_clip_rects") < 0)) __PYX_ERR(0, 1298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale_clip_rects", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._DrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_9_DrawData_6scale_clip_rects(((struct __pyx_obj_4core__DrawData *)__pyx_v_self), __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_6scale_clip_rects(struct __pyx_obj_4core__DrawData *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  float __pyx_t_5;
  ImVec2 __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale_clip_rects", 0);

  /* "core.pyx":1299
 * 
 *     def scale_clip_rects(self, width, height):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1300
 *     def scale_clip_rects(self, width, height):
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_4, __pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->ScaleClipRects(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1300, __pyx_L1_error)
  }

  /* "core.pyx":1298
 *         self._ptr.DeIndexAllBuffers()
 * 
 *     def scale_clip_rects(self, width, height):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1303
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.Valid
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_5valid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_5valid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_5valid___get__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_5valid___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1304
 *     @property
 *     def valid(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.Valid
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1305
 *     def valid(self):
 *         self._require_pointer()
 *         return self._ptr.Valid             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->Valid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1303
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.Valid
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData.valid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1308
 * 
 *     @property
 *     def cmd_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_9cmd_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_9cmd_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_9cmd_count___get__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_9cmd_count___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1309
 *     @property
 *     def cmd_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdListsCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1310
 *     def cmd_count(self):
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->CmdListsCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1308
 * 
 *     @property
 *     def cmd_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData.cmd_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1313
 * 
 *     @property
 *     def total_vtx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_15total_vtx_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_15total_vtx_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_15total_vtx_count___get__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_15total_vtx_count___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1314
 *     @property
 *     def total_vtx_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.TotalVtxCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1315
 *     def total_vtx_count(self):
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->TotalVtxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1313
 * 
 *     @property
 *     def total_vtx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData.total_vtx_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1318
 * 
 *     @property
 *     def total_idx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_15total_idx_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_15total_idx_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_15total_idx_count___get__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_15total_idx_count___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1319
 *     @property
 *     def total_idx_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.TotalIdxCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1320
 *     def total_idx_count(self):
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->TotalIdxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1318
 * 
 *     @property
 *     def total_idx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._DrawData.total_idx_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1323
 * 
 *     @property
 *     def commands_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_14commands_lists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_14commands_lists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_14commands_lists___get__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_14commands_lists___get__(struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1324
 *     @property
 *     def commands_lists(self):
 *         return [             # <<<<<<<<<<<<<<
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 *             # perf: short-wiring instead of using property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":1327
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 *             # perf: short-wiring instead of using property
 *             for idx in xrange(self._ptr.CmdListsCount)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_2 = __pyx_v_self->_ptr->CmdListsCount;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "core.pyx":1325
 *     def commands_lists(self):
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])             # <<<<<<<<<<<<<<
 *             # perf: short-wiring instead of using property
 *             for idx in xrange(self._ptr.CmdListsCount)
 */
    __pyx_t_5 = __pyx_f_4core_9_DrawList_from_ptr((__pyx_v_self->_ptr->CmdLists[__pyx_v_idx])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1323
 * 
 *     @property
 *     def commands_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core._DrawData.commands_lists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_8__reduce_cython__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_DrawData_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_9_DrawData_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9_DrawData_10__setstate_cython__(((struct __pyx_obj_4core__DrawData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9_DrawData_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__DrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._DrawData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1335
 * 
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_18_StaticGlyphRanges_from_ptr(ImWchar const *__pyx_v_ptr) {
  struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":1336
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":1337
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _StaticGlyphRanges()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":1336
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":1339
 *             return None
 * 
 *         instance = _StaticGlyphRanges()             # <<<<<<<<<<<<<<
 *         instance.ranges_ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__StaticGlyphRanges)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__StaticGlyphRanges *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1340
 * 
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->ranges_ptr = __pyx_v_ptr;

  /* "core.pyx":1341
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":1335
 * 
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._StaticGlyphRanges.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18_StaticGlyphRanges_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_18_StaticGlyphRanges_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18_StaticGlyphRanges___reduce_cython__(((struct __pyx_obj_4core__StaticGlyphRanges *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18_StaticGlyphRanges___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._StaticGlyphRanges.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18_StaticGlyphRanges_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_18_StaticGlyphRanges_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18_StaticGlyphRanges_2__setstate_cython__(((struct __pyx_obj_4core__StaticGlyphRanges *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18_StaticGlyphRanges_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._StaticGlyphRanges.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1346
 * cdef class _Font(object):
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_5_Font_from_ptr(ImFont *__pyx_v_ptr) {
  struct __pyx_obj_4core__Font *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":1347
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":1348
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _Font()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":1347
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":1350
 *             return None
 * 
 *         instance = _Font()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__Font)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__Font *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1351
 * 
 *         instance = _Font()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "core.pyx":1352
 *         instance = _Font()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":1346
 * cdef class _Font(object):
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._Font.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_5_Font_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_5_Font_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_5_Font___reduce_cython__(((struct __pyx_obj_4core__Font *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_5_Font___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Font *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._Font.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_5_Font_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_5_Font_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_5_Font_2__setstate_cython__(((struct __pyx_obj_4core__Font *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_5_Font_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__Font *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._Font.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1372
 *     cdef cimgui.ImFontAtlas* _ptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_10_FontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_10_FontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_10_FontAtlas___init__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10_FontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1376
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

static PyObject *__pyx_f_4core_10_FontAtlas_from_ptr(ImFontAtlas *__pyx_v_ptr) {
  struct __pyx_obj_4core__FontAtlas *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":1377
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":1378
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         instance = _FontAtlas()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":1377
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "core.pyx":1380
 *             return None
 * 
 *         instance = _FontAtlas()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__FontAtlas)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_instance = ((struct __pyx_obj_4core__FontAtlas *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1381
 * 
 *         instance = _FontAtlas()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "core.pyx":1382
 *         instance = _FontAtlas()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def _require_pointer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "core.pyx":1376
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1384
 *         return instance
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_pointer (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_2_require_pointer(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_2_require_pointer(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_require_pointer", 0);

  /* "core.pyx":1385
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "core.pyx":1387
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s_improperly_initialized, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "core.pyx":1386
 *     def _require_pointer(self):
 *         if self._ptr == NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "%s improperly initialized" % self.__class__.__name__
 *             )
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1386, __pyx_L1_error)

    /* "core.pyx":1385
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  }

  /* "core.pyx":1390
 *             )
 * 
 *         return self._ptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def add_font_default(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->_ptr != NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":1384
 *         return instance
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._FontAtlas._require_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1392
 *         return self._ptr != NULL
 * 
 *     def add_font_default(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_5add_font_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_5add_font_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_default (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_4add_font_default(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_4add_font_default(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  ImFont *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_font_default", 0);

  /* "core.pyx":1393
 * 
 *     def add_font_default(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1395
 *         self._require_pointer()
 * 
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))             # <<<<<<<<<<<<<<
 * 
 *     def add_font_from_file_ttf(
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->AddFontDefault(NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1395, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_4core_5_Font_from_ptr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1392
 *         return self._ptr != NULL
 * 
 *     def add_font_default(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._FontAtlas.add_font_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1397
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_7add_font_from_file_ttf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_7add_font_from_file_ttf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  float __pyx_v_size_pixels;
  struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_glyph_ranges = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_from_file_ttf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_size_pixels,&__pyx_n_s_glyph_ranges,0};
    PyObject* values[3] = {0,0,0};

    /* "core.pyx":1399
 *     def add_font_from_file_ttf(
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,             # <<<<<<<<<<<<<<
 *     ):
 *         self._require_pointer()
 */
    values[2] = (PyObject *)((struct __pyx_obj_4core__StaticGlyphRanges *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size_pixels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_font_from_file_ttf", 0, 2, 3, 1); __PYX_ERR(0, 1397, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_glyph_ranges);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_font_from_file_ttf") < 0)) __PYX_ERR(0, 1397, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_size_pixels = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_size_pixels == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1398, __pyx_L3_error)
    __pyx_v_glyph_ranges = ((struct __pyx_obj_4core__StaticGlyphRanges *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_font_from_file_ttf", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1397, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._FontAtlas.add_font_from_file_ttf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 1398, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_glyph_ranges), __pyx_ptype_4core__StaticGlyphRanges, 1, "glyph_ranges", 0))) __PYX_ERR(0, 1399, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_10_FontAtlas_6add_font_from_file_ttf(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self), __pyx_v_filename, __pyx_v_size_pixels, __pyx_v_glyph_ranges);

  /* "core.pyx":1397
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_6add_font_from_file_ttf(struct __pyx_obj_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_filename, float __pyx_v_size_pixels, struct __pyx_obj_4core__StaticGlyphRanges *__pyx_v_glyph_ranges) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  ImWchar const *__pyx_t_5;
  int __pyx_t_6;
  ImFont *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_font_from_file_ttf", 0);

  /* "core.pyx":1401
 *         _StaticGlyphRanges glyph_ranges=None,
 *     ):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         # note: cannot use cimgui.ImWchar here due to Cython bug
 *         # note: whole unicode
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1406
 *         cdef char* in_glyph_ranges
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(             # <<<<<<<<<<<<<<
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":1407
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(
 *             _bytes(filename), size_pixels,  NULL,             # <<<<<<<<<<<<<<
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 *         ))
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 1407, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 1407, __pyx_L1_error)

  /* "core.pyx":1408
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
  __pyx_t_6 = (((PyObject *)__pyx_v_glyph_ranges) != Py_None);
  if ((__pyx_t_6 != 0)) {
    __pyx_t_5 = __pyx_v_glyph_ranges->ranges_ptr;
  } else {
    __pyx_t_5 = NULL;
  }

  /* "core.pyx":1406
 *         cdef char* in_glyph_ranges
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(             # <<<<<<<<<<<<<<
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 */
  try {
    __pyx_t_7 = __pyx_v_self->_ptr->AddFontFromFileTTF(__pyx_t_4, __pyx_v_size_pixels, NULL, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1406, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_f_4core_5_Font_from_ptr(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1397
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._FontAtlas.add_font_from_file_ttf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1411
 *         ))
 * 
 *     def clear_tex_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearTexData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_9clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_9clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_tex_data (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_8clear_tex_data(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_8clear_tex_data(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_tex_data", 0);

  /* "core.pyx":1412
 * 
 *     def clear_tex_data(self):
 *         self._ptr.ClearTexData()             # <<<<<<<<<<<<<<
 * 
 *     def clear_input_data(self):
 */
  try {
    __pyx_v_self->_ptr->ClearTexData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1412, __pyx_L1_error)
  }

  /* "core.pyx":1411
 *         ))
 * 
 *     def clear_tex_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearTexData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._FontAtlas.clear_tex_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1414
 *         self._ptr.ClearTexData()
 * 
 *     def clear_input_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_11clear_input_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_11clear_input_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_input_data (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_10clear_input_data(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_10clear_input_data(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_input_data", 0);

  /* "core.pyx":1415
 * 
 *     def clear_input_data(self):
 *         self._ptr.ClearInputData()             # <<<<<<<<<<<<<<
 * 
 *     def clear_fonts(self):
 */
  try {
    __pyx_v_self->_ptr->ClearInputData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1415, __pyx_L1_error)
  }

  /* "core.pyx":1414
 *         self._ptr.ClearTexData()
 * 
 *     def clear_input_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._FontAtlas.clear_input_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1417
 *         self._ptr.ClearInputData()
 * 
 *     def clear_fonts(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearFonts()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_13clear_fonts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_13clear_fonts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_fonts (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_12clear_fonts(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_12clear_fonts(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_fonts", 0);

  /* "core.pyx":1418
 * 
 *     def clear_fonts(self):
 *         self._ptr.ClearFonts()             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  try {
    __pyx_v_self->_ptr->ClearFonts();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1418, __pyx_L1_error)
  }

  /* "core.pyx":1417
 *         self._ptr.ClearInputData()
 * 
 *     def clear_fonts(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearFonts()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._FontAtlas.clear_fonts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1420
 *         self._ptr.ClearFonts()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._ptr.Clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_15clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_15clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_14clear(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_14clear(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "core.pyx":1421
 * 
 *     def clear(self):
 *         self._ptr.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_default(self):
 */
  try {
    __pyx_v_self->_ptr->Clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1421, __pyx_L1_error)
  }

  /* "core.pyx":1420
 *         self._ptr.ClearFonts()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._ptr.Clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._FontAtlas.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1423
 *         self._ptr.Clear()
 * 
 *     def get_glyph_ranges_default(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_17get_glyph_ranges_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_17get_glyph_ranges_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_default (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_16get_glyph_ranges_default(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_16get_glyph_ranges_default(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_default", 0);

  /* "core.pyx":1424
 * 
 *     def get_glyph_ranges_default(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_korean(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesDefault();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1424, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1423
 *         self._ptr.Clear()
 * 
 *     def get_glyph_ranges_default(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1426
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 *     def get_glyph_ranges_korean(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_19get_glyph_ranges_korean(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_19get_glyph_ranges_korean(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_korean (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_18get_glyph_ranges_korean(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_18get_glyph_ranges_korean(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_korean", 0);

  /* "core.pyx":1427
 * 
 *     def get_glyph_ranges_korean(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_japanese(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesKorean();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1427, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1426
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 *     def get_glyph_ranges_korean(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_korean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1429
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 *     def get_glyph_ranges_japanese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_21get_glyph_ranges_japanese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_21get_glyph_ranges_japanese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_japanese (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_20get_glyph_ranges_japanese(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_20get_glyph_ranges_japanese(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_japanese", 0);

  /* "core.pyx":1430
 * 
 *     def get_glyph_ranges_japanese(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_chinese_full(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesJapanese();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1430, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1429
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 *     def get_glyph_ranges_japanese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_japanese", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1432
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 *     def get_glyph_ranges_chinese_full(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_23get_glyph_ranges_chinese_full(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_23get_glyph_ranges_chinese_full(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese_full (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_22get_glyph_ranges_chinese_full(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_22get_glyph_ranges_chinese_full(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese_full", 0);

  /* "core.pyx":1433
 * 
 *     def get_glyph_ranges_chinese_full(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_chinese(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesChineseFull();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1433, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1432
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 *     def get_glyph_ranges_chinese_full(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_chinese_full", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1435
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 *     def get_glyph_ranges_chinese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_25get_glyph_ranges_chinese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_25get_glyph_ranges_chinese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_24get_glyph_ranges_chinese(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_24get_glyph_ranges_chinese(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese", 0);

  /* "core.pyx":1436
 * 
 *     def get_glyph_ranges_chinese(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_cyrillic(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesChineseSimplifiedCommon();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1436, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1435
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseFull())
 * 
 *     def get_glyph_ranges_chinese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_chinese", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1438
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 *     def get_glyph_ranges_cyrillic(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_27get_glyph_ranges_cyrillic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_27get_glyph_ranges_cyrillic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_cyrillic (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_26get_glyph_ranges_cyrillic(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_26get_glyph_ranges_cyrillic(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_cyrillic", 0);

  /* "core.pyx":1439
 * 
 *     def get_glyph_ranges_cyrillic(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_latin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesCyrillic();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1439, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1438
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChineseSimplifiedCommon())
 * 
 *     def get_glyph_ranges_cyrillic(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_cyrillic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1441
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 *     def get_glyph_ranges_latin(self):             # <<<<<<<<<<<<<<
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_29get_glyph_ranges_latin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_29get_glyph_ranges_latin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_latin (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_28get_glyph_ranges_latin(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_28get_glyph_ranges_latin(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_glyph_ranges_latin", 0);

  /* "core.pyx":1443
 *     def get_glyph_ranges_latin(self):
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)             # <<<<<<<<<<<<<<
 * 
 *     def get_tex_data_as_alpha8(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_18_StaticGlyphRanges_from_ptr(__pyx_v_4core__LATIN_ALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1441
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 *     def get_glyph_ranges_latin(self):             # <<<<<<<<<<<<<<
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._FontAtlas.get_glyph_ranges_latin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1445
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 * 
 *     def get_tex_data_as_alpha8(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_31get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_31get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8 (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_30get_tex_data_as_alpha8(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_30get_tex_data_as_alpha8(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  int __pyx_v_width;
  int __pyx_v_height;
  unsigned char *__pyx_v_pixels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8", 0);

  /* "core.pyx":1446
 * 
 *     def get_tex_data_as_alpha8(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         cdef int width
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1452
 *         cdef unsigned char* pixels
 * 
 *         self._ptr.GetTexDataAsAlpha8(&pixels, &width, &height)             # <<<<<<<<<<<<<<
 * 
 *         return width, height, bytes(pixels[:width*height])
 */
  try {
    __pyx_v_self->_ptr->GetTexDataAsAlpha8((&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1452, __pyx_L1_error)
  }

  /* "core.pyx":1454
 *         self._ptr.GetTexDataAsAlpha8(&pixels, &width, &height)
 * 
 *         return width, height, bytes(pixels[:width*height])             # <<<<<<<<<<<<<<
 * 
 *     def get_tex_data_as_rgba32(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, (__pyx_v_width * __pyx_v_height) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":1445
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 * 
 *     def get_tex_data_as_alpha8(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core._FontAtlas.get_tex_data_as_alpha8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1456
 *         return width, height, bytes(pixels[:width*height])
 * 
 *     def get_tex_data_as_rgba32(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_33get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_33get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32 (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_32get_tex_data_as_rgba32(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_32get_tex_data_as_rgba32(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  int __pyx_v_width;
  int __pyx_v_height;
  unsigned char *__pyx_v_pixels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32", 0);

  /* "core.pyx":1457
 * 
 *     def get_tex_data_as_rgba32(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         cdef int width
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1462
 *         cdef int height
 *         cdef unsigned char* pixels
 *         self._ptr.GetTexDataAsRGBA32(&pixels, &width, &height)             # <<<<<<<<<<<<<<
 * 
 *         return width, height, bytes(pixels[:width*height*4])
 */
  try {
    __pyx_v_self->_ptr->GetTexDataAsRGBA32((&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1462, __pyx_L1_error)
  }

  /* "core.pyx":1464
 *         self._ptr.GetTexDataAsRGBA32(&pixels, &width, &height)
 * 
 *         return width, height, bytes(pixels[:width*height*4])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, ((__pyx_v_width * __pyx_v_height) * 4) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":1456
 *         return width, height, bytes(pixels[:width*height])
 * 
 *     def get_tex_data_as_rgba32(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core._FontAtlas.get_tex_data_as_rgba32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1467
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Note: difference in mapping (maps actual TexID and not TextureID)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_10texture_id___get__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_10texture_id___get__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1475
 * 
 *         """
 *         return <object>self._ptr.TexID             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ptr->TexID));
  __pyx_r = ((PyObject *)__pyx_v_self->_ptr->TexID);
  goto __pyx_L0;

  /* "core.pyx":1467
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Note: difference in mapping (maps actual TexID and not TextureID)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1488
 * 
 *     @texture_id.setter
 *     def texture_id(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.TexID = <void *> value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_10_FontAtlas_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_10_FontAtlas_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_10texture_id_2__set__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10_FontAtlas_10texture_id_2__set__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1489
 *     @texture_id.setter
 *     def texture_id(self, value):
 *         self._ptr.TexID = <void *> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_ptr->TexID = ((void *)__pyx_v_value);

  /* "core.pyx":1488
 * 
 *     @texture_id.setter
 *     def texture_id(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.TexID = <void *> value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1479
 * 
 *     @property
 *     def texture_width(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexWidth
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_13texture_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_13texture_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_13texture_width___get__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_13texture_width___get__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1480
 *     @property
 *     def texture_width(self):
 *         return <int>self._ptr.TexWidth             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_self->_ptr->TexWidth)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1479
 * 
 *     @property
 *     def texture_width(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexWidth
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._FontAtlas.texture_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1483
 * 
 *     @property
 *     def texture_height(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexHeight
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_14texture_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_14texture_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_14texture_height___get__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_14texture_height___get__(struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1484
 *     @property
 *     def texture_height(self):
 *         return <int>self._ptr.TexHeight             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_self->_ptr->TexHeight)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1483
 * 
 *     @property
 *     def texture_height(self):             # <<<<<<<<<<<<<<
 *         return <int>self._ptr.TexHeight
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._FontAtlas.texture_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_34__reduce_cython__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._FontAtlas.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10_FontAtlas_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_10_FontAtlas_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10_FontAtlas_36__setstate_cython__(((struct __pyx_obj_4core__FontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10_FontAtlas_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__FontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._FontAtlas.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1511
 *     cdef object _keep_logfile_alive
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self._ptr = &cimgui.GetIO()
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_3_IO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_3_IO___init__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO___init__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<ImGuiIO> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  ImGuiContext *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  uintptr_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":1513
 *     def __init__(self):
 * 
 *         self._ptr = &cimgui.GetIO()             # <<<<<<<<<<<<<<
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetIO();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1513, __pyx_L1_error)
  }
  __pyx_v_self->_ptr = (&__pyx_t_1);

  /* "core.pyx":1514
 * 
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)             # <<<<<<<<<<<<<<
 * 
 *         self._keep_ini_alive = None
 */
  __pyx_t_2 = __pyx_f_4core_10_FontAtlas_from_ptr(__pyx_v_self->_ptr->Fonts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fonts);
  __Pyx_DECREF(__pyx_v_self->_fonts);
  __pyx_v_self->_fonts = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "core.pyx":1516
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 * 
 *         self._keep_ini_alive = None             # <<<<<<<<<<<<<<
 *         self._keep_logfile_alive = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_keep_ini_alive);
  __Pyx_DECREF(__pyx_v_self->_keep_ini_alive);
  __pyx_v_self->_keep_ini_alive = Py_None;

  /* "core.pyx":1517
 * 
 *         self._keep_ini_alive = None
 *         self._keep_logfile_alive = None             # <<<<<<<<<<<<<<
 * 
 *         if <uintptr_t>cimgui.GetCurrentContext() not in _io_clipboard:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_keep_logfile_alive);
  __Pyx_DECREF(__pyx_v_self->_keep_logfile_alive);
  __pyx_v_self->_keep_logfile_alive = Py_None;

  /* "core.pyx":1519
 *         self._keep_logfile_alive = None
 * 
 *         if <uintptr_t>cimgui.GetCurrentContext() not in _io_clipboard:             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()] = {'_get_clipboard_text_fn': None,
 *                                                                     '_set_clipboard_text_fn': None}
 */
  try {
    __pyx_t_3 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1519, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "core.pyx":1520
 * 
 *         if <uintptr_t>cimgui.GetCurrentContext() not in _io_clipboard:
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()] = {'_get_clipboard_text_fn': None,             # <<<<<<<<<<<<<<
 *                                                                     '_set_clipboard_text_fn': None}
 * 
 */
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_get_clipboard_text_fn, Py_None) < 0) __PYX_ERR(0, 1520, __pyx_L1_error)

    /* "core.pyx":1521
 *         if <uintptr_t>cimgui.GetCurrentContext() not in _io_clipboard:
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()] = {'_get_clipboard_text_fn': None,
 *                                                                     '_set_clipboard_text_fn': None}             # <<<<<<<<<<<<<<
 * 
 *     # ... maping of input properties ...
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_set_clipboard_text_fn, Py_None) < 0) __PYX_ERR(0, 1520, __pyx_L1_error)

    /* "core.pyx":1520
 * 
 *         if <uintptr_t>cimgui.GetCurrentContext() not in _io_clipboard:
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()] = {'_get_clipboard_text_fn': None,             # <<<<<<<<<<<<<<
 *                                                                     '_set_clipboard_text_fn': None}
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    try {
      __pyx_t_3 = ImGui::GetCurrentContext();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1520, __pyx_L1_error)
    }
    __pyx_t_7 = ((uintptr_t)__pyx_t_3);
    if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_t_7, __pyx_t_4, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "core.pyx":1519
 *         self._keep_logfile_alive = None
 * 
 *         if <uintptr_t>cimgui.GetCurrentContext() not in _io_clipboard:             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()] = {'_get_clipboard_text_fn': None,
 *                                                                     '_set_clipboard_text_fn': None}
 */
  }

  /* "core.pyx":1511
 *     cdef object _keep_logfile_alive
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self._ptr = &cimgui.GetIO()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core._IO.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1525
 *     # ... maping of input properties ...
 *     @property
 *     def config_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigFlags
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_12config_flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_12config_flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_12config_flags___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_12config_flags___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1526
 *     @property
 *     def config_flags(self):
 *         return self._ptr.ConfigFlags             # <<<<<<<<<<<<<<
 * 
 *     @config_flags.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags(__pyx_v_self->_ptr->ConfigFlags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1525
 *     # ... maping of input properties ...
 *     @property
 *     def config_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigFlags
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.config_flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1529
 * 
 *     @config_flags.setter
 *     def config_flags(self, cimgui.ImGuiConfigFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigFlags = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_12config_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_12config_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  ImGuiConfigFlags __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_ImGuiConfigFlags(__pyx_arg_value); if (unlikely((__pyx_v_value == ((ImGuiConfigFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1529, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.config_flags.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_12config_flags_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((ImGuiConfigFlags)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_12config_flags_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, ImGuiConfigFlags __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1530
 *     @config_flags.setter
 *     def config_flags(self, cimgui.ImGuiConfigFlags value):
 *         self._ptr.ConfigFlags = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ConfigFlags = __pyx_v_value;

  /* "core.pyx":1529
 * 
 *     @config_flags.setter
 *     def config_flags(self, cimgui.ImGuiConfigFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigFlags = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1533
 * 
 *     @property
 *     def backend_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.BackendFlags
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_13backend_flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_13backend_flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_13backend_flags___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_13backend_flags___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1534
 *     @property
 *     def backend_flags(self):
 *         return self._ptr.BackendFlags             # <<<<<<<<<<<<<<
 * 
 *     @backend_flags.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags(__pyx_v_self->_ptr->BackendFlags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1533
 * 
 *     @property
 *     def backend_flags(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.BackendFlags
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.backend_flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1537
 * 
 *     @backend_flags.setter
 *     def backend_flags(self, cimgui.ImGuiBackendFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.BackendFlags = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_13backend_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_13backend_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  ImGuiBackendFlags __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_ImGuiBackendFlags(__pyx_arg_value); if (unlikely((__pyx_v_value == ((ImGuiBackendFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1537, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.backend_flags.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_13backend_flags_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((ImGuiBackendFlags)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_13backend_flags_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, ImGuiBackendFlags __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1538
 *     @backend_flags.setter
 *     def backend_flags(self, cimgui.ImGuiBackendFlags value):
 *         self._ptr.BackendFlags = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->BackendFlags = __pyx_v_value;

  /* "core.pyx":1537
 * 
 *     @backend_flags.setter
 *     def backend_flags(self, cimgui.ImGuiBackendFlags value):             # <<<<<<<<<<<<<<
 *         self._ptr.BackendFlags = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1541
 * 
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_12display_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_12display_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_12display_size___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_12display_size___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1542
 *     @property
 *     def display_size(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)             # <<<<<<<<<<<<<<
 * 
 *     @display_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplaySize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1541
 * 
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.display_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1545
 * 
 *     @display_size.setter
 *     def display_size(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_3_IO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_12display_size_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_12display_size_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1546
 *     @display_size.setter
 *     def display_size(self, value):
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1546, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplaySize = __pyx_t_1;

  /* "core.pyx":1545
 * 
 *     @display_size.setter
 *     def display_size(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.display_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1549
 * 
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.DeltaTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_10delta_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_10delta_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_10delta_time___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_10delta_time___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1550
 *     @property
 *     def delta_time(self):
 *         return self._ptr.DeltaTime             # <<<<<<<<<<<<<<
 * 
 *     @delta_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->DeltaTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1549
 * 
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.DeltaTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.delta_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1553
 * 
 *     @delta_time.setter
 *     def delta_time(self, float time):             # <<<<<<<<<<<<<<
 *         self._ptr.DeltaTime = time
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_time); /*proto*/
static int __pyx_pw_4core_3_IO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_time) {
  float __pyx_v_time;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_time); {
    __pyx_v_time = __pyx_PyFloat_AsFloat(__pyx_arg_time); if (unlikely((__pyx_v_time == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1553, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.delta_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_10delta_time_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_10delta_time_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_time) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1554
 *     @delta_time.setter
 *     def delta_time(self, float time):
 *         self._ptr.DeltaTime = time             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->DeltaTime = __pyx_v_time;

  /* "core.pyx":1553
 * 
 *     @delta_time.setter
 *     def delta_time(self, float time):             # <<<<<<<<<<<<<<
 *         self._ptr.DeltaTime = time
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1557
 * 
 *     @property
 *     def ini_saving_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniSavingRate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_15ini_saving_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_15ini_saving_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_15ini_saving_rate___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_15ini_saving_rate___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1558
 *     @property
 *     def ini_saving_rate(self):
 *         return self._ptr.IniSavingRate             # <<<<<<<<<<<<<<
 * 
 *     @ini_saving_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->IniSavingRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1557
 * 
 *     @property
 *     def ini_saving_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniSavingRate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.ini_saving_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1561
 * 
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniSavingRate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_15ini_saving_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_15ini_saving_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1561, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.ini_saving_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_15ini_saving_rate_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_15ini_saving_rate_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1562
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):
 *         self._ptr.IniSavingRate = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IniSavingRate = __pyx_v_value;

  /* "core.pyx":1561
 * 
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniSavingRate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1565
 * 
 *     @property
 *     def log_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.LogFilename
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_13log_file_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_13log_file_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_13log_file_name___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_13log_file_name___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1566
 *     @property
 *     def log_file_name(self):
 *         return self._ptr.LogFilename             # <<<<<<<<<<<<<<
 * 
 *     @log_file_name.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->_ptr->LogFilename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1565
 * 
 *     @property
 *     def log_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.LogFilename
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.log_file_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1569
 * 
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._keep_logfile_alive = value
 *         self._ptr.LogFilename = value
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_13log_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_13log_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsWritableString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 1569, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.log_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_13log_file_name_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_13log_file_name_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1570
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):
 *         self._keep_logfile_alive = value             # <<<<<<<<<<<<<<
 *         self._ptr.LogFilename = value
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_keep_logfile_alive);
  __Pyx_DECREF(__pyx_v_self->_keep_logfile_alive);
  __pyx_v_self->_keep_logfile_alive = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":1571
 *     def log_file_name(self, char* value):
 *         self._keep_logfile_alive = value
 *         self._ptr.LogFilename = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->LogFilename = __pyx_v_value;

  /* "core.pyx":1569
 * 
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._keep_logfile_alive = value
 *         self._ptr.LogFilename = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.log_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1574
 * 
 *     @property
 *     def ini_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniFilename
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_13ini_file_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_13ini_file_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_13ini_file_name___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_13ini_file_name___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1575
 *     @property
 *     def ini_file_name(self):
 *         return self._ptr.IniFilename             # <<<<<<<<<<<<<<
 * 
 *     @ini_file_name.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->_ptr->IniFilename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1574
 * 
 *     @property
 *     def ini_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniFilename
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.ini_file_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1578
 * 
 *     @ini_file_name.setter
 *     def ini_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._keep_ini_alive = value
 *         self._ptr.IniFilename = value
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_13ini_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_13ini_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsWritableString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 1578, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.ini_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_13ini_file_name_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_13ini_file_name_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1579
 *     @ini_file_name.setter
 *     def ini_file_name(self, char* value):
 *         self._keep_ini_alive = value             # <<<<<<<<<<<<<<
 *         self._ptr.IniFilename = value
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_keep_ini_alive);
  __Pyx_DECREF(__pyx_v_self->_keep_ini_alive);
  __pyx_v_self->_keep_ini_alive = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":1580
 *     def ini_file_name(self, char* value):
 *         self._keep_ini_alive = value
 *         self._ptr.IniFilename = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IniFilename = __pyx_v_value;

  /* "core.pyx":1578
 * 
 *     @ini_file_name.setter
 *     def ini_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._keep_ini_alive = value
 *         self._ptr.IniFilename = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.ini_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1583
 * 
 *     @property
 *     def mouse_double_click_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_23mouse_double_click_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_23mouse_double_click_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_23mouse_double_click_time___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_23mouse_double_click_time___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1584
 *     @property
 *     def mouse_double_click_time(self):
 *         return self._ptr.MouseDoubleClickTime             # <<<<<<<<<<<<<<
 * 
 *     @mouse_double_click_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDoubleClickTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1583
 * 
 *     @property
 *     def mouse_double_click_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_double_click_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1587
 * 
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickTime = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_23mouse_double_click_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_23mouse_double_click_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1587, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.mouse_double_click_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_23mouse_double_click_time_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_23mouse_double_click_time_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1588
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):
 *         self._ptr.MouseDoubleClickTime = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDoubleClickTime = __pyx_v_value;

  /* "core.pyx":1587
 * 
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickTime = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1591
 * 
 *     @property
 *     def mouse_double_click_max_distance(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickMaxDist
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_31mouse_double_click_max_distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_31mouse_double_click_max_distance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_31mouse_double_click_max_distance___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_31mouse_double_click_max_distance___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1592
 *     @property
 *     def mouse_double_click_max_distance(self):
 *         return self._ptr.MouseDoubleClickMaxDist             # <<<<<<<<<<<<<<
 * 
 *     @mouse_double_click_max_distance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDoubleClickMaxDist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1591
 * 
 *     @property
 *     def mouse_double_click_max_distance(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickMaxDist
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_double_click_max_distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1595
 * 
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickMaxDist = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_31mouse_double_click_max_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_31mouse_double_click_max_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1595, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.mouse_double_click_max_distance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_31mouse_double_click_max_distance_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_31mouse_double_click_max_distance_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1596
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):
 *         self._ptr.MouseDoubleClickMaxDist = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDoubleClickMaxDist = __pyx_v_value;

  /* "core.pyx":1595
 * 
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickMaxDist = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1599
 * 
 *     @property
 *     def mouse_drag_threshold(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDragThreshold
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_20mouse_drag_threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_20mouse_drag_threshold_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_20mouse_drag_threshold___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_20mouse_drag_threshold___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1600
 *     @property
 *     def mouse_drag_threshold(self):
 *         return self._ptr.MouseDragThreshold             # <<<<<<<<<<<<<<
 * 
 *     @mouse_drag_threshold.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDragThreshold); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1599
 * 
 *     @property
 *     def mouse_drag_threshold(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDragThreshold
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_drag_threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1603
 * 
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDragThreshold = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_20mouse_drag_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_20mouse_drag_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1603, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.mouse_drag_threshold.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_20mouse_drag_threshold_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_20mouse_drag_threshold_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1604
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):
 *         self._ptr.MouseDragThreshold = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDragThreshold = __pyx_v_value;

  /* "core.pyx":1603
 * 
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDragThreshold = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1607
 * 
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_7key_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_7key_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_7key_map___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_7key_map___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_key_map = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1609
 *     def key_map(self):
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),             # <<<<<<<<<<<<<<
 *             format='i',
 *             itemsize=sizeof(int),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_COUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_i) < 0) __PYX_ERR(0, 1609, __pyx_L1_error)

  /* "core.pyx":1611
 *             shape=(enums.ImGuiKey_COUNT,),
 *             format='i',
 *             itemsize=sizeof(int),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":1612
 *             format='i',
 *             itemsize=sizeof(int),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 1609, __pyx_L1_error)

  /* "core.pyx":1608
 *     @property
 *     def key_map(self):
 *         cdef cvarray key_map = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(enums.ImGuiKey_COUNT,),
 *             format='i',
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_key_map = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "core.pyx":1614
 *             allocate_buffer=False
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap             # <<<<<<<<<<<<<<
 *         return key_map
 * 
 */
  __pyx_v_key_map->data = ((char *)__pyx_v_self->_ptr->KeyMap);

  /* "core.pyx":1615
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap
 *         return key_map             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_key_map));
  __pyx_r = ((PyObject *)__pyx_v_key_map);
  goto __pyx_L0;

  /* "core.pyx":1607
 * 
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core._IO.key_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_key_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1618
 * 
 *     @property
 *     def key_repeat_delay(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatDelay
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_16key_repeat_delay_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_16key_repeat_delay_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_16key_repeat_delay___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_16key_repeat_delay___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1619
 *     @property
 *     def key_repeat_delay(self):
 *         return self._ptr.KeyRepeatDelay             # <<<<<<<<<<<<<<
 * 
 *     @key_repeat_delay.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->KeyRepeatDelay); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1618
 * 
 *     @property
 *     def key_repeat_delay(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatDelay
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.key_repeat_delay.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1622
 * 
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatDelay = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_16key_repeat_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_16key_repeat_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1622, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.key_repeat_delay.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_16key_repeat_delay_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_16key_repeat_delay_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1623
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):
 *         self._ptr.KeyRepeatDelay = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyRepeatDelay = __pyx_v_value;

  /* "core.pyx":1622
 * 
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatDelay = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1626
 * 
 *     @property
 *     def key_repeat_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatRate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_15key_repeat_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_15key_repeat_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_15key_repeat_rate___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_15key_repeat_rate___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1627
 *     @property
 *     def key_repeat_rate(self):
 *         return self._ptr.KeyRepeatRate             # <<<<<<<<<<<<<<
 * 
 *     @key_repeat_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->KeyRepeatRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1626
 * 
 *     @property
 *     def key_repeat_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatRate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.key_repeat_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1630
 * 
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatRate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_15key_repeat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_15key_repeat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1630, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.key_repeat_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_15key_repeat_rate_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_15key_repeat_rate_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1631
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):
 *         self._ptr.KeyRepeatRate = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyRepeatRate = __pyx_v_value;

  /* "core.pyx":1630
 * 
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatRate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1634
 * 
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         return self._fonts
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_5fonts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_5fonts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_5fonts___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_5fonts___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1635
 *     @property
 *     def fonts(self):
 *         return self._fonts             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_fonts);
  __pyx_r = __pyx_v_self->_fonts;
  goto __pyx_L0;

  /* "core.pyx":1634
 * 
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         return self._fonts
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1638
 * 
 *     @property
 *     def font_global_scale(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontGlobalScale
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_17font_global_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_17font_global_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_17font_global_scale___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_17font_global_scale___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1639
 *     @property
 *     def font_global_scale(self):
 *         return self._ptr.FontGlobalScale             # <<<<<<<<<<<<<<
 * 
 *     @font_global_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FontGlobalScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1638
 * 
 *     @property
 *     def font_global_scale(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontGlobalScale
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.font_global_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1642
 * 
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontGlobalScale = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_17font_global_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_17font_global_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1642, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.font_global_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_17font_global_scale_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_17font_global_scale_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1643
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):
 *         self._ptr.FontGlobalScale = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FontGlobalScale = __pyx_v_value;

  /* "core.pyx":1642
 * 
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontGlobalScale = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1646
 * 
 *     @property
 *     def font_allow_user_scaling(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontAllowUserScaling
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_23font_allow_user_scaling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_23font_allow_user_scaling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_23font_allow_user_scaling___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_23font_allow_user_scaling___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1647
 *     @property
 *     def font_allow_user_scaling(self):
 *         return self._ptr.FontAllowUserScaling             # <<<<<<<<<<<<<<
 * 
 *     @font_allow_user_scaling.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->FontAllowUserScaling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1646
 * 
 *     @property
 *     def font_allow_user_scaling(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontAllowUserScaling
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.font_allow_user_scaling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1650
 * 
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontAllowUserScaling = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_23font_allow_user_scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_23font_allow_user_scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1650, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.font_allow_user_scaling.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_23font_allow_user_scaling_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_23font_allow_user_scaling_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1651
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):
 *         self._ptr.FontAllowUserScaling = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FontAllowUserScaling = __pyx_v_value;

  /* "core.pyx":1650
 * 
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontAllowUserScaling = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1654
 * 
 *     @property
 *     def display_fb_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_16display_fb_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_16display_fb_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_16display_fb_scale___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_16display_fb_scale___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1655
 *     @property
 *     def display_fb_scale(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)             # <<<<<<<<<<<<<<
 * 
 *     @display_fb_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayFramebufferScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1654
 * 
 *     @property
 *     def display_fb_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.display_fb_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1658
 * 
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_16display_fb_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_3_IO_16display_fb_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_16display_fb_scale_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_16display_fb_scale_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1659
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1659, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayFramebufferScale = __pyx_t_1;

  /* "core.pyx":1658
 * 
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.display_fb_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1662
 * 
 *     @property
 *     def display_visible_min(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_19display_visible_min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_19display_visible_min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_19display_visible_min___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_19display_visible_min___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1663
 *     @property
 *     def display_visible_min(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)             # <<<<<<<<<<<<<<
 * 
 *     @display_visible_min.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayVisibleMin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1662
 * 
 *     @property
 *     def display_visible_min(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.display_visible_min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1666
 * 
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_19display_visible_min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_3_IO_19display_visible_min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_19display_visible_min_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_19display_visible_min_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1667
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1667, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayVisibleMin = __pyx_t_1;

  /* "core.pyx":1666
 * 
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.display_visible_min.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1670
 * 
 *     @property
 *     def display_visible_max(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_19display_visible_max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_19display_visible_max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_19display_visible_max___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_19display_visible_max___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1671
 *     @property
 *     def display_visible_max(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)             # <<<<<<<<<<<<<<
 * 
 *     @display_visible_max.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayVisibleMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1670
 * 
 *     @property
 *     def display_visible_max(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.display_visible_max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1674
 * 
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_19display_visible_max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_3_IO_19display_visible_max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_19display_visible_max_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_19display_visible_max_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1675
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1675, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayVisibleMax = __pyx_t_1;

  /* "core.pyx":1674
 * 
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.display_visible_max.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1678
 * 
 *     @property
 *     def config_mac_osx_behaviors(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigMacOSXBehaviors
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_24config_mac_osx_behaviors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_24config_mac_osx_behaviors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_24config_mac_osx_behaviors___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_24config_mac_osx_behaviors___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1679
 *     @property
 *     def config_mac_osx_behaviors(self):
 *         return self._ptr.ConfigMacOSXBehaviors             # <<<<<<<<<<<<<<
 * 
 *     @config_mac_osx_behaviors.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->ConfigMacOSXBehaviors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1678
 * 
 *     @property
 *     def config_mac_osx_behaviors(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigMacOSXBehaviors
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.config_mac_osx_behaviors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1682
 * 
 *     @config_mac_osx_behaviors.setter
 *     def config_mac_osx_behaviors(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigMacOSXBehaviors = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_24config_mac_osx_behaviors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_24config_mac_osx_behaviors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1682, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.config_mac_osx_behaviors.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_24config_mac_osx_behaviors_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_24config_mac_osx_behaviors_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1683
 *     @config_mac_osx_behaviors.setter
 *     def config_mac_osx_behaviors(self, cimgui.bool value):
 *         self._ptr.ConfigMacOSXBehaviors = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ConfigMacOSXBehaviors = __pyx_v_value;

  /* "core.pyx":1682
 * 
 *     @config_mac_osx_behaviors.setter
 *     def config_mac_osx_behaviors(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigMacOSXBehaviors = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1686
 * 
 *     @property
 *     def config_cursor_blink(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigInputTextCursorBlink
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_19config_cursor_blink_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_19config_cursor_blink_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_19config_cursor_blink___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_19config_cursor_blink___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1687
 *     @property
 *     def config_cursor_blink(self):
 *         return self._ptr.ConfigInputTextCursorBlink             # <<<<<<<<<<<<<<
 * 
 *     @config_cursor_blink.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->ConfigInputTextCursorBlink); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1686
 * 
 *     @property
 *     def config_cursor_blink(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigInputTextCursorBlink
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.config_cursor_blink.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1690
 * 
 *     @config_cursor_blink.setter
 *     def config_cursor_blink(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigInputTextCursorBlink = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_19config_cursor_blink_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_19config_cursor_blink_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1690, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.config_cursor_blink.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_19config_cursor_blink_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_19config_cursor_blink_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1691
 *     @config_cursor_blink.setter
 *     def config_cursor_blink(self, cimgui.bool value):
 *         self._ptr.ConfigInputTextCursorBlink = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->ConfigInputTextCursorBlink = __pyx_v_value;

  /* "core.pyx":1690
 * 
 *     @config_cursor_blink.setter
 *     def config_cursor_blink(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigInputTextCursorBlink = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1694
 * 
 *     @property
 *     def config_resize_windows_from_edges(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigResizeWindowsFromEdges
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_32config_resize_windows_from_edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_32config_resize_windows_from_edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_32config_resize_windows_from_edges___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_32config_resize_windows_from_edges___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1695
 *     @property
 *     def config_resize_windows_from_edges(self):
 *         return self._ptr.ConfigResizeWindowsFromEdges             # <<<<<<<<<<<<<<
 * 
 *     @config_resize_windows_from_edges.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->ConfigResizeWindowsFromEdges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1694
 * 
 *     @property
 *     def config_resize_windows_from_edges(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ConfigResizeWindowsFromEdges
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.config_resize_windows_from_edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1698
 * 
 *     @config_resize_windows_from_edges.setter
 *     def config_resize_windows_from_edges(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigResizeWindowsFromEdges = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_32config_resize_windows_from_edges_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_32config_resize_windows_from_edges_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1698, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.config_resize_windows_from_edges.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_32config_resize_windows_from_edges_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_32config_resize_windows_from_edges_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1699
 *     @config_resize_windows_from_edges.setter
 *     def config_resize_windows_from_edges(self, cimgui.bool value):
 *         self._ptr.ConfigResizeWindowsFromEdges = value             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->_ptr->ConfigResizeWindowsFromEdges = __pyx_v_value;

  /* "core.pyx":1698
 * 
 *     @config_resize_windows_from_edges.setter
 *     def config_resize_windows_from_edges(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.ConfigResizeWindowsFromEdges = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1702
 * 
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):             # <<<<<<<<<<<<<<
 *         text = _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:
 */

static char const *__pyx_f_4core_3_IO__get_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data) {
  PyObject *__pyx_v_text = NULL;
  char const *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  ImGuiContext *__pyx_t_3;
  uintptr_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  char const *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_clipboard_text", 0);

  /* "core.pyx":1703
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']()             # <<<<<<<<<<<<<<
 *         if type(text) is bytes:
 *             return text
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1703, __pyx_L1_error)
  }
  __pyx_t_4 = ((uintptr_t)__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_4, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_get_clipboard_text_fn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_text = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":1704
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:             # <<<<<<<<<<<<<<
 *             return text
 *         return _bytes(text)
 */
  __pyx_t_6 = (((PyObject *)Py_TYPE(__pyx_v_text)) == ((PyObject *)(&PyBytes_Type)));
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "core.pyx":1705
 *         text = _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:
 *             return text             # <<<<<<<<<<<<<<
 *         return _bytes(text)
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_text); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 1705, __pyx_L1_error)
    __pyx_r = __pyx_t_8;
    goto __pyx_L0;

    /* "core.pyx":1704
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:             # <<<<<<<<<<<<<<
 *             return text
 *         return _bytes(text)
 */
  }

  /* "core.pyx":1706
 *         if type(text) is bytes:
 *             return text
 *         return _bytes(text)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (!(likely(PyString_CheckExact(__pyx_v_text))||((__pyx_v_text) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_text)->tp_name), 0))) __PYX_ERR(0, 1706, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4core__bytes(((PyObject*)__pyx_v_text)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 1706, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 1706, __pyx_L1_error)
  __pyx_r = __pyx_t_8;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1702
 * 
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):             # <<<<<<<<<<<<<<
 *         text = _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("core._IO._get_clipboard_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1709
 * 
 *     @property
 *     def get_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_21get_clipboard_text_fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_21get_clipboard_text_fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_21get_clipboard_text_fn___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_21get_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImGuiContext *__pyx_t_2;
  uintptr_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1710
 *     @property
 *     def get_clipboard_text_fn(self):
 *         return _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']             # <<<<<<<<<<<<<<
 * 
 *     @get_clipboard_text_fn.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __pyx_t_3 = ((uintptr_t)__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_3, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_get_clipboard_text_fn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1709
 * 
 *     @property
 *     def get_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn']
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core._IO.get_clipboard_text_fn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1713
 * 
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn'] = func
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_21get_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func); /*proto*/
static int __pyx_pw_4core_3_IO_21get_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_21get_clipboard_text_fn_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_21get_clipboard_text_fn_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ImGuiContext *__pyx_t_4;
  uintptr_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char const *(*__pyx_t_7)(void *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1714
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn'] = func
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_func); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1714, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "core.pyx":1715
 *     def get_clipboard_text_fn(self, func):
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn'] = func             # <<<<<<<<<<<<<<
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = ImGui::GetCurrentContext();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1715, __pyx_L1_error)
    }
    __pyx_t_5 = ((uintptr_t)__pyx_t_4);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_5, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_n_s_get_clipboard_text_fn, __pyx_v_func) < 0)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "core.pyx":1716
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn'] = func
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_4core__IO *)__pyx_v_self->__pyx_vtab)->_get_clipboard_text;
    __pyx_v_self->_ptr->GetClipboardTextFn = __pyx_t_7;

    /* "core.pyx":1714
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn'] = func
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 */
    goto __pyx_L3;
  }

  /* "core.pyx":1718
 *             self._ptr.GetClipboardTextFn = self._get_clipboard_text
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_func); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_func_is_not_a_callable_s, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1718, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "core.pyx":1713
 * 
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_get_clipboard_text_fn'] = func
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core._IO.get_clipboard_text_fn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1721
 * 
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):             # <<<<<<<<<<<<<<
 *         _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))
 * 
 */

static void __pyx_f_4core_3_IO__set_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data, char const *__pyx_v_text) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  ImGuiContext *__pyx_t_3;
  uintptr_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_clipboard_text", 0);

  /* "core.pyx":1722
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):
 *         _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1722, __pyx_L1_error)
  }
  __pyx_t_4 = ((uintptr_t)__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_4, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_set_clipboard_text_fn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_f_4core__from_bytes(((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1721
 * 
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):             # <<<<<<<<<<<<<<
 *         _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("core._IO._set_clipboard_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "core.pyx":1725
 * 
 *     @property
 *     def set_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn']
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_21set_clipboard_text_fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_21set_clipboard_text_fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_21set_clipboard_text_fn___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_21set_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImGuiContext *__pyx_t_2;
  uintptr_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1726
 *     @property
 *     def set_clipboard_text_fn(self):
 *         return _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn']             # <<<<<<<<<<<<<<
 * 
 *     @set_clipboard_text_fn.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1726, __pyx_L1_error)
  }
  __pyx_t_3 = ((uintptr_t)__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_3, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_set_clipboard_text_fn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1725
 * 
 *     @property
 *     def set_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn']
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core._IO.set_clipboard_text_fn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1729
 * 
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'] = func
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_21set_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func); /*proto*/
static int __pyx_pw_4core_3_IO_21set_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_21set_clipboard_text_fn_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_21set_clipboard_text_fn_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ImGuiContext *__pyx_t_4;
  uintptr_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  void (*__pyx_t_7)(void *, char const *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1730
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'] = func
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_func); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1730, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "core.pyx":1731
 *     def set_clipboard_text_fn(self, func):
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'] = func             # <<<<<<<<<<<<<<
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = ImGui::GetCurrentContext();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1731, __pyx_L1_error)
    }
    __pyx_t_5 = ((uintptr_t)__pyx_t_4);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_5, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_n_s_set_clipboard_text_fn, __pyx_v_func) < 0)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "core.pyx":1732
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'] = func
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_4core__IO *)__pyx_v_self->__pyx_vtab)->_set_clipboard_text;
    __pyx_v_self->_ptr->SetClipboardTextFn = __pyx_t_7;

    /* "core.pyx":1730
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'] = func
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 */
    goto __pyx_L3;
  }

  /* "core.pyx":1734
 *             self._ptr.SetClipboardTextFn = self._set_clipboard_text
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(func))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_func); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_func_is_not_a_callable_s, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1734, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "core.pyx":1729
 * 
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, func):             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             _io_clipboard[<uintptr_t>cimgui.GetCurrentContext()]['_set_clipboard_text_fn'] = func
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core._IO.set_clipboard_text_fn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1737
 * 
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_9mouse_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_9mouse_pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_9mouse_pos___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_9mouse_pos___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1738
 *     @property
 *     def mouse_pos(self):
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)             # <<<<<<<<<<<<<<
 * 
 *     @mouse_pos.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->MousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1737
 * 
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1741
 * 
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_3_IO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_9mouse_pos_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_9mouse_pos_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1742
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1742, __pyx_L1_error)
  __pyx_v_self->_ptr->MousePos = __pyx_t_1;

  /* "core.pyx":1741
 * 
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.mouse_pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1745
 * 
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_10mouse_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_10mouse_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_10mouse_down___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_10mouse_down___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_mouse_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1749
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__25) < 0) __PYX_ERR(0, 1749, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_b) < 0) __PYX_ERR(0, 1749, __pyx_L1_error)

  /* "core.pyx":1751
 *             shape=(5,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 1749, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":1752
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 1749, __pyx_L1_error)

  /* "core.pyx":1748
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(5,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mouse_down = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1754
 *             allocate_buffer=False
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown             # <<<<<<<<<<<<<<
 *         return mouse_down
 * 
 */
  __pyx_v_mouse_down->data = ((char *)__pyx_v_self->_ptr->MouseDown);

  /* "core.pyx":1755
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown
 *         return mouse_down             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mouse_down));
  __pyx_r = ((PyObject *)__pyx_v_mouse_down);
  goto __pyx_L0;

  /* "core.pyx":1745
 * 
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._IO.mouse_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mouse_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1758
 * 
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheel
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_11mouse_wheel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_11mouse_wheel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_11mouse_wheel___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_11mouse_wheel___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1759
 *     @property
 *     def mouse_wheel(self):
 *         return self._ptr.MouseWheel             # <<<<<<<<<<<<<<
 * 
 *     @mouse_wheel.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseWheel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1758
 * 
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheel
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_wheel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1762
 * 
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheel = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1762, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.mouse_wheel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_11mouse_wheel_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_11mouse_wheel_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1763
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):
 *         self._ptr.MouseWheel = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseWheel = __pyx_v_value;

  /* "core.pyx":1762
 * 
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheel = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1766
 * 
 *     @property
 *     def mouse_wheel_horizontal(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheelH
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_22mouse_wheel_horizontal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_22mouse_wheel_horizontal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_22mouse_wheel_horizontal___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_22mouse_wheel_horizontal___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1767
 *     @property
 *     def mouse_wheel_horizontal(self):
 *         return self._ptr.MouseWheelH             # <<<<<<<<<<<<<<
 * 
 *     @mouse_wheel_horizontal.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseWheelH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1766
 * 
 *     @property
 *     def mouse_wheel_horizontal(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheelH
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_wheel_horizontal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1770
 * 
 *     @mouse_wheel_horizontal.setter
 *     def mouse_wheel_horizontal(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheelH = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_22mouse_wheel_horizontal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_22mouse_wheel_horizontal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1770, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.mouse_wheel_horizontal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_22mouse_wheel_horizontal_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_22mouse_wheel_horizontal_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1771
 *     @mouse_wheel_horizontal.setter
 *     def mouse_wheel_horizontal(self, float value):
 *         self._ptr.MouseWheelH = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseWheelH = __pyx_v_value;

  /* "core.pyx":1770
 * 
 *     @mouse_wheel_horizontal.setter
 *     def mouse_wheel_horizontal(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheelH = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1774
 * 
 *     @property
 *     def mouse_draw_cursor(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDrawCursor
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_17mouse_draw_cursor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_17mouse_draw_cursor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_17mouse_draw_cursor___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_17mouse_draw_cursor___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1775
 *     @property
 *     def mouse_draw_cursor(self):
 *         return self._ptr.MouseDrawCursor             # <<<<<<<<<<<<<<
 * 
 *     @mouse_draw_cursor.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->MouseDrawCursor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1774
 * 
 *     @property
 *     def mouse_draw_cursor(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDrawCursor
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_draw_cursor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1778
 * 
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDrawCursor = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_17mouse_draw_cursor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_17mouse_draw_cursor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1778, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.mouse_draw_cursor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_17mouse_draw_cursor_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_17mouse_draw_cursor_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1779
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):
 *         self._ptr.MouseDrawCursor = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDrawCursor = __pyx_v_value;

  /* "core.pyx":1778
 * 
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDrawCursor = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1782
 * 
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyCtrl
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_8key_ctrl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_8key_ctrl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_8key_ctrl___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_8key_ctrl___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1783
 *     @property
 *     def key_ctrl(self):
 *         return self._ptr.KeyCtrl             # <<<<<<<<<<<<<<
 * 
 *     @key_ctrl.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyCtrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1782
 * 
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyCtrl
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.key_ctrl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1786
 * 
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyCtrl = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1786, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.key_ctrl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_8key_ctrl_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_8key_ctrl_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1787
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):
 *         self._ptr.KeyCtrl = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyCtrl = __pyx_v_value;

  /* "core.pyx":1786
 * 
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyCtrl = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1790
 * 
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyShift
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_9key_shift_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_9key_shift_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_9key_shift___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_9key_shift___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1791
 *     @property
 *     def key_shift(self):
 *         return self._ptr.KeyShift             # <<<<<<<<<<<<<<
 * 
 *     @key_shift.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyShift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1790
 * 
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyShift
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.key_shift.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1794
 * 
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyShift = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1794, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.key_shift.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_9key_shift_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_9key_shift_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1795
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):
 *         self._ptr.KeyShift = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyShift = __pyx_v_value;

  /* "core.pyx":1794
 * 
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyShift = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1798
 * 
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyAlt
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_7key_alt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_7key_alt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_7key_alt___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_7key_alt___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1799
 *     @property
 *     def key_alt(self):
 *         return self._ptr.KeyAlt             # <<<<<<<<<<<<<<
 * 
 *     @key_alt.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1798
 * 
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyAlt
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.key_alt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1802
 * 
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyAlt = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1802, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.key_alt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_7key_alt_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_7key_alt_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1803
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):
 *         self._ptr.KeyAlt = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyAlt = __pyx_v_value;

  /* "core.pyx":1802
 * 
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyAlt = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1806
 * 
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeySuper
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_9key_super_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_9key_super_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_9key_super___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_9key_super___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1807
 *     @property
 *     def key_super(self):
 *         return self._ptr.KeySuper             # <<<<<<<<<<<<<<
 * 
 *     @key_super.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeySuper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1806
 * 
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeySuper
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.key_super.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1810
 * 
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeySuper = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_3_IO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_3_IO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1810, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.key_super.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_9key_super_2__set__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_3_IO_9key_super_2__set__(struct __pyx_obj_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":1811
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):
 *         self._ptr.KeySuper = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeySuper = __pyx_v_value;

  /* "core.pyx":1810
 * 
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeySuper = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1814
 * 
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_9keys_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_9keys_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_9keys_down___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_9keys_down___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_keys_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1818
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__26) < 0) __PYX_ERR(0, 1818, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_b) < 0) __PYX_ERR(0, 1818, __pyx_L1_error)

  /* "core.pyx":1820
 *             shape=(512,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":1821
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 1818, __pyx_L1_error)

  /* "core.pyx":1817
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(512,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_keys_down = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1823
 *             allocate_buffer=False
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown             # <<<<<<<<<<<<<<
 *         return keys_down
 * 
 */
  __pyx_v_keys_down->data = ((char *)__pyx_v_self->_ptr->KeysDown);

  /* "core.pyx":1824
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown
 *         return keys_down             # <<<<<<<<<<<<<<
 * 
 *     def add_input_character(self, cimgui.ImWchar c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_keys_down));
  __pyx_r = ((PyObject *)__pyx_v_keys_down);
  goto __pyx_L0;

  /* "core.pyx":1814
 * 
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._IO.keys_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_keys_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1826
 *         return keys_down
 * 
 *     def add_input_character(self, cimgui.ImWchar c):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharacter(c)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_arg_c); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_arg_c) {
  ImWchar __pyx_v_c;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_character (wrapper)", 0);
  assert(__pyx_arg_c); {
    __pyx_v_c = __Pyx_PyInt_As_ImWchar(__pyx_arg_c); if (unlikely((__pyx_v_c == ((ImWchar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1826, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._IO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_3_IO_2add_input_character(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((ImWchar)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_2add_input_character(struct __pyx_obj_4core__IO *__pyx_v_self, ImWchar __pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_input_character", 0);

  /* "core.pyx":1827
 * 
 *     def add_input_character(self, cimgui.ImWchar c):
 *         self._ptr.AddInputCharacter(c)             # <<<<<<<<<<<<<<
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):
 */
  try {
    __pyx_v_self->_ptr->AddInputCharacter(__pyx_v_c);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1827, __pyx_L1_error)
  }

  /* "core.pyx":1826
 *         return keys_down
 * 
 *     def add_input_character(self, cimgui.ImWchar c):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharacter(c)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1829
 *         self._ptr.AddInputCharacter(c)
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_5add_input_characters_utf8(PyObject *__pyx_v_self, PyObject *__pyx_v_utf8_chars); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_5add_input_characters_utf8(PyObject *__pyx_v_self, PyObject *__pyx_v_utf8_chars) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_characters_utf8 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_utf8_chars), (&PyString_Type), 1, "utf8_chars", 1))) __PYX_ERR(0, 1829, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_3_IO_4add_input_characters_utf8(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject*)__pyx_v_utf8_chars));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_4add_input_characters_utf8(struct __pyx_obj_4core__IO *__pyx_v_self, PyObject *__pyx_v_utf8_chars) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_input_characters_utf8", 0);

  /* "core.pyx":1830
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))             # <<<<<<<<<<<<<<
 * 
 *     def clear_input_characters(self):
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_utf8_chars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 1830, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1830, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->AddInputCharactersUTF8(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1830, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":1829
 *         self._ptr.AddInputCharacter(c)
 * 
 *     def add_input_characters_utf8(self, str utf8_chars):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.add_input_characters_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1832
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 *     def clear_input_characters(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputCharacters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_7clear_input_characters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_7clear_input_characters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_input_characters (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_6clear_input_characters(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_6clear_input_characters(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_input_characters", 0);

  /* "core.pyx":1833
 * 
 *     def clear_input_characters(self):
 *         self._ptr.ClearInputCharacters()             # <<<<<<<<<<<<<<
 * 
 *     # ... mapping of output properties ...
 */
  try {
    __pyx_v_self->_ptr->ClearInputCharacters();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1833, __pyx_L1_error)
  }

  /* "core.pyx":1832
 *         self._ptr.AddInputCharactersUTF8(_bytes(utf8_chars))
 * 
 *     def clear_input_characters(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputCharacters()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._IO.clear_input_characters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1837
 *     # ... mapping of output properties ...
 *     @property
 *     def want_capture_mouse(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureMouse
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_18want_capture_mouse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_18want_capture_mouse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_18want_capture_mouse___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_18want_capture_mouse___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1838
 *     @property
 *     def want_capture_mouse(self):
 *         return self._ptr.WantCaptureMouse             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantCaptureMouse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1837
 *     # ... mapping of output properties ...
 *     @property
 *     def want_capture_mouse(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureMouse
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.want_capture_mouse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1841
 * 
 *     @property
 *     def want_capture_keyboard(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureKeyboard
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_21want_capture_keyboard_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_21want_capture_keyboard_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_21want_capture_keyboard___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_21want_capture_keyboard___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1842
 *     @property
 *     def want_capture_keyboard(self):
 *         return self._ptr.WantCaptureKeyboard             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantCaptureKeyboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1841
 * 
 *     @property
 *     def want_capture_keyboard(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureKeyboard
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.want_capture_keyboard.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1845
 * 
 *     @property
 *     def want_text_input(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantTextInput
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_15want_text_input_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_15want_text_input_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_15want_text_input___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_15want_text_input___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1846
 *     @property
 *     def want_text_input(self):
 *         return self._ptr.WantTextInput             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantTextInput); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1845
 * 
 *     @property
 *     def want_text_input(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantTextInput
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.want_text_input.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1849
 * 
 *     @property
 *     def want_set_mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSetMousePos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_18want_set_mouse_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_18want_set_mouse_pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_18want_set_mouse_pos___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_18want_set_mouse_pos___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1850
 *     @property
 *     def want_set_mouse_pos(self):
 *         return self._ptr.WantSetMousePos             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantSetMousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1849
 * 
 *     @property
 *     def want_set_mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSetMousePos
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.want_set_mouse_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1853
 * 
 *     @property
 *     def want_save_ini_setting(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSaveIniSettings
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_21want_save_ini_setting_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_21want_save_ini_setting_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_21want_save_ini_setting___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_21want_save_ini_setting___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1854
 *     @property
 *     def want_save_ini_setting(self):
 *         return self._ptr.WantSaveIniSettings             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantSaveIniSettings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1853
 * 
 *     @property
 *     def want_save_ini_setting(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantSaveIniSettings
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.want_save_ini_setting.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1857
 * 
 *     @property
 *     def nav_active(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavActive
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_10nav_active_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_10nav_active_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_10nav_active___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_10nav_active___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1858
 *     @property
 *     def nav_active(self):
 *         return self._ptr.NavActive             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->NavActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1857
 * 
 *     @property
 *     def nav_active(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavActive
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.nav_active.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1861
 * 
 *     @property
 *     def nav_visible(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavVisible
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_11nav_visible_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_11nav_visible_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_11nav_visible___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_11nav_visible___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1862
 *     @property
 *     def nav_visible(self):
 *         return self._ptr.NavVisible             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->NavVisible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1861
 * 
 *     @property
 *     def nav_visible(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.NavVisible
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.nav_visible.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1865
 * 
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.Framerate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_9framerate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_9framerate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_9framerate___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_9framerate___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1866
 *     @property
 *     def framerate(self):
 *         return self._ptr.Framerate             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->Framerate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1865
 * 
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.Framerate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.framerate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1869
 * 
 *     @property
 *     def metrics_render_vertices(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsRenderVertices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_23metrics_render_vertices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_23metrics_render_vertices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_23metrics_render_vertices___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_23metrics_render_vertices___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1870
 *     @property
 *     def metrics_render_vertices(self):
 *         return self._ptr.MetricsRenderVertices             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsRenderVertices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1869
 * 
 *     @property
 *     def metrics_render_vertices(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsRenderVertices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.metrics_render_vertices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1873
 * 
 *     @property
 *     def metrics_active_windows(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsActiveWindows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_22metrics_active_windows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_22metrics_active_windows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_22metrics_active_windows___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_22metrics_active_windows___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1874
 *     @property
 *     def metrics_active_windows(self):
 *         return self._ptr.MetricsActiveWindows             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsActiveWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1873
 * 
 *     @property
 *     def metrics_active_windows(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsActiveWindows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.metrics_active_windows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1877
 * 
 *     @property
 *     def mouse_delta(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_11mouse_delta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_11mouse_delta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_11mouse_delta___get__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_11mouse_delta___get__(struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":1878
 *     @property
 *     def mouse_delta(self):
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)             # <<<<<<<<<<<<<<
 * 
 * _io_clipboard = {}
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->MouseDelta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1877
 * 
 *     @property
 *     def mouse_delta(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MouseDelta)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.mouse_delta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_8__reduce_cython__(((struct __pyx_obj_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_IO_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4core_3_IO_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_3_IO_10__setstate_cython__(((struct __pyx_obj_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_3_IO_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core__IO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._IO.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1881
 * 
 * _io_clipboard = {}
 * def get_io():             # <<<<<<<<<<<<<<
 *     return _IO()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_1get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_1get_io = {"get_io", (PyCFunction)__pyx_pw_4core_1get_io, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_1get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_io (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_get_io(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_get_io(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_io", 0);

  /* "core.pyx":1882
 * _io_clipboard = {}
 * def get_io():
 *     return _IO()             # <<<<<<<<<<<<<<
 * 
 * def get_style():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4core__IO)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":1881
 * 
 * _io_clipboard = {}
 * def get_io():             # <<<<<<<<<<<<<<
 *     return _IO()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1884
 *     return _IO()
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     return GuiStyle.from_ref(cimgui.GetStyle())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3get_style(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_3get_style = {"get_style", (PyCFunction)__pyx_pw_4core_3get_style, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_3get_style(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_2get_style(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_2get_style(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<ImGuiStyle> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style", 0);

  /* "core.pyx":1885
 * 
 * def get_style():
 *     return GuiStyle.from_ref(cimgui.GetStyle())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetStyle();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1885, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)__pyx_f_4core_8GuiStyle_from_ref(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1884
 *     return _IO()
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     return GuiStyle.from_ref(cimgui.GetStyle())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_style", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1888
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_5new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_5new_frame = {"new_frame", (PyCFunction)__pyx_pw_4core_5new_frame, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_5new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_4new_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_4new_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_frame", 0);

  /* "core.pyx":1897
 *         void NewFrame()
 *     """
 *     cimgui.NewFrame()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NewFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1897, __pyx_L1_error)
  }

  /* "core.pyx":1888
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.new_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1900
 * 
 * 
 * def end_frame():             # <<<<<<<<<<<<<<
 *     """End a frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7end_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_7end_frame = {"end_frame", (PyCFunction)__pyx_pw_4core_7end_frame, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_7end_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6end_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6end_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_frame", 0);

  /* "core.pyx":1912
 *         void EndFrame()
 *     """
 *     cimgui.EndFrame()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1912, __pyx_L1_error)
  }

  /* "core.pyx":1900
 * 
 * 
 * def end_frame():             # <<<<<<<<<<<<<<
 *     """End a frame.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1915
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_9render = {"render", (PyCFunction)__pyx_pw_4core_9render, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_9render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8render(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8render(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("render", 0);

  /* "core.pyx":1921
 *         void Render()
 *     """
 *     cimgui.Render()             # <<<<<<<<<<<<<<
 * 
 * def show_user_guide():
 */
  try {
    ImGui::Render();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1921, __pyx_L1_error)
  }

  /* "core.pyx":1915
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1923
 *     cimgui.Render()
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_11show_user_guide = {"show_user_guide", (PyCFunction)__pyx_pw_4core_11show_user_guide, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_11show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_user_guide (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10show_user_guide(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10show_user_guide(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_user_guide", 0);

  /* "core.pyx":1939
 *         void ShowUserGuide()
 *     """
 *     cimgui.ShowUserGuide()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ShowUserGuide();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1939, __pyx_L1_error)
  }

  /* "core.pyx":1923
 *     cimgui.Render()
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.show_user_guide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1942
 * 
 * 
 * def get_version():             # <<<<<<<<<<<<<<
 *     """Get the version of Dear ImGui.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_13get_version = {"get_version", (PyCFunction)__pyx_pw_4core_13get_version, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_13get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_version (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12get_version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12get_version(CYTHON_UNUSED PyObject *__pyx_self) {
  char const *__pyx_v_c_string;
  CYTHON_UNUSED PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_version", 0);

  /* "core.pyx":1948
 *         void GetVersion()
 *     """
 *     cdef const char* c_string = cimgui.GetVersion()             # <<<<<<<<<<<<<<
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")
 */
  try {
    __pyx_t_1 = ImGui::GetVersion();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1948, __pyx_L1_error)
  }
  __pyx_v_c_string = __pyx_t_1;

  /* "core.pyx":1949
 *     """
 *     cdef const char* c_string = cimgui.GetVersion()
 *     cdef bytes py_string = c_string             # <<<<<<<<<<<<<<
 *     return c_string.decode("utf-8")
 * 
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_string = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":1950
 *     cdef const char* c_string = cimgui.GetVersion()
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1942
 * 
 * 
 * def get_version():             # <<<<<<<<<<<<<<
 *     """Get the version of Dear ImGui.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1953
 * 
 * 
 * def style_colors_dark(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Dark.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15style_colors_dark(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_15style_colors_dark = {"style_colors_dark", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_15style_colors_dark, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_15style_colors_dark(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_GuiStyle *__pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("style_colors_dark (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dst,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "style_colors_dark") < 0)) __PYX_ERR(0, 1953, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dst = ((struct __pyx_obj_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("style_colors_dark", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1953, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.style_colors_dark", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_4core_GuiStyle, 1, "dst", 0))) __PYX_ERR(0, 1953, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_14style_colors_dark(__pyx_self, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14style_colors_dark(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_dst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("style_colors_dark", 0);

  /* "core.pyx":1961
 *         void StyleColorsDark(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsDark(dst._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dst)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1961, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":1962
 *     """
 *     if dst:
 *         cimgui.StyleColorsDark(dst._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.StyleColorsDark(NULL)
 */
    try {
      ImGui::StyleColorsDark(__pyx_v_dst->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1962, __pyx_L1_error)
    }

    /* "core.pyx":1961
 *         void StyleColorsDark(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsDark(dst._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":1964
 *         cimgui.StyleColorsDark(dst._ptr)
 *     else:
 *         cimgui.StyleColorsDark(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::StyleColorsDark(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1964, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":1953
 * 
 * 
 * def style_colors_dark(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Dark.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.style_colors_dark", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1967
 * 
 * 
 * def style_colors_classic(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Classic.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_17style_colors_classic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_17style_colors_classic = {"style_colors_classic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_17style_colors_classic, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_17style_colors_classic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_GuiStyle *__pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("style_colors_classic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dst,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "style_colors_classic") < 0)) __PYX_ERR(0, 1967, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dst = ((struct __pyx_obj_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("style_colors_classic", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1967, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.style_colors_classic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_4core_GuiStyle, 1, "dst", 0))) __PYX_ERR(0, 1967, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_16style_colors_classic(__pyx_self, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16style_colors_classic(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_dst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("style_colors_classic", 0);

  /* "core.pyx":1975
 *         void StyleColorsClassic(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsClassic(dst._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dst)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1975, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":1976
 *     """
 *     if dst:
 *         cimgui.StyleColorsClassic(dst._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.StyleColorsClassic(NULL)
 */
    try {
      ImGui::StyleColorsClassic(__pyx_v_dst->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1976, __pyx_L1_error)
    }

    /* "core.pyx":1975
 *         void StyleColorsClassic(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsClassic(dst._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":1978
 *         cimgui.StyleColorsClassic(dst._ptr)
 *     else:
 *         cimgui.StyleColorsClassic(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::StyleColorsClassic(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1978, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":1967
 * 
 * 
 * def style_colors_classic(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Classic.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.style_colors_classic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1982
 * 
 * 
 * def style_colors_light(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Light.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19style_colors_light(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_19style_colors_light = {"style_colors_light", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_19style_colors_light, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_19style_colors_light(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_GuiStyle *__pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("style_colors_light (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dst,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "style_colors_light") < 0)) __PYX_ERR(0, 1982, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dst = ((struct __pyx_obj_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("style_colors_light", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1982, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.style_colors_light", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_4core_GuiStyle, 1, "dst", 0))) __PYX_ERR(0, 1982, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_18style_colors_light(__pyx_self, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18style_colors_light(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_dst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("style_colors_light", 0);

  /* "core.pyx":1990
 *         void StyleColorsLight(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsLight(dst._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dst)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":1991
 *     """
 *     if dst:
 *         cimgui.StyleColorsLight(dst._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.StyleColorsLight(NULL)
 */
    try {
      ImGui::StyleColorsLight(__pyx_v_dst->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1991, __pyx_L1_error)
    }

    /* "core.pyx":1990
 *         void StyleColorsLight(ImGuiStyle* dst = NULL)
 *     """
 *     if dst:             # <<<<<<<<<<<<<<
 *         cimgui.StyleColorsLight(dst._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":1993
 *         cimgui.StyleColorsLight(dst._ptr)
 *     else:
 *         cimgui.StyleColorsLight(NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::StyleColorsLight(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1993, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":1982
 * 
 * 
 * def style_colors_light(GuiStyle dst = None):             # <<<<<<<<<<<<<<
 *     """Set the style to Light.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.style_colors_light", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1996
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_21show_style_editor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_21show_style_editor = {"show_style_editor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_21show_style_editor, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_21show_style_editor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_GuiStyle *__pyx_v_style = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_style_editor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_style,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_style);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_style_editor") < 0)) __PYX_ERR(0, 1996, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_style = ((struct __pyx_obj_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_style_editor", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1996, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.show_style_editor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_style), __pyx_ptype_4core_GuiStyle, 1, "style", 0))) __PYX_ERR(0, 1996, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_20show_style_editor(__pyx_self, __pyx_v_style);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20show_style_editor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_GuiStyle *__pyx_v_style) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_style_editor", 0);

  /* "core.pyx":2014
 *         void ShowStyleEditor(ImGuiStyle* ref = NULL)
 *     """
 *     if style:             # <<<<<<<<<<<<<<
 *         cimgui.ShowStyleEditor(style._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_style)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2014, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":2015
 *     """
 *     if style:
 *         cimgui.ShowStyleEditor(style._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowStyleEditor()
 */
    try {
      ImGui::ShowStyleEditor(__pyx_v_style->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2015, __pyx_L1_error)
    }

    /* "core.pyx":2014
 *         void ShowStyleEditor(ImGuiStyle* ref = NULL)
 *     """
 *     if style:             # <<<<<<<<<<<<<<
 *         cimgui.ShowStyleEditor(style._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":2017
 *         cimgui.ShowStyleEditor(style._ptr)
 *     else:
 *         cimgui.ShowStyleEditor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::ShowStyleEditor();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2017, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":1996
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.show_style_editor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2020
 * 
 * 
 * def show_demo_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_23show_demo_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_23show_demo_window = {"show_demo_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_23show_demo_window, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_23show_demo_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_closable = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_demo_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_demo_window") < 0)) __PYX_ERR(0, 2020, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_closable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_demo_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2020, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.show_demo_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_22show_demo_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_22show_demo_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_demo_window", 0);

  /* "core.pyx":2039
 *         void ShowDemoWindow(bool* p_open = NULL)
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     if closable:
 */
  __pyx_v_opened = 1;

  /* "core.pyx":2041
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowDemoWindow(&opened)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2041, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":2042
 * 
 *     if closable:
 *         cimgui.ShowDemoWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowDemoWindow()
 */
    try {
      ImGui::ShowDemoWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2042, __pyx_L1_error)
    }

    /* "core.pyx":2041
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowDemoWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":2044
 *         cimgui.ShowDemoWindow(&opened)
 *     else:
 *         cimgui.ShowDemoWindow()             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      ImGui::ShowDemoWindow();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2044, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":2046
 *         cimgui.ShowDemoWindow()
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2020
 * 
 * 
 * def show_demo_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.show_demo_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2049
 * 
 * 
 * def show_test_window():             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25show_test_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_25show_test_window = {"show_test_window", (PyCFunction)__pyx_pw_4core_25show_test_window, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_25show_test_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_test_window (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_24show_test_window(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_24show_test_window(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_test_window", 0);

  /* "core.pyx":2062
 *         void ShowDemoWindow()
 *     """
 *     cimgui.ShowDemoWindow()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ShowDemoWindow();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2062, __pyx_L1_error)
  }

  /* "core.pyx":2049
 * 
 * 
 * def show_test_window():             # <<<<<<<<<<<<<<
 *     """Show ImGui demo window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.show_test_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2066
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_27show_metrics_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_27show_metrics_window = {"show_metrics_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_27show_metrics_window, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_27show_metrics_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_closable = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_metrics_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_metrics_window") < 0)) __PYX_ERR(0, 2066, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_closable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_metrics_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2066, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.show_metrics_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_26show_metrics_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_26show_metrics_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_metrics_window", 0);

  /* "core.pyx":2085
 *         void ShowMetricsWindow(bool* p_open = NULL)
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     if closable:
 */
  __pyx_v_opened = 1;

  /* "core.pyx":2087
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2087, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":2088
 * 
 *     if closable:
 *         cimgui.ShowMetricsWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowMetricsWindow()
 */
    try {
      ImGui::ShowMetricsWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2088, __pyx_L1_error)
    }

    /* "core.pyx":2087
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":2090
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 *         cimgui.ShowMetricsWindow()             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      ImGui::ShowMetricsWindow();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2090, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":2092
 *         cimgui.ShowMetricsWindow()
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2066
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.show_metrics_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2095
 * 
 * 
 * def show_style_selector(str label):             # <<<<<<<<<<<<<<
 *     return cimgui.ShowStyleSelector(label)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_29show_style_selector(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static PyMethodDef __pyx_mdef_4core_29show_style_selector = {"show_style_selector", (PyCFunction)__pyx_pw_4core_29show_style_selector, METH_O, 0};
static PyObject *__pyx_pw_4core_29show_style_selector(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_style_selector (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2095, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_28show_style_selector(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_28show_style_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_style_selector", 0);

  /* "core.pyx":2096
 * 
 * def show_style_selector(str label):
 *     return cimgui.ShowStyleSelector(label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_label); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 2096, __pyx_L1_error)
  try {
    __pyx_t_2 = ImGui::ShowStyleSelector(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2096, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":2095
 * 
 * 
 * def show_style_selector(str label):             # <<<<<<<<<<<<<<
 *     return cimgui.ShowStyleSelector(label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.show_style_selector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2099
 * 
 * 
 * def show_font_selector(str label):             # <<<<<<<<<<<<<<
 *     cimgui.ShowStyleSelector(label)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_31show_font_selector(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static PyMethodDef __pyx_mdef_4core_31show_font_selector = {"show_font_selector", (PyCFunction)__pyx_pw_4core_31show_font_selector, METH_O, 0};
static PyObject *__pyx_pw_4core_31show_font_selector(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_font_selector (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2099, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_30show_font_selector(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_30show_font_selector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_font_selector", 0);

  /* "core.pyx":2100
 * 
 * def show_font_selector(str label):
 *     cimgui.ShowStyleSelector(label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_label); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 2100, __pyx_L1_error)
  try {
    ImGui::ShowStyleSelector(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2100, __pyx_L1_error)
  }

  /* "core.pyx":2099
 * 
 * 
 * def show_font_selector(str label):             # <<<<<<<<<<<<<<
 *     cimgui.ShowStyleSelector(label)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.show_font_selector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2103
 * 
 * 
 * def begin(str label, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_33begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_33begin = {"begin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_33begin, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_33begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_closable = 0;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_closable,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin") < 0)) __PYX_ERR(0, 2103, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_closable = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2103, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2103, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_32begin(__pyx_self, __pyx_v_label, __pyx_v_closable, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_32begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_closable, ImGuiWindowFlags __pyx_v_flags) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool *__pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin", 0);

  /* "core.pyx":2131
 *         )
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.Begin(_bytes(label), &opened if closable else NULL, flags), opened
 */
  __pyx_v_opened = 1;

  /* "core.pyx":2133
 *     cdef cimgui.bool opened = True
 * 
 *     return cimgui.Begin(_bytes(label), &opened if closable else NULL, flags), opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2133, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2133, __pyx_L1_error)
  if (__pyx_t_4) {
    __pyx_t_3 = (&__pyx_v_opened);
  } else {
    __pyx_t_3 = NULL;
  }
  try {
    __pyx_t_5 = ImGui::Begin(__pyx_t_2, __pyx_t_3, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2133, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":2103
 * 
 * 
 * def begin(str label, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2136
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_35get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_35get_draw_data = {"get_draw_data", (PyCFunction)__pyx_pw_4core_35get_draw_data, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_35get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_draw_data (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_34get_draw_data(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_34get_draw_data(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawData *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_draw_data", 0);

  /* "core.pyx":2148
 *         ImDrawData* GetDrawData()
 *     """
 *     return _DrawData.from_ptr(cimgui.GetDrawData())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetDrawData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2148, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_9_DrawData_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2136
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_draw_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2151
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_37end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_37end = {"end", (PyCFunction)__pyx_pw_4core_37end, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_37end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_36end(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_36end(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end", 0);

  /* "core.pyx":2160
 *         void End()
 *     """
 *     cimgui.End()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::End();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2160, __pyx_L1_error)
  }

  /* "core.pyx":2151
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2168
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_39begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_39begin_child = {"begin_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_39begin_child, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_39begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_signatures = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_signatures,&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = __pyx_k__29;
    values[2] = __pyx_k__30;
    values[3] = __pyx_k__31;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_signatures)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwargs);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_defaults);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 2168, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_signatures = values[0];
    __pyx_v_args = values[1];
    __pyx_v_kwargs = values[2];
    __pyx_v_defaults = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_38begin_child(__pyx_self, __pyx_v_signatures, __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_38begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults) {
  PyObject *__pyx_v_dest_sig = NULL;
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyTypeObject *__pyx_v_ndarray = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_sig = NULL;
  int __pyx_v_match_found;
  PyObject *__pyx_v_src_sig = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_child", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_None);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_4) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 2168, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2168, __pyx_L1_error)
  __pyx_t_2 = ((0 < __pyx_t_5) != 0);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2168, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_args), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2168, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_label, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2168, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2168, __pyx_L1_error)
    }
    __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2168, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
    __Pyx_INCREF(__pyx_kp_s__32);
    __Pyx_GIVEREF(__pyx_kp_s__32);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__32);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2168, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_2 = PyString_Check(__pyx_v_arg); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
      if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_str, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    __pyx_t_2 = PyInt_Check(__pyx_v_arg); 
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_4 = PyLong_Check(__pyx_v_arg); 
    __pyx_t_2 = (__pyx_t_4 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L13_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
      if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_ImGuiID, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_candidates = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_signatures == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2168, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __pyx_t_6 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_match_found = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_kp_s__33) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s__33);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_kp_s__34) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s__34);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_src_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_13 = PyList_GET_SIZE(__pyx_v_dest_sig); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2168, __pyx_L1_error)
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_i = __pyx_t_15;
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_dest_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = (__pyx_v_dst_type != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_src_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PyObject_RichCompare(__pyx_t_1, __pyx_v_dst_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2168, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (__pyx_t_3) {
          __pyx_v_match_found = 1;
          goto __pyx_L20;
        }
        /*else*/ {
          __pyx_v_match_found = 0;
          goto __pyx_L18_break;
        }
        __pyx_L20:;
      }
    }
    __pyx_L18_break:;
    __pyx_t_3 = (__pyx_v_match_found != 0);
    if (__pyx_t_3) {
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_candidates, __pyx_v_sig); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 2168, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2168, __pyx_L1_error)
  }
  __pyx_t_7 = PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2168, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_7 > 1) != 0);
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2168, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_signatures == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2168, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_candidates, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("core.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_src_sig);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_507__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_border); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_ImGuiWindowFlags(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_4core_498begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_4core_498begin_child = {"__pyx_fuse_0begin_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_4core_498begin_child, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_0__pyx_pw_4core_498begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  bool __pyx_v_border;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_border,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults2 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_child") < 0)) __PYX_ERR(0, 2168, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    } else {
      __pyx_v_width = __pyx_dynamic_args->__pyx_arg_width;
    }
    if (values[2]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    } else {
      __pyx_v_height = __pyx_dynamic_args->__pyx_arg_height;
    }
    if (values[3]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    } else {
      __pyx_v_border = __pyx_dynamic_args->__pyx_arg_border;
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2170, __pyx_L3_error)
    } else {
      __pyx_v_flags = __pyx_dynamic_args->__pyx_arg_flags;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_child", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2169, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_497begin_child(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_border, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_497begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0begin_child", 0);

  /* "core.pyx":2221
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":2222
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2222, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L1_error)

  /* "core.pyx":2221
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  try {
    __pyx_t_4 = ImGui::BeginChild(__pyx_t_2, __pyx_t_3, __pyx_v_border, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2221, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":2168
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_509__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_border); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_ImGuiWindowFlags(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_4core_500begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_4core_500begin_child = {"__pyx_fuse_1begin_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_4core_500begin_child, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_1__pyx_pw_4core_500begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiID __pyx_v_label;
  float __pyx_v_width;
  float __pyx_v_height;
  bool __pyx_v_border;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_border,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults3 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_child") < 0)) __PYX_ERR(0, 2168, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = __Pyx_PyInt_As_ImGuiID(values[0]); if (unlikely((__pyx_v_label == ((ImGuiID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    } else {
      __pyx_v_width = __pyx_dynamic_args->__pyx_arg_width;
    }
    if (values[2]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    } else {
      __pyx_v_height = __pyx_dynamic_args->__pyx_arg_height;
    }
    if (values[3]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2169, __pyx_L3_error)
    } else {
      __pyx_v_border = __pyx_dynamic_args->__pyx_arg_border;
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2170, __pyx_L3_error)
    } else {
      __pyx_v_flags = __pyx_dynamic_args->__pyx_arg_flags;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_child", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_499begin_child(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_border, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_499begin_child(CYTHON_UNUSED PyObject *__pyx_self, ImGuiID __pyx_v_label, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  ImVec2 __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1begin_child", 0);

  /* "core.pyx":2221
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":2222
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiID(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 2222, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_4core__bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2222, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L1_error)
  __pyx_t_4 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L1_error)

  /* "core.pyx":2221
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  try {
    __pyx_t_5 = ImGui::BeginChild(__pyx_t_3, __pyx_t_4, __pyx_v_border, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2221, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2168
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id label, float width = 0, float height = 0, bool border = False,
 *     cimgui.ImGuiWindowFlags flags = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2225
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_41end_child(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_41end_child = {"end_child", (PyCFunction)__pyx_pw_4core_41end_child, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_41end_child(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_child (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_40end_child(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_40end_child(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_child", 0);

  /* "core.pyx":2231
 *         void EndChild()
 *     """
 *     cimgui.EndChild()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndChild();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2231, __pyx_L1_error)
  }

  /* "core.pyx":2225
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2234
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_43get_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_43get_content_region_max = {"get_content_region_max", (PyCFunction)__pyx_pw_4core_43get_content_region_max, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_43get_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_max (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_42get_content_region_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_42get_content_region_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content_region_max", 0);

  /* "core.pyx":2246
 *         ImVec2 GetContentRegionMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetContentRegionMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2246, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2234
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_content_region_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2249
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_45get_content_region_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_45get_content_region_available = {"get_content_region_available", (PyCFunction)__pyx_pw_4core_45get_content_region_available, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_45get_content_region_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_available (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_44get_content_region_available(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_44get_content_region_available(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content_region_available", 0);

  /* "core.pyx":2263
 *         ImVec2 GetContentRegionMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetContentRegionAvail())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionAvail();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2263, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2249
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_content_region_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2266
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_47get_content_region_available_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_47get_content_region_available_width = {"get_content_region_available_width", (PyCFunction)__pyx_pw_4core_47get_content_region_available_width, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_47get_content_region_available_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_available_width (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_46get_content_region_available_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_46get_content_region_available_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content_region_available_width", 0);

  /* "core.pyx":2275
 *         float GetContentRegionAvailWidth()
 *     """
 *     return cimgui.GetContentRegionAvailWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionAvailWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2275, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2266
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_content_region_available_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2278
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_49get_window_content_region_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_49get_window_content_region_min = {"get_window_content_region_min", (PyCFunction)__pyx_pw_4core_49get_window_content_region_min, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_49get_window_content_region_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_min (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_48get_window_content_region_min(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_48get_window_content_region_min(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_content_region_min", 0);

  /* "core.pyx":2289
 *         ImVec2 GetWindowContentRegionMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowContentRegionMin())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionMin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2289, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2278
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_content_region_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2292
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_51get_window_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_51get_window_content_region_max = {"get_window_content_region_max", (PyCFunction)__pyx_pw_4core_51get_window_content_region_max, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_51get_window_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_max (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_50get_window_content_region_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_50get_window_content_region_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_content_region_max", 0);

  /* "core.pyx":2303
 *         ImVec2 GetWindowContentRegionMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowContentRegionMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2303, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2292
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_content_region_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2306
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_53get_window_content_region_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_53get_window_content_region_width = {"get_window_content_region_width", (PyCFunction)__pyx_pw_4core_53get_window_content_region_width, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_53get_window_content_region_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_width (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_52get_window_content_region_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_52get_window_content_region_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_content_region_width", 0);

  /* "core.pyx":2315
 *         float GetWindowContentRegionWidth()
 *     """
 *     return cimgui.GetWindowContentRegionWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2315, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2306
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_content_region_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2318
 * 
 * 
 * def set_window_focus():             # <<<<<<<<<<<<<<
 *     """Set window to be focused
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_55set_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_55set_window_focus = {"set_window_focus", (PyCFunction)__pyx_pw_4core_55set_window_focus, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_55set_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_54set_window_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_54set_window_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_focus", 0);

  /* "core.pyx":2337
 *         void SetWindowFocus()
 *     """
 *     cimgui.SetWindowFocus()             # <<<<<<<<<<<<<<
 * 
 * def set_window_focus_labeled(str label):
 */
  try {
    ImGui::SetWindowFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2337, __pyx_L1_error)
  }

  /* "core.pyx":2318
 * 
 * 
 * def set_window_focus():             # <<<<<<<<<<<<<<
 *     """Set window to be focused
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_window_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2339
 *     cimgui.SetWindowFocus()
 * 
 * def set_window_focus_labeled(str label):             # <<<<<<<<<<<<<<
 *     """Set focus to the window named label
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_57set_window_focus_labeled(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static PyMethodDef __pyx_mdef_4core_57set_window_focus_labeled = {"set_window_focus_labeled", (PyCFunction)__pyx_pw_4core_57set_window_focus_labeled, METH_O, 0};
static PyObject *__pyx_pw_4core_57set_window_focus_labeled(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_focus_labeled (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2339, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_56set_window_focus_labeled(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_56set_window_focus_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_focus_labeled", 0);

  /* "core.pyx":2368
 *         )
 *     """
 *     cimgui.SetWindowFocus(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * def set_window_size(
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2368, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2368, __pyx_L1_error)
  try {
    ImGui::SetWindowFocus(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2368, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":2339
 *     cimgui.SetWindowFocus()
 * 
 * def set_window_focus_labeled(str label):             # <<<<<<<<<<<<<<
 *     """Set focus to the window named label
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_window_focus_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2370
 *     cimgui.SetWindowFocus(_bytes(label))
 * 
 * def set_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):
 *     """Set window size
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_59set_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_59set_window_size = {"set_window_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_59set_window_size, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_59set_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_size", 0, 2, 3, 1); __PYX_ERR(0, 2370, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_size") < 0)) __PYX_ERR(0, 2370, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2371, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2371, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2371, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__37;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_size", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2370, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_58set_window_size(__pyx_self, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_58set_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_size", 0);

  /* "core.pyx":2400
 *         )
 *     """
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)             # <<<<<<<<<<<<<<
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2400, __pyx_L1_error)
  try {
    ImGui::SetWindowSize(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2400, __pyx_L1_error)
  }

  /* "core.pyx":2370
 *     cimgui.SetWindowFocus(_bytes(label))
 * 
 * def set_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ONCE):
 *     """Set window size
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2402
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):             # <<<<<<<<<<<<<<
 *     """Set the window with label to some size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_61set_window_size_named(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_61set_window_size_named = {"set_window_size_named", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_61set_window_size_named, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_61set_window_size_named(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_size_named (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_size_named", 0, 3, 4, 1); __PYX_ERR(0, 2402, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_size_named", 0, 3, 4, 2); __PYX_ERR(0, 2402, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_size_named") < 0)) __PYX_ERR(0, 2402, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2402, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2402, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[3]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2402, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__38;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_size_named", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2402, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_size_named", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2402, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_60set_window_size_named(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_60set_window_size_named(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_size_named", 0);

  /* "core.pyx":2433
 *     """
 *     cimgui.SetWindowSize(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height),
 *         condition
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2433, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2433, __pyx_L1_error)

  /* "core.pyx":2434
 *     cimgui.SetWindowSize(
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         condition
 *     )
 */
  __pyx_t_3 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2434, __pyx_L1_error)

  /* "core.pyx":2432
 *     )
 *     """
 *     cimgui.SetWindowSize(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height),
 */
  try {
    ImGui::SetWindowSize(__pyx_t_2, __pyx_t_3, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2432, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":2402
 *     cimgui.SetWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_window_size_named(str label, float width, float height, cimgui.ImGuiCond condition = ONCE):             # <<<<<<<<<<<<<<
 *     """Set the window with label to some size
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_window_size_named", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2438
 *     )
 * 
 * def get_scroll_x():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxX()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_63get_scroll_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_63get_scroll_x = {"get_scroll_x", (PyCFunction)__pyx_pw_4core_63get_scroll_x, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_63get_scroll_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_x (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_62get_scroll_x(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_62get_scroll_x(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_x", 0);

  /* "core.pyx":2447
 *         int GetScrollX()
 *     """
 *     return cimgui.GetScrollX()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollX();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2447, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2438
 *     )
 * 
 * def get_scroll_x():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxX()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_scroll_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2450
 * 
 * 
 * def get_scroll_y():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxY()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_65get_scroll_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_65get_scroll_y = {"get_scroll_y", (PyCFunction)__pyx_pw_4core_65get_scroll_y, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_65get_scroll_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_y (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_64get_scroll_y(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_64get_scroll_y(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_y", 0);

  /* "core.pyx":2459
 *         int GetScrollY()
 *     """
 *     return cimgui.GetScrollY()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollY();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2459, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2450
 * 
 * 
 * def get_scroll_y():             # <<<<<<<<<<<<<<
 *     """get scrolling amount [0..GetScrollMaxY()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_scroll_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2462
 * 
 * 
 * def get_scroll_max_x():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_67get_scroll_max_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_67get_scroll_max_x = {"get_scroll_max_x", (PyCFunction)__pyx_pw_4core_67get_scroll_max_x, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_67get_scroll_max_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_max_x (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_66get_scroll_max_x(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_66get_scroll_max_x(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_max_x", 0);

  /* "core.pyx":2471
 *         int GetScrollMaxX()
 *     """
 *     return cimgui.GetScrollMaxX()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollMaxX();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2471, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2462
 * 
 * 
 * def get_scroll_max_x():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_scroll_max_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2474
 * 
 * 
 * def get_scroll_max_y():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_69get_scroll_max_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_69get_scroll_max_y = {"get_scroll_max_y", (PyCFunction)__pyx_pw_4core_69get_scroll_max_y, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_69get_scroll_max_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scroll_max_y (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_68get_scroll_max_y(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_68get_scroll_max_y(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scroll_max_y", 0);

  /* "core.pyx":2483
 *         int GetScrollMaxY()
 *     """
 *     return cimgui.GetScrollMaxY()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetScrollMaxY();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2483, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2474
 * 
 * 
 * def get_scroll_max_y():             # <<<<<<<<<<<<<<
 *     """get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_scroll_max_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2486
 * 
 * 
 * def set_scroll_x(float scroll_x):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxX()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_71set_scroll_x(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_x); /*proto*/
static PyMethodDef __pyx_mdef_4core_71set_scroll_x = {"set_scroll_x", (PyCFunction)__pyx_pw_4core_71set_scroll_x, METH_O, 0};
static PyObject *__pyx_pw_4core_71set_scroll_x(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_x) {
  float __pyx_v_scroll_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_x (wrapper)", 0);
  assert(__pyx_arg_scroll_x); {
    __pyx_v_scroll_x = __pyx_PyFloat_AsFloat(__pyx_arg_scroll_x); if (unlikely((__pyx_v_scroll_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2486, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_scroll_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_70set_scroll_x(__pyx_self, ((float)__pyx_v_scroll_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_70set_scroll_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_x", 0);

  /* "core.pyx":2492
 *         int SetScrollX(float)
 *     """
 *     cimgui.SetScrollX(scroll_x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetScrollX(__pyx_v_scroll_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2492, __pyx_L1_error)
  }

  /* "core.pyx":2486
 * 
 * 
 * def set_scroll_x(float scroll_x):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxX()]
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_scroll_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2495
 * 
 * 
 * def set_scroll_y(float scroll_y):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxY()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_73set_scroll_y(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_y); /*proto*/
static PyMethodDef __pyx_mdef_4core_73set_scroll_y = {"set_scroll_y", (PyCFunction)__pyx_pw_4core_73set_scroll_y, METH_O, 0};
static PyObject *__pyx_pw_4core_73set_scroll_y(PyObject *__pyx_self, PyObject *__pyx_arg_scroll_y) {
  float __pyx_v_scroll_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_y (wrapper)", 0);
  assert(__pyx_arg_scroll_y); {
    __pyx_v_scroll_y = __pyx_PyFloat_AsFloat(__pyx_arg_scroll_y); if (unlikely((__pyx_v_scroll_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2495, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_scroll_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_72set_scroll_y(__pyx_self, ((float)__pyx_v_scroll_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_72set_scroll_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scroll_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_y", 0);

  /* "core.pyx":2501
 *         int SetScrollY(flot)
 *     """
 *     return cimgui.SetScrollY(scroll_y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetScrollY(__pyx_v_scroll_y);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2501, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":2495
 * 
 * 
 * def set_scroll_y(float scroll_y):             # <<<<<<<<<<<<<<
 *     """set scrolling amount [0..SetScrollMaxY()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_scroll_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2504
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_75set_window_font_scale(PyObject *__pyx_self, PyObject *__pyx_arg_scale); /*proto*/
static PyMethodDef __pyx_mdef_4core_75set_window_font_scale = {"set_window_font_scale", (PyCFunction)__pyx_pw_4core_75set_window_font_scale, METH_O, 0};
static PyObject *__pyx_pw_4core_75set_window_font_scale(PyObject *__pyx_self, PyObject *__pyx_arg_scale) {
  float __pyx_v_scale;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_font_scale (wrapper)", 0);
  assert(__pyx_arg_scale); {
    __pyx_v_scale = __pyx_PyFloat_AsFloat(__pyx_arg_scale); if (unlikely((__pyx_v_scale == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2504, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_74set_window_font_scale(__pyx_self, ((float)__pyx_v_scale));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_74set_window_font_scale(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_font_scale", 0);

  /* "core.pyx":2527
 *         void SetWindowFontScale(float scale)
 *     """
 *     cimgui.SetWindowFontScale(scale)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetWindowFontScale(__pyx_v_scale);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2527, __pyx_L1_error)
  }

  /* "core.pyx":2504
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_window_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2530
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_77set_next_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_77set_next_window_collapsed = {"set_next_window_collapsed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_77set_next_window_collapsed, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_77set_next_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_collapsed;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_collapsed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_collapsed") < 0)) __PYX_ERR(0, 2530, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2531, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[1]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2531, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__39;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_collapsed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2530, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_next_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_76set_next_window_collapsed(__pyx_self, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_76set_next_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_collapsed", 0);

  /* "core.pyx":2557
 * 
 *     """
 *     cimgui.SetNextWindowCollapsed(collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowCollapsed(__pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2557, __pyx_L1_error)
  }

  /* "core.pyx":2530
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_next_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2560
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_79set_next_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_79set_next_window_focus = {"set_next_window_focus", (PyCFunction)__pyx_pw_4core_79set_next_window_focus, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_79set_next_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_78set_next_window_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_78set_next_window_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_focus", 0);

  /* "core.pyx":2566
 *         void SetNextWindowFocus()
 *     """
 *     cimgui.SetNextWindowFocus()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2566, __pyx_L1_error)
  }

  /* "core.pyx":2560
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_next_window_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2569
 * 
 * 
 * def set_next_window_bg_alpha(float alpha):             # <<<<<<<<<<<<<<
 *     """set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_81set_next_window_bg_alpha(PyObject *__pyx_self, PyObject *__pyx_arg_alpha); /*proto*/
static PyMethodDef __pyx_mdef_4core_81set_next_window_bg_alpha = {"set_next_window_bg_alpha", (PyCFunction)__pyx_pw_4core_81set_next_window_bg_alpha, METH_O, 0};
static PyObject *__pyx_pw_4core_81set_next_window_bg_alpha(PyObject *__pyx_self, PyObject *__pyx_arg_alpha) {
  float __pyx_v_alpha;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_bg_alpha (wrapper)", 0);
  assert(__pyx_arg_alpha); {
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(__pyx_arg_alpha); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2569, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_next_window_bg_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_80set_next_window_bg_alpha(__pyx_self, ((float)__pyx_v_alpha));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_80set_next_window_bg_alpha(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_alpha) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_bg_alpha", 0);

  /* "core.pyx":2575
 *         void SetNextWindowBgAlpha(float)
 *     """
 *     cimgui.SetNextWindowBgAlpha(alpha)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowBgAlpha(__pyx_v_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2575, __pyx_L1_error)
  }

  /* "core.pyx":2569
 * 
 * 
 * def set_next_window_bg_alpha(float alpha):             # <<<<<<<<<<<<<<
 *     """set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_next_window_bg_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2578
 * 
 * 
 * def get_window_draw_list():             # <<<<<<<<<<<<<<
 *     """Get the draw list associated with the window, to append your own drawing primitives
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_83get_window_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_83get_window_draw_list = {"get_window_draw_list", (PyCFunction)__pyx_pw_4core_83get_window_draw_list, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_83get_window_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_draw_list (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_82get_window_draw_list(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_82get_window_draw_list(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawList *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_draw_list", 0);

  /* "core.pyx":2613
 *         ImDrawList* GetWindowDrawList()
 *     """
 *     return _DrawList.from_ptr(cimgui.GetWindowDrawList())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowDrawList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2613, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_9_DrawList_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2578
 * 
 * 
 * def get_window_draw_list():             # <<<<<<<<<<<<<<
 *     """Get the draw list associated with the window, to append your own drawing primitives
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_draw_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2616
 * 
 * 
 * def get_overlay_draw_list():             # <<<<<<<<<<<<<<
 *     """Get a special draw list that will be drawn last (over all windows).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_85get_overlay_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_85get_overlay_draw_list = {"get_overlay_draw_list", (PyCFunction)__pyx_pw_4core_85get_overlay_draw_list, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_85get_overlay_draw_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_overlay_draw_list (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_84get_overlay_draw_list(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_84get_overlay_draw_list(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawList *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_overlay_draw_list", 0);

  /* "core.pyx":2627
 *         ImDrawList* GetWindowDrawList()
 *     """
 *     return _DrawList.from_ptr(cimgui.GetOverlayDrawList())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetOverlayDrawList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2627, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core_9_DrawList_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2616
 * 
 * 
 * def get_overlay_draw_list():             # <<<<<<<<<<<<<<
 *     """Get a special draw list that will be drawn last (over all windows).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_overlay_draw_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2630
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_87get_window_position(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_87get_window_position = {"get_window_position", (PyCFunction)__pyx_pw_4core_87get_window_position, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_87get_window_position(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_position (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_86get_window_position(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_86get_window_position(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_position", 0);

  /* "core.pyx":2642
 *         ImVec2 GetWindowPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2642, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2630
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2645
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_89get_window_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_89get_window_size = {"get_window_size", (PyCFunction)__pyx_pw_4core_89get_window_size, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_89get_window_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_88get_window_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_88get_window_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_size", 0);

  /* "core.pyx":2654
 *         ImVec2 GetWindowSize()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowSize())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2654, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2645
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2657
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_91get_window_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_91get_window_width = {"get_window_width", (PyCFunction)__pyx_pw_4core_91get_window_width, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_91get_window_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_width (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_90get_window_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_90get_window_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_width", 0);

  /* "core.pyx":2666
 *         float GetWindowWidth()
 *     """
 *     return cimgui.GetWindowWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2666, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2657
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2669
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_93get_window_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_93get_window_height = {"get_window_height", (PyCFunction)__pyx_pw_4core_93get_window_height, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_93get_window_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_height (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_92get_window_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_92get_window_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_height", 0);

  /* "core.pyx":2678
 *         float GetWindowHeight()
 *     """
 *     return cimgui.GetWindowHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2678, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2669
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_window_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2681
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_95set_next_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_95set_next_window_position = {"set_next_window_position", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_95set_next_window_position, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_95set_next_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiCond __pyx_v_condition;
  float __pyx_v_pivot_x;
  float __pyx_v_pivot_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,&__pyx_n_s_pivot_x,&__pyx_n_s_pivot_y,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_position", 0, 2, 5, 1); __PYX_ERR(0, 2681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pivot_x);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pivot_y);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_position") < 0)) __PYX_ERR(0, 2681, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2682, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2682, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2682, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__40;
    }
    if (values[3]) {
      __pyx_v_pivot_x = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_pivot_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2682, __pyx_L3_error)
    } else {
      __pyx_v_pivot_x = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_pivot_y = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_pivot_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2682, __pyx_L3_error)
    } else {
      __pyx_v_pivot_y = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_position", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2681, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_next_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_94set_next_window_position(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_condition, __pyx_v_pivot_x, __pyx_v_pivot_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_94set_next_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition, float __pyx_v_pivot_x, float __pyx_v_pivot_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_position", 0);

  /* "core.pyx":2715
 * 
 *     """
 *     cimgui.SetNextWindowPos(_cast_args_ImVec2(x, y), condition, _cast_args_ImVec2(pivot_x, pivot_y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2715, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_pivot_x, __pyx_v_pivot_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2715, __pyx_L1_error)
  try {
    ImGui::SetNextWindowPos(__pyx_t_1, __pyx_v_condition, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2715, __pyx_L1_error)
  }

  /* "core.pyx":2681
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiCond condition=ALWAYS, float pivot_x=0, float pivot_y=0
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_next_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2718
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_97set_next_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_97set_next_window_size = {"set_next_window_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_97set_next_window_size, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_97set_next_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_size", 0, 2, 3, 1); __PYX_ERR(0, 2718, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_size") < 0)) __PYX_ERR(0, 2718, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2719, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2719, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2719, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__41;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_size", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2718, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_next_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_96set_next_window_size(__pyx_self, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_96set_next_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_size", 0);

  /* "core.pyx":2747
 *         )
 *     """
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)             # <<<<<<<<<<<<<<
 * 
 * def set_next_window_content_size(float width, float height):
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2747, __pyx_L1_error)
  try {
    ImGui::SetNextWindowSize(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2747, __pyx_L1_error)
  }

  /* "core.pyx":2718
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_next_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2749
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_next_window_content_size(float width, float height):             # <<<<<<<<<<<<<<
 *     """Set content size of the next window. Show scrollbars
 *        if content doesn't fit in the window
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_99set_next_window_content_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_99set_next_window_content_size = {"set_next_window_content_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_99set_next_window_content_size, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_99set_next_window_content_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_content_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_content_size", 1, 2, 2, 1); __PYX_ERR(0, 2749, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_content_size") < 0)) __PYX_ERR(0, 2749, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2749, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2749, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_content_size", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2749, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_next_window_content_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_98set_next_window_content_size(__pyx_self, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_98set_next_window_content_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_next_window_content_size", 0);

  /* "core.pyx":2775
 *         )
 *     """
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2775, __pyx_L1_error)
  try {
    ImGui::SetNextWindowContentSize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2775, __pyx_L1_error)
  }

  /* "core.pyx":2749
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)
 * 
 * def set_next_window_content_size(float width, float height):             # <<<<<<<<<<<<<<
 *     """Set content size of the next window. Show scrollbars
 *        if content doesn't fit in the window
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_next_window_content_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2777
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the current window
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_101set_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_101set_window_position = {"set_window_position", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_101set_window_position, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_101set_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_position", 0, 2, 3, 1); __PYX_ERR(0, 2777, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_position") < 0)) __PYX_ERR(0, 2777, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2777, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2777, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2777, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__42;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_position", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2777, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_100set_window_position(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_100set_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_position", 0);

  /* "core.pyx":2806
 *         )
 *     """
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)             # <<<<<<<<<<<<<<
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2806, __pyx_L1_error)
  try {
    ImGui::SetWindowPos(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2806, __pyx_L1_error)
  }

  /* "core.pyx":2777
 *     cimgui.SetNextWindowContentSize(_cast_args_ImVec2(width, height))
 * 
 * def set_window_position(float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the current window
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2808
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the window with label
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_103set_window_position_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_103set_window_position_labeled = {"set_window_position_labeled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_103set_window_position_labeled, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_103set_window_position_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_position_labeled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_position_labeled", 0, 3, 4, 1); __PYX_ERR(0, 2808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_position_labeled", 0, 3, 4, 2); __PYX_ERR(0, 2808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_position_labeled") < 0)) __PYX_ERR(0, 2808, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2808, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2808, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[3]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2808, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__43;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_position_labeled", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2808, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_position_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2808, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_102set_window_position_labeled(__pyx_self, __pyx_v_label, __pyx_v_x, __pyx_v_y, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_102set_window_position_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_x, float __pyx_v_y, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_position_labeled", 0);

  /* "core.pyx":2839
 *     """
 *     cimgui.SetWindowPos(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(x,y),
 *         condition
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2839, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2839, __pyx_L1_error)

  /* "core.pyx":2840
 *     cimgui.SetWindowPos(
 *         _bytes(label),
 *         _cast_args_ImVec2(x,y),             # <<<<<<<<<<<<<<
 *         condition
 *     )
 */
  __pyx_t_3 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2840, __pyx_L1_error)

  /* "core.pyx":2838
 *     )
 *     """
 *     cimgui.SetWindowPos(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(x,y),
 */
  try {
    ImGui::SetWindowPos(__pyx_t_2, __pyx_t_3, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2838, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":2808
 *     cimgui.SetWindowPos(_cast_args_ImVec2(x,y), condition)
 * 
 * def set_window_position_labeled(str label, float x, float y, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the size of the window with label
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_window_position_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2844
 *     )
 * 
 * def set_window_collapsed(bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the current window to be collapsed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_105set_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_105set_window_collapsed = {"set_window_collapsed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_105set_window_collapsed, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_105set_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_collapsed;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_collapsed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_collapsed") < 0)) __PYX_ERR(0, 2844, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2844, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[1]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2844, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__44;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_collapsed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2844, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_104set_window_collapsed(__pyx_self, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_104set_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_collapsed", 0);

  /* "core.pyx":2868
 *         )
 *     """
 *     cimgui.SetWindowCollapsed(collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):
 */
  try {
    ImGui::SetWindowCollapsed(__pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2868, __pyx_L1_error)
  }

  /* "core.pyx":2844
 *     )
 * 
 * def set_window_collapsed(bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set the current window to be collapsed
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2870
 *     cimgui.SetWindowCollapsed(collapsed, condition)
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set window with label to collapse
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_107set_window_collapsed_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_107set_window_collapsed_labeled = {"set_window_collapsed_labeled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_107set_window_collapsed_labeled, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_107set_window_collapsed_labeled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_collapsed;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_collapsed_labeled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_window_collapsed_labeled", 0, 2, 3, 1); __PYX_ERR(0, 2870, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_window_collapsed_labeled") < 0)) __PYX_ERR(0, 2870, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2870, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2870, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__45;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_window_collapsed_labeled", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2870, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_window_collapsed_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2870, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_106set_window_collapsed_labeled(__pyx_self, __pyx_v_label, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_106set_window_collapsed_labeled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_collapsed, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_window_collapsed_labeled", 0);

  /* "core.pyx":2894
 *         )
 *     """
 *     cimgui.SetWindowCollapsed(_bytes(label), collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2894, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2894, __pyx_L1_error)
  try {
    ImGui::SetWindowCollapsed(__pyx_t_2, __pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2894, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":2870
 *     cimgui.SetWindowCollapsed(collapsed, condition)
 * 
 * def set_window_collapsed_labeled(str label, bool collapsed, cimgui.ImGuiCond condition = ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set window with label to collapse
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_window_collapsed_labeled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2897
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_109is_window_collapsed(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_109is_window_collapsed = {"is_window_collapsed", (PyCFunction)__pyx_pw_4core_109is_window_collapsed, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_109is_window_collapsed(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_collapsed (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_108is_window_collapsed(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_108is_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_collapsed", 0);

  /* "core.pyx":2903
 *         bool: True if window is collapsed
 *     """
 *     return cimgui.IsWindowCollapsed()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowCollapsed();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2903, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2897
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2906
 * 
 * 
 * def is_window_appearing():             # <<<<<<<<<<<<<<
 *     """Check if current window is appearing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_111is_window_appearing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_111is_window_appearing = {"is_window_appearing", (PyCFunction)__pyx_pw_4core_111is_window_appearing, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_111is_window_appearing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_appearing (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_110is_window_appearing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_110is_window_appearing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_appearing", 0);

  /* "core.pyx":2912
 *         bool: True if window is appearing
 *     """
 *     return cimgui.IsWindowAppearing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowAppearing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2912, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2906
 * 
 * 
 * def is_window_appearing():             # <<<<<<<<<<<<<<
 *     """Check if current window is appearing.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_window_appearing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2916
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_113tree_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_113tree_node = {"tree_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_113tree_node, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_113tree_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tree_node") < 0)) __PYX_ERR(0, 2916, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2916, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tree_node", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2916, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.tree_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2916, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_112tree_node(__pyx_self, __pyx_v_text, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_112tree_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, ImGuiTreeNodeFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree_node", 0);

  /* "core.pyx":2945
 *         bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)
 *     """
 *     return cimgui.TreeNodeEx(_bytes(text), flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 2945, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2945, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::TreeNodeEx(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2945, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":2916
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.tree_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2948
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_115tree_pop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_115tree_pop = {"tree_pop", (PyCFunction)__pyx_pw_4core_115tree_pop, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_115tree_pop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_pop (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_114tree_pop(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_114tree_pop(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree_pop", 0);

  /* "core.pyx":2957
 *         void TreePop()
 *     """
 *     cimgui.TreePop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::TreePop();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2957, __pyx_L1_error)
  }

  /* "core.pyx":2948
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.tree_pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2960
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_117collapsing_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_117collapsing_header = {"collapsing_header", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_117collapsing_header, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_117collapsing_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_visible = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collapsing_header (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_visible,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};

    /* "core.pyx":2962
 * def collapsing_header(
 *     str text,
 *     visible=None,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiTreeNodeFlags flags=0
 * ):
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_visible);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "collapsing_header") < 0)) __PYX_ERR(0, 2960, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_visible = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2963, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collapsing_header", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2960, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.collapsing_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2961, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_116collapsing_header(__pyx_self, __pyx_v_text, __pyx_v_visible, __pyx_v_flags);

  /* "core.pyx":2960
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_116collapsing_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, PyObject *__pyx_v_visible, ImGuiTreeNodeFlags __pyx_v_flags) {
  bool __pyx_v_inout_opened;
  bool __pyx_v_clicked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collapsing_header", 0);

  /* "core.pyx":3008
 *         )
 *     """
 *     cdef cimgui.bool inout_opened = visible             # <<<<<<<<<<<<<<
 *     if visible is None:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3008, __pyx_L1_error)
  __pyx_v_inout_opened = __pyx_t_1;

  /* "core.pyx":3009
 *     """
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_visible == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "core.pyx":3010
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)             # <<<<<<<<<<<<<<
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)
 */
    __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3010, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3010, __pyx_L1_error)
    try {
      __pyx_t_1 = ImGui::CollapsingHeader(__pyx_t_5, NULL, __pyx_v_flags);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3010, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_clicked = __pyx_t_1;

    /* "core.pyx":3009
 *     """
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":3012
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)             # <<<<<<<<<<<<<<
 *     return clicked, None if visible is None else inout_opened
 * 
 */
  /*else*/ {
    __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3012, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3012, __pyx_L1_error)
    try {
      __pyx_t_1 = ImGui::CollapsingHeader(__pyx_t_5, (&__pyx_v_inout_opened), __pyx_v_flags);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3012, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_clicked = __pyx_t_1;
  }
  __pyx_L3:;

  /* "core.pyx":3013
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)
 *     return clicked, None if visible is None else inout_opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_clicked); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_v_visible == Py_None);
  if ((__pyx_t_3 != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_6 = Py_None;
  } else {
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_inout_opened); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":2960
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core.collapsing_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3016
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_119selectable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_119selectable = {"selectable", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_119selectable, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_119selectable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_selected = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("selectable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_selected,&__pyx_n_s_flags,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "core.pyx":3018
 * def selectable(
 *     str label,
 *     selected=False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiTreeNodeFlags flags=0,
 *     width=0,
 */
    values[1] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_selected);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "selectable") < 0)) __PYX_ERR(0, 3016, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_selected = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3019, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
    __pyx_v_width = values[3];
    __pyx_v_height = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("selectable", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3016, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.selectable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3017, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_118selectable(__pyx_self, __pyx_v_label, __pyx_v_selected, __pyx_v_flags, __pyx_v_width, __pyx_v_height);

  /* "core.pyx":3016
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_118selectable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_selected, ImGuiTreeNodeFlags __pyx_v_flags, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  bool __pyx_v_inout_selected;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  ImVec2 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("selectable", 0);

  /* "core.pyx":3072
 *         )
 *     """
 *     cdef cimgui.bool inout_selected = selected             # <<<<<<<<<<<<<<
 *     return cimgui.Selectable(
 *         _bytes(label),
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_selected); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3072, __pyx_L1_error)
  __pyx_v_inout_selected = __pyx_t_1;

  /* "core.pyx":3073
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":3074
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         &inout_selected,
 *         flags,
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3074, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3074, __pyx_L1_error)

  /* "core.pyx":3077
 *         &inout_selected,
 *         flags,
 *         _cast_args_ImVec2(width, height)), inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3077, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3077, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_4, __pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3077, __pyx_L1_error)

  /* "core.pyx":3073
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  try {
    __pyx_t_1 = ImGui::Selectable(__pyx_t_3, (&__pyx_v_inout_selected), __pyx_v_flags, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3073, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":3077
 *         &inout_selected,
 *         flags,
 *         _cast_args_ImVec2(width, height)), inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_inout_selected); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "core.pyx":3073
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":3016
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.selectable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3080
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_121listbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_121listbox = {"listbox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_121listbox, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_121listbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_current;
  PyObject *__pyx_v_items = 0;
  int __pyx_v_height_in_items;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_current,&__pyx_n_s_items,&__pyx_n_s_height_in_items,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, 1); __PYX_ERR(0, 3080, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, 2); __PYX_ERR(0, 3080, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height_in_items);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listbox") < 0)) __PYX_ERR(0, 3080, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_current = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_current == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3082, __pyx_L3_error)
    __pyx_v_items = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_height_in_items = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height_in_items == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3084, __pyx_L3_error)
    } else {
      __pyx_v_height_in_items = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3080, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.listbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3081, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(0, 3083, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_120listbox(__pyx_self, __pyx_v_label, __pyx_v_current, __pyx_v_items, __pyx_v_height_in_items);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_120listbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items) {
  int __pyx_v_inout_current;
  char const **__pyx_v_in_items;
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_v_item = NULL;
  bool __pyx_v_opened;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  char const *__pyx_t_6;
  bool __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listbox", 0);

  /* "core.pyx":3124
 *     """
 * 
 *     cdef int inout_current = current             # <<<<<<<<<<<<<<
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 */
  __pyx_v_inout_current = __pyx_v_current;

  /* "core.pyx":3125
 * 
 *     cdef int inout_current = current
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))             # <<<<<<<<<<<<<<
 * 
 *     for index, item in enumerate(items):
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 3125, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3125, __pyx_L1_error)
  __pyx_v_in_items = ((char const **)malloc((__pyx_t_1 * (sizeof(char *)))));

  /* "core.pyx":3127
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 *     for index, item in enumerate(items):             # <<<<<<<<<<<<<<
 *         in_items[index] = strdup(_bytes(item))
 * 
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 3127, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_v_index = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "core.pyx":3128
 * 
 *     for index, item in enumerate(items):
 *         in_items[index] = strdup(_bytes(item))             # <<<<<<<<<<<<<<
 * 
 *     opened = cimgui.ListBox(
 */
    if (!(likely(PyString_CheckExact(__pyx_v_item))||((__pyx_v_item) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_item)->tp_name), 0))) __PYX_ERR(0, 3128, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_4core__bytes(((PyObject*)__pyx_v_item)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3128, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3128, __pyx_L1_error)
    (__pyx_v_in_items[__pyx_v_index]) = strdup(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "core.pyx":3127
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 *     for index, item in enumerate(items):             # <<<<<<<<<<<<<<
 *         in_items[index] = strdup(_bytes(item))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":3131
 * 
 *     opened = cimgui.ListBox(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         &inout_current,
 *         in_items,
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3131, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 3131, __pyx_L1_error)

  /* "core.pyx":3134
 *         &inout_current,
 *         in_items,
 *         len(items),             # <<<<<<<<<<<<<<
 *         height_in_items
 *     )
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 3134, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3134, __pyx_L1_error)

  /* "core.pyx":3130
 *         in_items[index] = strdup(_bytes(item))
 * 
 *     opened = cimgui.ListBox(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_current,
 */
  try {
    __pyx_t_7 = ImGui::ListBox(__pyx_t_6, (&__pyx_v_inout_current), __pyx_v_in_items, __pyx_t_1, __pyx_v_height_in_items);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3130, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_opened = __pyx_t_7;

  /* "core.pyx":3138
 *     )
 * 
 *     for i in range(len(items)):             # <<<<<<<<<<<<<<
 *         free(<char*>in_items[i])
 * 
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 3138, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3138, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_3; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "core.pyx":3139
 * 
 *     for i in range(len(items)):
 *         free(<char*>in_items[i])             # <<<<<<<<<<<<<<
 * 
 *     free(in_items)
 */
    free(((char *)(__pyx_v_in_items[__pyx_v_i])));
  }

  /* "core.pyx":3141
 *         free(<char*>in_items[i])
 * 
 *     free(in_items)             # <<<<<<<<<<<<<<
 * 
 *     return opened, inout_current
 */
  free(__pyx_v_in_items);

  /* "core.pyx":3143
 *     free(in_items)
 * 
 *     return opened, inout_current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_inout_current); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":3080
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.listbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3146
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_123listbox_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_123listbox_header = {"listbox_header", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_123listbox_header, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_123listbox_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_header (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listbox_header") < 0)) __PYX_ERR(0, 3146, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listbox_header", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.listbox_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3147, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_122listbox_header(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_122listbox_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listbox_header", 0);

  /* "core.pyx":3185
 *         )
 *     """
 *     return cimgui.ListBoxHeader(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":3186
 *     """
 *     return cimgui.ListBoxHeader(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height)
 *     )
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3186, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3186, __pyx_L1_error)

  /* "core.pyx":3187
 *     return cimgui.ListBoxHeader(
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3187, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3187, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3187, __pyx_L1_error)

  /* "core.pyx":3185
 *         )
 *     """
 *     return cimgui.ListBoxHeader(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)
 */
  try {
    __pyx_t_6 = ImGui::ListBoxHeader(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3185, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":3146
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.listbox_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3191
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_125listbox_footer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_125listbox_footer = {"listbox_footer", (PyCFunction)__pyx_pw_4core_125listbox_footer, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_125listbox_footer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_footer (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_124listbox_footer(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_124listbox_footer(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listbox_footer", 0);

  /* "core.pyx":3199
 *         void ListBoxFooter()
 *     """
 *     cimgui.ListBoxFooter()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ListBoxFooter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3199, __pyx_L1_error)
  }

  /* "core.pyx":3191
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.listbox_footer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3202
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_127set_tooltip(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_127set_tooltip = {"set_tooltip", (PyCFunction)__pyx_pw_4core_127set_tooltip, METH_O, 0};
static PyObject *__pyx_pw_4core_127set_tooltip(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tooltip (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3202, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_126set_tooltip(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_126set_tooltip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_tooltip", 0);

  /* "core.pyx":3224
 *     """
 *     # note: "%s" required for safety and to favor of Python string formatting
 *     cimgui.SetTooltip("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3224, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3224, __pyx_L1_error)
  try {
    ImGui::SetTooltip(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3224, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3202
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3227
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_129begin_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_129begin_tooltip = {"begin_tooltip", (PyCFunction)__pyx_pw_4core_129begin_tooltip, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_129begin_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_tooltip (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_128begin_tooltip(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_128begin_tooltip(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_tooltip", 0);

  /* "core.pyx":3250
 *         void BeginTooltip()
 *     """
 *     cimgui.BeginTooltip()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::BeginTooltip();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3250, __pyx_L1_error)
  }

  /* "core.pyx":3227
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.begin_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3253
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_131end_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_131end_tooltip = {"end_tooltip", (PyCFunction)__pyx_pw_4core_131end_tooltip, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_131end_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_tooltip (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_130end_tooltip(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_130end_tooltip(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_tooltip", 0);

  /* "core.pyx":3261
 *         void EndTooltip()
 *     """
 *     cimgui.EndTooltip()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndTooltip();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3261, __pyx_L1_error)
  }

  /* "core.pyx":3253
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3264
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_133begin_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_133begin_main_menu_bar = {"begin_main_menu_bar", (PyCFunction)__pyx_pw_4core_133begin_main_menu_bar, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_133begin_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_main_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_132begin_main_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_132begin_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_main_menu_bar", 0);

  /* "core.pyx":3296
 *         bool BeginMainMenuBar()
 *     """
 *     return cimgui.BeginMainMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginMainMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3296, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":3264
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.begin_main_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3299
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_135end_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_135end_main_menu_bar = {"end_main_menu_bar", (PyCFunction)__pyx_pw_4core_135end_main_menu_bar, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_135end_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_main_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_134end_main_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_134end_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_main_menu_bar", 0);

  /* "core.pyx":3310
 *         bool EndMainMenuBar()
 *     """
 *     cimgui.EndMainMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMainMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3310, __pyx_L1_error)
  }

  /* "core.pyx":3299
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_main_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3313
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_137begin_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_137begin_menu_bar = {"begin_menu_bar", (PyCFunction)__pyx_pw_4core_137begin_menu_bar, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_137begin_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_136begin_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_136begin_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_menu_bar", 0);

  /* "core.pyx":3347
 *         bool BeginMenuBar()
 *     """
 *     return cimgui.BeginMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3347, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":3313
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.begin_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3350
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_139end_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_139end_menu_bar = {"end_menu_bar", (PyCFunction)__pyx_pw_4core_139end_menu_bar, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_139end_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_138end_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_138end_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_menu_bar", 0);

  /* "core.pyx":3361
 *         void EndMenuBar()
 *     """
 *     cimgui.EndMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3361, __pyx_L1_error)
  }

  /* "core.pyx":3350
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3364
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_141begin_menu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_141begin_menu = {"begin_menu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_141begin_menu, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_141begin_menu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_menu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_menu") < 0)) __PYX_ERR(0, 3364, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_menu", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3364, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3364, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_140begin_menu(__pyx_self, __pyx_v_label, __pyx_v_enabled);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_140begin_menu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_menu", 0);

  /* "core.pyx":3385
 *         )
 *     """
 *     return cimgui.BeginMenu(_bytes(label), enabled)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3385, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3385, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3385, __pyx_L1_error)
  try {
    __pyx_t_4 = ImGui::BeginMenu(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3385, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":3364
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.begin_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3388
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_143end_menu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_143end_menu = {"end_menu", (PyCFunction)__pyx_pw_4core_143end_menu, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_143end_menu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_142end_menu(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_142end_menu(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_menu", 0);

  /* "core.pyx":3399
 *         void EndMenu()
 *     """
 *     cimgui.EndMenu()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMenu();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3399, __pyx_L1_error)
  }

  /* "core.pyx":3388
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3402
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_145menu_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_145menu_item = {"menu_item", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_145menu_item, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_145menu_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_shortcut = 0;
  bool __pyx_v_selected;
  PyObject *__pyx_v_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("menu_item (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_shortcut,&__pyx_n_s_selected,&__pyx_n_s_enabled,0};
    PyObject* values[4] = {0,0,0,0};

    /* "core.pyx":3403
 * 
 * def menu_item(
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True             # <<<<<<<<<<<<<<
 * ):
 *     """Create a menu item.
 */
    values[1] = ((PyObject*)Py_None);
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shortcut);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_selected);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "menu_item") < 0)) __PYX_ERR(0, 3402, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_shortcut = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_selected = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_selected == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3403, __pyx_L3_error)
    } else {
      __pyx_v_selected = ((bool)0);
    }
    __pyx_v_enabled = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("menu_item", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3402, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.menu_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3403, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shortcut), (&PyString_Type), 1, "shortcut", 1))) __PYX_ERR(0, 3403, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_144menu_item(__pyx_self, __pyx_v_label, __pyx_v_shortcut, __pyx_v_selected, __pyx_v_enabled);

  /* "core.pyx":3402
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_144menu_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_shortcut, bool __pyx_v_selected, PyObject *__pyx_v_enabled) {
  bool __pyx_v_inout_selected;
  bool __pyx_v_clicked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("menu_item", 0);

  /* "core.pyx":3433
 *         )
 *     """
 *     cdef cimgui.bool inout_selected = selected             # <<<<<<<<<<<<<<
 * 
 *     # note: wee need to split this into two separate calls depending
 */
  __pyx_v_inout_selected = __pyx_v_selected;

  /* "core.pyx":3438
 *     #       on the value of shortcut in order to support None instead
 *     #       of empty strings.
 *     if shortcut is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),
 */
  __pyx_t_1 = (__pyx_v_shortcut == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":3440
 *     if shortcut is None:
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),             # <<<<<<<<<<<<<<
 *             NULL,
 *             &inout_selected,
 */
    __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3440, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3440, __pyx_L1_error)

    /* "core.pyx":3443
 *             NULL,
 *             &inout_selected,
 *             <bool>enabled             # <<<<<<<<<<<<<<
 *         )
 *     else:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3443, __pyx_L1_error)

    /* "core.pyx":3439
 *     #       of empty strings.
 *     if shortcut is None:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             NULL,
 */
    try {
      __pyx_t_6 = ImGui::MenuItem(__pyx_t_4, NULL, (&__pyx_v_inout_selected), ((bool)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3439, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_clicked = __pyx_t_6;

    /* "core.pyx":3438
 *     #       on the value of shortcut in order to support None instead
 *     #       of empty strings.
 *     if shortcut is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),
 */
    goto __pyx_L3;
  }

  /* "core.pyx":3446
 *         )
 *     else:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             _bytes(shortcut),
 */
  /*else*/ {

    /* "core.pyx":3447
 *     else:
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),             # <<<<<<<<<<<<<<
 *             _bytes(shortcut),
 *             &inout_selected,
 */
    __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3447, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3447, __pyx_L1_error)

    /* "core.pyx":3448
 *         clicked = cimgui.MenuItem(
 *             _bytes(label),
 *             _bytes(shortcut),             # <<<<<<<<<<<<<<
 *             &inout_selected,
 *             <bool>enabled
 */
    __pyx_t_7 = __pyx_f_4core__bytes(__pyx_v_shortcut); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3448, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyBytes_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 3448, __pyx_L1_error)

    /* "core.pyx":3450
 *             _bytes(shortcut),
 *             &inout_selected,
 *             <bool>enabled             # <<<<<<<<<<<<<<
 *         )
 *     return clicked, inout_selected
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3450, __pyx_L1_error)

    /* "core.pyx":3446
 *         )
 *     else:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             _bytes(shortcut),
 */
    try {
      __pyx_t_5 = ImGui::MenuItem(__pyx_t_4, __pyx_t_8, (&__pyx_v_inout_selected), ((bool)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3446, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_clicked = __pyx_t_5;
  }
  __pyx_L3:;

  /* "core.pyx":3452
 *             <bool>enabled
 *         )
 *     return clicked, inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_clicked); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_inout_selected); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":3402
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str label, str shortcut=None, cimgui.bool selected=False, enabled=True
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.menu_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3455
 * 
 * 
 * def open_popup(str label):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_147open_popup(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static PyMethodDef __pyx_mdef_4core_147open_popup = {"open_popup", (PyCFunction)__pyx_pw_4core_147open_popup, METH_O, 0};
static PyObject *__pyx_pw_4core_147open_popup(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_popup (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3455, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_146open_popup(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_146open_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_popup", 0);

  /* "core.pyx":3489
 *         )
 *     """
 *     cimgui.OpenPopup(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3489, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3489, __pyx_L1_error)
  try {
    ImGui::OpenPopup(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3489, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3455
 * 
 * 
 * def open_popup(str label):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.open_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3492
 * 
 * 
 * def begin_popup(str label, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_149begin_popup(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_149begin_popup = {"begin_popup", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_149begin_popup, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_149begin_popup(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup") < 0)) __PYX_ERR(0, 3492, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3492, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3492, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3492, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_148begin_popup(__pyx_self, __pyx_v_label, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_148begin_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup", 0);

  /* "core.pyx":3534
 *         )
 *     """
 *     return cimgui.BeginPopup(_bytes(label), flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3534, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3534, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::BeginPopup(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3534, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":3492
 * 
 * 
 * def begin_popup(str label, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.begin_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3537
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_151begin_popup_modal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_151begin_popup_modal = {"begin_popup_modal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_151begin_popup_modal, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_151begin_popup_modal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_visible = 0;
  ImGuiWindowFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_modal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_title,&__pyx_n_s_visible,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_title)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_visible);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_modal") < 0)) __PYX_ERR(0, 3537, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_title = ((PyObject*)values[0]);
    __pyx_v_visible = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3537, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_modal", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3537, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_popup_modal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_title), (&PyString_Type), 1, "title", 1))) __PYX_ERR(0, 3537, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_150begin_popup_modal(__pyx_self, __pyx_v_title, __pyx_v_visible, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_150begin_popup_modal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_visible, ImGuiWindowFlags __pyx_v_flags) {
  bool __pyx_v_inout_visible;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup_modal", 0);

  /* "core.pyx":3584
 *         )
 *     """
 *     cdef cimgui.bool inout_visible = visible             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.BeginPopupModal(
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3584, __pyx_L1_error)
  __pyx_v_inout_visible = __pyx_t_1;

  /* "core.pyx":3586
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":3587
 * 
 *     return cimgui.BeginPopupModal(
 *         _bytes(title),             # <<<<<<<<<<<<<<
 *         &inout_visible if visible is not None else NULL,
 *         flags
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_title); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3587, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3587, __pyx_L1_error)

  /* "core.pyx":3588
 *     return cimgui.BeginPopupModal(
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,             # <<<<<<<<<<<<<<
 *         flags
 *     ), inout_visible
 */
  __pyx_t_5 = (__pyx_v_visible != Py_None);
  if ((__pyx_t_5 != 0)) {
    __pyx_t_4 = (&__pyx_v_inout_visible);
  } else {
    __pyx_t_4 = NULL;
  }

  /* "core.pyx":3586
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  try {
    __pyx_t_1 = ImGui::BeginPopupModal(__pyx_t_3, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3586, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":3590
 *         &inout_visible if visible is not None else NULL,
 *         flags
 *     ), inout_visible             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_inout_visible); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "core.pyx":3586
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":3537
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core.begin_popup_modal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3593
 * 
 * 
 * def begin_popup_context_item(str label = None, int mouse_button = 1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_153begin_popup_context_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_153begin_popup_context_item = {"begin_popup_context_item", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_153begin_popup_context_item, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_153begin_popup_context_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_mouse_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_context_item (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_mouse_button,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_context_item") < 0)) __PYX_ERR(0, 3593, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3593, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_context_item", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3593, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_popup_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3593, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_152begin_popup_context_item(__pyx_self, __pyx_v_label, __pyx_v_mouse_button);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_152begin_popup_context_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup_context_item", 0);

  /* "core.pyx":3626
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_label == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":3627
 *     """
 *     if label is None:
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)             # <<<<<<<<<<<<<<
 *     else:
 *         return cimgui.BeginPopupContextItem(_bytes(label), mouse_button)
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = ImGui::BeginPopupContextItem(NULL, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3627, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "core.pyx":3626
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)
 *     else:
 */
  }

  /* "core.pyx":3629
 *         return cimgui.BeginPopupContextItem(NULL, mouse_button)
 *     else:
 *         return cimgui.BeginPopupContextItem(_bytes(label), mouse_button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3629, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3629, __pyx_L1_error)
    try {
      __pyx_t_3 = ImGui::BeginPopupContextItem(__pyx_t_5, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3629, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "core.pyx":3593
 * 
 * 
 * def begin_popup_context_item(str label = None, int mouse_button = 1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.begin_popup_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3632
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_155begin_popup_context_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_155begin_popup_context_window = {"begin_popup_context_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_155begin_popup_context_window, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_155begin_popup_context_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_also_over_items;
  int __pyx_v_mouse_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_context_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_also_over_items,&__pyx_n_s_mouse_button,0};
    PyObject* values[3] = {0,0,0};

    /* "core.pyx":3633
 * 
 * def begin_popup_context_window(
 *     str label = None,             # <<<<<<<<<<<<<<
 *     bool also_over_items = True,
 *     int mouse_button = 1
 */
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_also_over_items);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_context_window") < 0)) __PYX_ERR(0, 3632, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_also_over_items = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_also_over_items == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3634, __pyx_L3_error)
    } else {

      /* "core.pyx":3634
 * def begin_popup_context_window(
 *     str label = None,
 *     bool also_over_items = True,             # <<<<<<<<<<<<<<
 *     int mouse_button = 1
 * ):
 */
      __pyx_v_also_over_items = ((bool)1);
    }
    if (values[2]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3635, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_context_window", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3632, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_popup_context_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3633, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_154begin_popup_context_window(__pyx_self, __pyx_v_label, __pyx_v_also_over_items, __pyx_v_mouse_button);

  /* "core.pyx":3632
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_154begin_popup_context_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_also_over_items, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_popup_context_window", 0);

  /* "core.pyx":3672
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextWindow(
 *             NULL,
 */
  __pyx_t_1 = (__pyx_v_label == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":3673
 *     """
 *     if label is None:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             NULL,
 *             also_over_items,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "core.pyx":3676
 *             NULL,
 *             also_over_items,
 *             mouse_button             # <<<<<<<<<<<<<<
 *         )
 *     else:
 */
    try {
      __pyx_t_3 = ImGui::BeginPopupContextWindow(NULL, __pyx_v_also_over_items, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3673, __pyx_L1_error)
    }

    /* "core.pyx":3673
 *     """
 *     if label is None:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             NULL,
 *             also_over_items,
 */
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "core.pyx":3672
 *         )
 *     """
 *     if label is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextWindow(
 *             NULL,
 */
  }

  /* "core.pyx":3679
 *         )
 *     else:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             also_over_items,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "core.pyx":3680
 *     else:
 *         return cimgui.BeginPopupContextWindow(
 *             _bytes(label),             # <<<<<<<<<<<<<<
 *             also_over_items,
 *             mouse_button
 */
    __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 3680, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3680, __pyx_L1_error)

    /* "core.pyx":3679
 *         )
 *     else:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             _bytes(label),
 *             also_over_items,
 */
    try {
      __pyx_t_3 = ImGui::BeginPopupContextWindow(__pyx_t_5, __pyx_v_also_over_items, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3679, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "core.pyx":3632
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     str label = None,
 *     bool also_over_items = True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.begin_popup_context_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3686
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_157end_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_157end_popup = {"end_popup", (PyCFunction)__pyx_pw_4core_157end_popup, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_157end_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_popup (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_156end_popup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_156end_popup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_popup", 0);

  /* "core.pyx":3697
 *         void EndPopup()
 *     """
 *     cimgui.EndPopup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndPopup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3697, __pyx_L1_error)
  }

  /* "core.pyx":3686
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3700
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_159close_current_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_159close_current_popup = {"close_current_popup", (PyCFunction)__pyx_pw_4core_159close_current_popup, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_159close_current_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_current_popup (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_158close_current_popup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_158close_current_popup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close_current_popup", 0);

  /* "core.pyx":3711
 *         void CloseCurrentPopup()
 *     """
 *     cimgui.CloseCurrentPopup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::CloseCurrentPopup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3711, __pyx_L1_error)
  }

  /* "core.pyx":3700
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.close_current_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3714
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_161text(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_161text = {"text", (PyCFunction)__pyx_pw_4core_161text, METH_O, 0};
static PyObject *__pyx_pw_4core_161text(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3714, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_160text(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_160text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text", 0);

  /* "core.pyx":3733
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.Text("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3733, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3733, __pyx_L1_error)
  try {
    ImGui::Text(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3733, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3714
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3736
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_163text_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_163text_colored = {"text_colored", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_163text_colored, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_163text_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 1); __PYX_ERR(0, 3736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 2); __PYX_ERR(0, 3736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 3); __PYX_ERR(0, 3736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_colored") < 0)) __PYX_ERR(0, 3736, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3736, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3736, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3736, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3736, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3736, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.text_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3736, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_162text_colored(__pyx_self, __pyx_v_text, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_162text_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_colored", 0);

  /* "core.pyx":3768
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextColored(_cast_args_ImVec4(r, g, b, a), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3768, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3768, __pyx_L1_error)
  try {
    ImGui::TextColored(__pyx_f_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a), ((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3768, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3736
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.text_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3771
 * 
 * 
 * def text_disabled(str text):             # <<<<<<<<<<<<<<
 *     """Add disabled(grayed out) text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_165text_disabled(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_165text_disabled = {"text_disabled", (PyCFunction)__pyx_pw_4core_165text_disabled, METH_O, 0};
static PyObject *__pyx_pw_4core_165text_disabled(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_disabled (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3771, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_164text_disabled(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_164text_disabled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_disabled", 0);

  /* "core.pyx":3790
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextDisabled("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * def text_wrapped(str text):
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3790, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3790, __pyx_L1_error)
  try {
    ImGui::TextDisabled(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3790, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3771
 * 
 * 
 * def text_disabled(str text):             # <<<<<<<<<<<<<<
 *     """Add disabled(grayed out) text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.text_disabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3792
 *     cimgui.TextDisabled("%s", _bytes(text))
 * 
 * def text_wrapped(str text):             # <<<<<<<<<<<<<<
 *     """Add wrappable text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_167text_wrapped(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_167text_wrapped = {"text_wrapped", (PyCFunction)__pyx_pw_4core_167text_wrapped, METH_O, 0};
static PyObject *__pyx_pw_4core_167text_wrapped(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_wrapped (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3792, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_166text_wrapped(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_166text_wrapped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_wrapped", 0);

  /* "core.pyx":3813
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextWrapped("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3813, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3813, __pyx_L1_error)
  try {
    ImGui::TextWrapped(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3813, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3792
 *     cimgui.TextDisabled("%s", _bytes(text))
 * 
 * def text_wrapped(str text):             # <<<<<<<<<<<<<<
 *     """Add wrappable text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.text_wrapped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3816
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_169label_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_169label_text = {"label_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_169label_text, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_169label_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("label_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_text,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("label_text", 1, 2, 2, 1); __PYX_ERR(0, 3816, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "label_text") < 0)) __PYX_ERR(0, 3816, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_text = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("label_text", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3816, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.label_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3816, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3816, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_168label_text(__pyx_self, __pyx_v_label, __pyx_v_text);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_168label_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("label_text", 0);

  /* "core.pyx":3836
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.LabelText(_bytes(label), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3836, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3836, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3836, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3836, __pyx_L1_error)
  try {
    ImGui::LabelText(__pyx_t_2, ((char const *)"%s"), __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3836, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":3816
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.label_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3839
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_171text_unformatted(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_171text_unformatted = {"text_unformatted", (PyCFunction)__pyx_pw_4core_171text_unformatted, METH_O, 0};
static PyObject *__pyx_pw_4core_171text_unformatted(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_unformatted (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3839, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_170text_unformatted(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_170text_unformatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text_unformatted", 0);

  /* "core.pyx":3859
 *         TextUnformatted(const char* text, const char* text_end = NULL)
 *     """
 *     cimgui.TextUnformatted(_bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3859, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3859, __pyx_L1_error)
  try {
    ImGui::TextUnformatted(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3859, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3839
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.text_unformatted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3862
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_173bullet(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_173bullet = {"bullet", (PyCFunction)__pyx_pw_4core_173bullet, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_173bullet(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_172bullet(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_172bullet(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bullet", 0);

  /* "core.pyx":3882
 *         void Bullet()
 *     """
 *     cimgui.Bullet()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Bullet();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3882, __pyx_L1_error)
  }

  /* "core.pyx":3862
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.bullet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3885
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_175bullet_text(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_175bullet_text = {"bullet_text", (PyCFunction)__pyx_pw_4core_175bullet_text, METH_O, 0};
static PyObject *__pyx_pw_4core_175bullet_text(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet_text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 3885, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_174bullet_text(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_174bullet_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bullet_text", 0);

  /* "core.pyx":3912
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.BulletText("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3912, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3912, __pyx_L1_error)
  try {
    ImGui::BulletText(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3912, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":3885
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.bullet_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3915
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_177button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_177button = {"button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_177button, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_177button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "button") < 0)) __PYX_ERR(0, 3915, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("button", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3915, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3915, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_176button(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_176button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("button", 0);

  /* "core.pyx":3938
 *         bool Button(const char* label, const ImVec2& size = ImVec2(0,0))
 *     """
 *     return cimgui.Button(_bytes(label), _cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3938, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3938, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3938, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3938, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3938, __pyx_L1_error)
  try {
    __pyx_t_6 = ImGui::Button(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3938, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":3915
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3941
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_179small_button(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static PyMethodDef __pyx_mdef_4core_179small_button = {"small_button", (PyCFunction)__pyx_pw_4core_179small_button, METH_O, 0};
static PyObject *__pyx_pw_4core_179small_button(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("small_button (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3941, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_178small_button(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_178small_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("small_button", 0);

  /* "core.pyx":3962
 *         bool SmallButton(const char* label)
 *     """
 *     return cimgui.SmallButton(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3962, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3962, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::SmallButton(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3962, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":3941
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.small_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3964
 *     return cimgui.SmallButton(_bytes(label))
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):             # <<<<<<<<<<<<<<
 *     """Display an arrow button
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_181arrow_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_181arrow_button = {"arrow_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_181arrow_button, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_181arrow_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  ImGuiDir __pyx_v_direction;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arrow_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_direction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "arrow_button") < 0)) __PYX_ERR(0, 3964, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_direction = __Pyx_PyInt_As_ImGuiDir(values[1]); if (unlikely((__pyx_v_direction == ((ImGuiDir)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3964, __pyx_L3_error)
    } else {
      __pyx_v_direction = __pyx_k__46;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("arrow_button", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3964, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.arrow_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3964, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_180arrow_button(__pyx_self, __pyx_v_label, __pyx_v_direction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_180arrow_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, ImGuiDir __pyx_v_direction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("arrow_button", 0);

  /* "core.pyx":3985
 *         bool ArrowButton(const char*, ImGuiDir)
 *     """
 *     if direction == DIRECTION_NONE:             # <<<<<<<<<<<<<<
 *         raise ValueError("Direction wasn't specified.")
 *     return cimgui.ArrowButton(_bytes(label), direction)
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir(__pyx_v_direction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DIRECTION_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "core.pyx":3986
 *     """
 *     if direction == DIRECTION_NONE:
 *         raise ValueError("Direction wasn't specified.")             # <<<<<<<<<<<<<<
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 3986, __pyx_L1_error)

    /* "core.pyx":3985
 *         bool ArrowButton(const char*, ImGuiDir)
 *     """
 *     if direction == DIRECTION_NONE:             # <<<<<<<<<<<<<<
 *         raise ValueError("Direction wasn't specified.")
 *     return cimgui.ArrowButton(_bytes(label), direction)
 */
  }

  /* "core.pyx":3987
 *     if direction == DIRECTION_NONE:
 *         raise ValueError("Direction wasn't specified.")
 *     return cimgui.ArrowButton(_bytes(label), direction)             # <<<<<<<<<<<<<<
 * 
 * def invisible_button(str identifier, width, height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 3987, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3987, __pyx_L1_error)
  try {
    __pyx_t_6 = ImGui::ArrowButton(__pyx_t_5, __pyx_v_direction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3987, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":3964
 *     return cimgui.SmallButton(_bytes(label))
 * 
 * def arrow_button(str label, cimgui.ImGuiDir direction = DIRECTION_NONE):             # <<<<<<<<<<<<<<
 *     """Display an arrow button
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.arrow_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3989
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_183invisible_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_183invisible_button = {"invisible_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_183invisible_button, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_183invisible_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_identifier = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invisible_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_identifier,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_identifier)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, 1); __PYX_ERR(0, 3989, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, 2); __PYX_ERR(0, 3989, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "invisible_button") < 0)) __PYX_ERR(0, 3989, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_identifier = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3989, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.invisible_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_identifier), (&PyString_Type), 1, "identifier", 1))) __PYX_ERR(0, 3989, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_182invisible_button(__pyx_self, __pyx_v_identifier, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_182invisible_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_identifier, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("invisible_button", 0);

  /* "core.pyx":4014
 *         bool InvisibleButton(const char* str_id, const ImVec2& size)
 *     """
 *     return cimgui.InvisibleButton(             # <<<<<<<<<<<<<<
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4015
 *     """
 *     return cimgui.InvisibleButton(
 *         _bytes(identifier),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height)
 *     )
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_identifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4015, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4015, __pyx_L1_error)

  /* "core.pyx":4016
 *     return cimgui.InvisibleButton(
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4016, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4016, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4016, __pyx_L1_error)

  /* "core.pyx":4014
 *         bool InvisibleButton(const char* str_id, const ImVec2& size)
 *     """
 *     return cimgui.InvisibleButton(             # <<<<<<<<<<<<<<
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)
 */
  try {
    __pyx_t_6 = ImGui::InvisibleButton(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4014, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":3989
 *     return cimgui.ArrowButton(_bytes(label), direction)
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.invisible_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4020
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         str desc_id,
 *         float r, float g, float b, a=1.,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_185color_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_185color_button = {"color_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_185color_button, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_185color_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_desc_id = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_flags = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_desc_id,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,&__pyx_n_s_flags,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_float_1_);
    values[5] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_desc_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, 1); __PYX_ERR(0, 4020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, 2); __PYX_ERR(0, 4020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, 3); __PYX_ERR(0, 4020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_button") < 0)) __PYX_ERR(0, 4020, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_desc_id = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4022, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4022, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4022, __pyx_L3_error)
    __pyx_v_a = values[4];
    __pyx_v_flags = values[5];
    if (values[6]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4024, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
    if (values[7]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4024, __pyx_L3_error)
    } else {
      __pyx_v_height = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_button", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4020, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.color_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_desc_id), (&PyString_Type), 1, "desc_id", 1))) __PYX_ERR(0, 4021, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_184color_button(__pyx_self, __pyx_v_desc_id, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, __pyx_v_flags, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_184color_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_desc_id, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_a, PyObject *__pyx_v_flags, float __pyx_v_width, float __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  ImGuiColorEditFlags __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color_button", 0);

  /* "core.pyx":4059
 *         )
 *     """
 *     return cimgui.ColorButton(             # <<<<<<<<<<<<<<
 *         _bytes(desc_id), _cast_args_ImVec4(r, g, b, a), flags, _cast_args_ImVec2(width, height)
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4060
 *     """
 *     return cimgui.ColorButton(
 *         _bytes(desc_id), _cast_args_ImVec4(r, g, b, a), flags, _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_desc_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4060, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4060, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_a); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4060, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_ImGuiColorEditFlags(__pyx_v_flags); if (unlikely((__pyx_t_4 == ((ImGuiColorEditFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4060, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4060, __pyx_L1_error)

  /* "core.pyx":4059
 *         )
 *     """
 *     return cimgui.ColorButton(             # <<<<<<<<<<<<<<
 *         _bytes(desc_id), _cast_args_ImVec4(r, g, b, a), flags, _cast_args_ImVec2(width, height)
 *     )
 */
  try {
    __pyx_t_6 = ImGui::ColorButton(__pyx_t_2, __pyx_f_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_t_3), __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4059, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":4020
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         str desc_id,
 *         float r, float g, float b, a=1.,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.color_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4064
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_187image_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_187image_button = {"image_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_187image_button, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_187image_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  PyObject *__pyx_v_uv0 = 0;
  PyObject *__pyx_v_uv1 = 0;
  PyObject *__pyx_v_tint_color = 0;
  PyObject *__pyx_v_border_color = 0;
  int __pyx_v_frame_padding;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv0,&__pyx_n_s_uv1,&__pyx_n_s_tint_color,&__pyx_n_s_border_color,&__pyx_n_s_frame_padding,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "core.pyx":4068
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
    values[3] = ((PyObject*)__pyx_tuple__8);

    /* "core.pyx":4069
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
    values[4] = ((PyObject*)__pyx_tuple__9);

    /* "core.pyx":4070
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 *     int frame_padding=-1,
 */
    values[5] = ((PyObject*)__pyx_tuple__48);

    /* "core.pyx":4071
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 *     int frame_padding=-1,
 * ):
 */
    values[6] = ((PyObject*)__pyx_tuple__49);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, 1); __PYX_ERR(0, 4064, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, 2); __PYX_ERR(0, 4064, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tint_color);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border_color);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame_padding);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image_button") < 0)) __PYX_ERR(0, 4064, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4066, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4067, __pyx_L3_error)
    __pyx_v_uv0 = ((PyObject*)values[3]);
    __pyx_v_uv1 = ((PyObject*)values[4]);
    __pyx_v_tint_color = ((PyObject*)values[5]);
    __pyx_v_border_color = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_frame_padding = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_frame_padding == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4072, __pyx_L3_error)
    } else {
      __pyx_v_frame_padding = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4064, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.image_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv0), (&PyTuple_Type), 1, "uv0", 1))) __PYX_ERR(0, 4068, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv1), (&PyTuple_Type), 1, "uv1", 1))) __PYX_ERR(0, 4069, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tint_color), (&PyTuple_Type), 1, "tint_color", 1))) __PYX_ERR(0, 4070, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_border_color), (&PyTuple_Type), 1, "border_color", 1))) __PYX_ERR(0, 4071, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_186image_button(__pyx_self, __pyx_v_texture_id, __pyx_v_width, __pyx_v_height, __pyx_v_uv0, __pyx_v_uv1, __pyx_v_tint_color, __pyx_v_border_color, __pyx_v_frame_padding);

  /* "core.pyx":4064
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_186image_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color, int __pyx_v_frame_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("image_button", 0);

  /* "core.pyx":4105
 *         )
 *     """
 *     return cimgui.ImageButton(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4107
 *     return cimgui.ImageButton(
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4107, __pyx_L1_error)

  /* "core.pyx":4108
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv1),
 *         # note: slightly different order of params than in ImGui::Image()
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_uv0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4108, __pyx_L1_error)

  /* "core.pyx":4109
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),             # <<<<<<<<<<<<<<
 *         # note: slightly different order of params than in ImGui::Image()
 *         frame_padding,
 */
  __pyx_t_3 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_uv1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4109, __pyx_L1_error)

  /* "core.pyx":4105
 *         )
 *     """
 *     return cimgui.ImageButton(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  try {
    __pyx_t_4 = ImGui::ImageButton(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_frame_padding, __pyx_f_4core__cast_tuple_ImVec4(__pyx_v_border_color), __pyx_f_4core__cast_tuple_ImVec4(__pyx_v_tint_color));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4105, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "core.pyx":4064
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.image_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4117
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_189image(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_189image = {"image", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_189image, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_189image(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  PyObject *__pyx_v_uv0 = 0;
  PyObject *__pyx_v_uv1 = 0;
  PyObject *__pyx_v_tint_color = 0;
  PyObject *__pyx_v_border_color = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv0,&__pyx_n_s_uv1,&__pyx_n_s_tint_color,&__pyx_n_s_border_color,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "core.pyx":4121
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
    values[3] = ((PyObject*)__pyx_tuple__8);

    /* "core.pyx":4122
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
    values[4] = ((PyObject*)__pyx_tuple__9);

    /* "core.pyx":4123
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 * ):
 */
    values[5] = ((PyObject*)__pyx_tuple__48);

    /* "core.pyx":4124
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 * ):
 *     """Display image.
 */
    values[6] = ((PyObject*)__pyx_tuple__49);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, 1); __PYX_ERR(0, 4117, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, 2); __PYX_ERR(0, 4117, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tint_color);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border_color);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image") < 0)) __PYX_ERR(0, 4117, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4119, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4120, __pyx_L3_error)
    __pyx_v_uv0 = ((PyObject*)values[3]);
    __pyx_v_uv1 = ((PyObject*)values[4]);
    __pyx_v_tint_color = ((PyObject*)values[5]);
    __pyx_v_border_color = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4117, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv0), (&PyTuple_Type), 1, "uv0", 1))) __PYX_ERR(0, 4121, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv1), (&PyTuple_Type), 1, "uv1", 1))) __PYX_ERR(0, 4122, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tint_color), (&PyTuple_Type), 1, "tint_color", 1))) __PYX_ERR(0, 4123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_border_color), (&PyTuple_Type), 1, "border_color", 1))) __PYX_ERR(0, 4124, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_188image(__pyx_self, __pyx_v_texture_id, __pyx_v_width, __pyx_v_height, __pyx_v_uv0, __pyx_v_uv1, __pyx_v_tint_color, __pyx_v_border_color);

  /* "core.pyx":4117
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_188image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("image", 0);

  /* "core.pyx":4162
 *     cimgui.Image(
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4162, __pyx_L1_error)

  /* "core.pyx":4163
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv1),
 *         _cast_tuple_ImVec4(tint_color),
 */
  __pyx_t_2 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_uv0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4163, __pyx_L1_error)

  /* "core.pyx":4164
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec4(tint_color),
 *         _cast_tuple_ImVec4(border_color),
 */
  __pyx_t_3 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_uv1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4164, __pyx_L1_error)

  /* "core.pyx":4160
 *         )
 *     """
 *     cimgui.Image(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  try {
    ImGui::Image(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_f_4core__cast_tuple_ImVec4(__pyx_v_tint_color), __pyx_f_4core__cast_tuple_ImVec4(__pyx_v_border_color));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4160, __pyx_L1_error)
  }

  /* "core.pyx":4117
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4170
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_191checkbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_191checkbox = {"checkbox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_191checkbox, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_191checkbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_state;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_state,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox", 1, 2, 2, 1); __PYX_ERR(0, 4170, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkbox") < 0)) __PYX_ERR(0, 4170, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_state = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_state == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4170, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkbox", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4170, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.checkbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4170, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_190checkbox(__pyx_self, __pyx_v_label, __pyx_v_state);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_190checkbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_state) {
  bool __pyx_v_inout_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkbox", 0);

  /* "core.pyx":4211
 *         bool Checkbox(const char* label, bool* v)
 *     """
 *     cdef cimgui.bool inout_state = state             # <<<<<<<<<<<<<<
 *     return cimgui.Checkbox(_bytes(label), &inout_state), inout_state
 * 
 */
  __pyx_v_inout_state = __pyx_v_state;

  /* "core.pyx":4212
 *     """
 *     cdef cimgui.bool inout_state = state
 *     return cimgui.Checkbox(_bytes(label), &inout_state), inout_state             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4212, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4212, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::Checkbox(__pyx_t_2, (&__pyx_v_inout_state));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4212, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_inout_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "core.pyx":4170
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.checkbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4215
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_193checkbox_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_193checkbox_flags = {"checkbox_flags", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_193checkbox_flags, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_193checkbox_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  unsigned int __pyx_v_flags;
  unsigned int __pyx_v_flags_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkbox_flags (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_flags,&__pyx_n_s_flags_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, 1); __PYX_ERR(0, 4215, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, 2); __PYX_ERR(0, 4215, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkbox_flags") < 0)) __PYX_ERR(0, 4215, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_flags = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_flags == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4215, __pyx_L3_error)
    __pyx_v_flags_value = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_flags_value == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4215, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.checkbox_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4215, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_192checkbox_flags(__pyx_self, __pyx_v_label, __pyx_v_flags, __pyx_v_flags_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_192checkbox_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, unsigned int __pyx_v_flags, unsigned int __pyx_v_flags_value) {
  unsigned int __pyx_v_inout_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkbox_flags", 0);

  /* "core.pyx":4267
 *         )
 *     """
 *     cdef unsigned int inout_flags = flags             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.CheckboxFlags(_bytes(label), &inout_flags, flags_value), inout_flags
 */
  __pyx_v_inout_flags = __pyx_v_flags;

  /* "core.pyx":4269
 *     cdef unsigned int inout_flags = flags
 * 
 *     return cimgui.CheckboxFlags(_bytes(label), &inout_flags, flags_value), inout_flags             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4269, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4269, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::CheckboxFlags(__pyx_t_2, (&__pyx_v_inout_flags), __pyx_v_flags_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4269, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_inout_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "core.pyx":4215
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.checkbox_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4272
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_195radio_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_195radio_button = {"radio_button", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_195radio_button, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_195radio_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_active;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radio_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_active,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_active)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radio_button", 1, 2, 2, 1); __PYX_ERR(0, 4272, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radio_button") < 0)) __PYX_ERR(0, 4272, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_active = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_active == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4272, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radio_button", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.radio_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4272, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_194radio_button(__pyx_self, __pyx_v_label, __pyx_v_active);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_194radio_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_active) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radio_button", 0);

  /* "core.pyx":4300
 *         bool RadioButton(const char* label, bool active)
 *     """
 *     return cimgui.RadioButton(_bytes(label), active)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4300, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4300, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::RadioButton(__pyx_t_2, __pyx_v_active);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4300, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":4272
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.radio_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4303
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_197combo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_197combo = {"combo", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_197combo, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_197combo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_current;
  PyObject *__pyx_v_items = 0;
  int __pyx_v_height_in_items;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("combo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_current,&__pyx_n_s_items,&__pyx_n_s_height_in_items,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, 1); __PYX_ERR(0, 4303, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, 2); __PYX_ERR(0, 4303, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height_in_items);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "combo") < 0)) __PYX_ERR(0, 4303, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_current = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_current == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4303, __pyx_L3_error)
    __pyx_v_items = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_height_in_items = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height_in_items == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4303, __pyx_L3_error)
    } else {
      __pyx_v_height_in_items = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.combo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4303, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(0, 4303, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_196combo(__pyx_self, __pyx_v_label, __pyx_v_current, __pyx_v_items, __pyx_v_height_in_items);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_196combo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items) {
  int __pyx_v_inout_current;
  PyObject *__pyx_v_in_items = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("combo", 0);

  /* "core.pyx":4339
 * 
 *     """
 *     cdef int inout_current = current             # <<<<<<<<<<<<<<
 * 
 *     in_items = "\0".join(items) + "\0"
 */
  __pyx_v_inout_current = __pyx_v_current;

  /* "core.pyx":4341
 *     cdef int inout_current = current
 * 
 *     in_items = "\0".join(items) + "\0"             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.Combo(
 */
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__50, __pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__50); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_in_items = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":4343
 *     in_items = "\0".join(items) + "\0"
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4344
 * 
 *     return cimgui.Combo(
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items             # <<<<<<<<<<<<<<
 *     ), inout_current
 * 
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4344, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4344, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_v_in_items))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_in_items)->tp_name), 0))) __PYX_ERR(0, 4344, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4core__bytes(((PyObject*)__pyx_v_in_items)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4344, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4344, __pyx_L1_error)

  /* "core.pyx":4343
 *     in_items = "\0".join(items) + "\0"
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  try {
    __pyx_t_5 = ImGui::Combo(__pyx_t_3, (&__pyx_v_inout_current), __pyx_t_4, __pyx_v_height_in_items);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4343, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":4345
 *     return cimgui.Combo(
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_inout_current); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":4343
 *     in_items = "\0".join(items) + "\0"
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":4303
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.combo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_in_items);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4348
 * 
 * 
 * def color_edit3(str label, float r, float g, float b, flags=0):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_199color_edit3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_199color_edit3 = {"color_edit3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_199color_edit3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_199color_edit3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  PyObject *__pyx_v_flags = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_edit3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 0, 4, 5, 1); __PYX_ERR(0, 4348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 0, 4, 5, 2); __PYX_ERR(0, 4348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 0, 4, 5, 3); __PYX_ERR(0, 4348, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_edit3") < 0)) __PYX_ERR(0, 4348, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4348, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4348, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4348, __pyx_L3_error)
    __pyx_v_flags = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_edit3", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4348, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.color_edit3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4348, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_198color_edit3(__pyx_self, __pyx_v_label, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_198color_edit3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_flags) {
  float __pyx_v_inout_color[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  ImGuiColorEditFlags __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color_edit3", 0);

  /* "core.pyx":4385
 *     """
 * 
 *     cdef float[3] inout_color = [r, g, b]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.ColorEdit3(
 */
  __pyx_t_1[0] = __pyx_v_r;
  __pyx_t_1[1] = __pyx_v_g;
  __pyx_t_1[2] = __pyx_v_b;
  memcpy(&(__pyx_v_inout_color[0]), __pyx_t_1, sizeof(__pyx_v_inout_color[0]) * (3));

  /* "core.pyx":4387
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), flags
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4388
 * 
 *     return cimgui.ColorEdit3(
 *         _bytes(label), <float *>(&inout_color), flags             # <<<<<<<<<<<<<<
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 * 
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4388, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4388, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_ImGuiColorEditFlags(__pyx_v_flags); if (unlikely((__pyx_t_4 == ((ImGuiColorEditFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4388, __pyx_L1_error)

  /* "core.pyx":4387
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), flags
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  try {
    __pyx_t_5 = ImGui::ColorEdit3(__pyx_t_3, ((float *)(&__pyx_v_inout_color)), __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4387, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":4389
 *     return cimgui.ColorEdit3(
 *         _bytes(label), <float *>(&inout_color), flags
 *     ), (inout_color[0], inout_color[1], inout_color[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_color[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_color[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_color[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":4387
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), flags
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":4348
 * 
 * 
 * def color_edit3(str label, float r, float g, float b, flags=0):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.color_edit3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4392
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *         str label, float r, float g, float b, float a, cimgui.bool show_alpha=True, flags=0
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_201color_edit4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_201color_edit4 = {"color_edit4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_201color_edit4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_201color_edit4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  bool __pyx_v_show_alpha;
  PyObject *__pyx_v_flags = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_edit4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,&__pyx_n_s_show_alpha,&__pyx_n_s_flags,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 7, 1); __PYX_ERR(0, 4392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 7, 2); __PYX_ERR(0, 4392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 7, 3); __PYX_ERR(0, 4392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 7, 4); __PYX_ERR(0, 4392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_show_alpha);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_edit4") < 0)) __PYX_ERR(0, 4392, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4393, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4393, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4393, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4393, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_show_alpha = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_show_alpha == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4393, __pyx_L3_error)
    } else {

      /* "core.pyx":4393
 * 
 * def color_edit4(
 *         str label, float r, float g, float b, float a, cimgui.bool show_alpha=True, flags=0             # <<<<<<<<<<<<<<
 * ):
 *     """Display color edit widget for color with alpha value.
 */
      __pyx_v_show_alpha = ((bool)1);
    }
    __pyx_v_flags = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.color_edit4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4393, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_200color_edit4(__pyx_self, __pyx_v_label, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, __pyx_v_show_alpha, __pyx_v_flags);

  /* "core.pyx":4392
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *         str label, float r, float g, float b, float a, cimgui.bool show_alpha=True, flags=0
 * ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_200color_edit4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, bool __pyx_v_show_alpha, PyObject *__pyx_v_flags) {
  float __pyx_v_inout_color[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  ImGuiColorEditFlags __pyx_t_6;
  bool __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("color_edit4", 0);

  /* "core.pyx":4433
 *         )
 *     """
 *     cdef float[4] inout_color = [r, g, b, a]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.ColorEdit4(
 */
  __pyx_t_1[0] = __pyx_v_r;
  __pyx_t_1[1] = __pyx_v_g;
  __pyx_t_1[2] = __pyx_v_b;
  __pyx_t_1[3] = __pyx_v_a;
  memcpy(&(__pyx_v_inout_color[0]), __pyx_t_1, sizeof(__pyx_v_inout_color[0]) * (4));

  /* "core.pyx":4435
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), flags & show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4436
 * 
 *     return cimgui.ColorEdit4(
 *         _bytes(label), <float *>(&inout_color), flags & show_alpha             # <<<<<<<<<<<<<<
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 * 
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4436, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4436, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_show_alpha); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_And(__pyx_v_flags, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_ImGuiColorEditFlags(__pyx_t_5); if (unlikely((__pyx_t_6 == ((ImGuiColorEditFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "core.pyx":4435
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), flags & show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  try {
    __pyx_t_7 = ImGui::ColorEdit4(__pyx_t_3, ((float *)(&__pyx_v_inout_color)), __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4435, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":4437
 *     return cimgui.ColorEdit4(
 *         _bytes(label), <float *>(&inout_color), flags & show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_color[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_inout_color[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_color[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_color[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "core.pyx":4435
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), flags & show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_2 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":4392
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *         str label, float r, float g, float b, float a, cimgui.bool show_alpha=True, flags=0
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("core.color_edit4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4440
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_203drag_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_203drag_float = {"drag_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_203drag_float, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_203drag_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float", 0, 2, 7, 1); __PYX_ERR(0, 4440, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float") < 0)) __PYX_ERR(0, 4440, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4441, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4442, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4443, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4444, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4446, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float", 0, 2, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4440, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4441, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4445, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_202drag_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_202drag_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float", 0);

  /* "core.pyx":4498
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.DragFloat(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":4500
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4501
 * 
 *     return cimgui.DragFloat(
 *         _bytes(label), &inout_value,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4501, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4501, __pyx_L1_error)

  /* "core.pyx":4502
 *     return cimgui.DragFloat(
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4502, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4502, __pyx_L1_error)

  /* "core.pyx":4500
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_5 = ImGui::DragFloat(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4500, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "core.pyx":4503
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":4500
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":4440
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.drag_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4506
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_205drag_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_205drag_float2 = {"drag_float2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_205drag_float2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_205drag_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, 1); __PYX_ERR(0, 4506, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, 2); __PYX_ERR(0, 4506, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float2") < 0)) __PYX_ERR(0, 4506, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4507, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4507, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4508, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[4]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4509, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4510, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4512, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4506, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4507, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4511, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_204drag_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_204drag_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float2", 0);

  /* "core.pyx":4558
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "core.pyx":4559
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4560
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4560, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4560, __pyx_L1_error)

  /* "core.pyx":4561
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4561, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4561, __pyx_L1_error)

  /* "core.pyx":4559
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4559, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":4562
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "core.pyx":4559
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":4506
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.drag_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4565
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_207drag_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_207drag_float3 = {"drag_float3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_207drag_float3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_207drag_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 1); __PYX_ERR(0, 4565, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 2); __PYX_ERR(0, 4565, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 3); __PYX_ERR(0, 4565, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float3") < 0)) __PYX_ERR(0, 4565, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4566, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4566, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4566, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4567, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[5]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4568, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4569, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[7]);
    if (values[8]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4571, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4565, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4566, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4570, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_206drag_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_206drag_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float3", 0);

  /* "core.pyx":4617
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "core.pyx":4618
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4619
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4619, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4619, __pyx_L1_error)

  /* "core.pyx":4620
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4620, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4620, __pyx_L1_error)

  /* "core.pyx":4618
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4618, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":4621
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":4618
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":4565
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.drag_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4624
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_209drag_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_209drag_float4 = {"drag_float4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_209drag_float4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_209drag_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  float __pyx_v_change_speed;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 1); __PYX_ERR(0, 4624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 2); __PYX_ERR(0, 4624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 3); __PYX_ERR(0, 4624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 4); __PYX_ERR(0, 4624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float4") < 0)) __PYX_ERR(0, 4624, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4625, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4625, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4625, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4625, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4626, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[6]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4627, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    if (values[7]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4628, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[8]);
    if (values[9]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4630, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4624, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4625, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4629, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_208drag_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_208drag_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_change_speed, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_float4", 0);

  /* "core.pyx":4676
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "core.pyx":4677
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4678
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4678, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4678, __pyx_L1_error)

  /* "core.pyx":4679
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4679, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4679, __pyx_L1_error)

  /* "core.pyx":4677
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4677, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":4680
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "core.pyx":4677
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format), power
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":4624
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("core.drag_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4683
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_211drag_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_211drag_int = {"drag_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_211drag_int, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_211drag_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int", 0, 2, 6, 1); __PYX_ERR(0, 4683, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int") < 0)) __PYX_ERR(0, 4683, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4684, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4685, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4686, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[4]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4687, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4683, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4684, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4688, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_210drag_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_210drag_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int", 0);

  /* "core.pyx":4733
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.DragInt(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":4735
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4736
 * 
 *     return cimgui.DragInt(
 *         _bytes(label), &inout_value,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format)
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4736, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4736, __pyx_L1_error)

  /* "core.pyx":4737
 *     return cimgui.DragInt(
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4737, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4737, __pyx_L1_error)

  /* "core.pyx":4735
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_5 = ImGui::DragInt(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4735, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "core.pyx":4738
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":4735
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, min_value, max_value, _bytes(format)
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":4683
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.drag_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4741
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_213drag_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_213drag_int2 = {"drag_int2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_213drag_int2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_213drag_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, 1); __PYX_ERR(0, 4741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, 2); __PYX_ERR(0, 4741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int2") < 0)) __PYX_ERR(0, 4741, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4742, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4742, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4743, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[4]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4744, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[5]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4745, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4742, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4746, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_212drag_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_212drag_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int2", 0);

  /* "core.pyx":4787
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "core.pyx":4788
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4789
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4789, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4789, __pyx_L1_error)

  /* "core.pyx":4790
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4790, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4790, __pyx_L1_error)

  /* "core.pyx":4788
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4788, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":4791
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "core.pyx":4788
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":4741
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.drag_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4794
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_215drag_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_215drag_int3 = {"drag_int3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_215drag_int3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_215drag_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 1); __PYX_ERR(0, 4794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 2); __PYX_ERR(0, 4794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 3); __PYX_ERR(0, 4794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int3") < 0)) __PYX_ERR(0, 4794, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4795, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4795, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4795, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4796, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[5]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4797, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[6]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4798, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4794, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4795, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4799, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_214drag_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_214drag_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int3", 0);

  /* "core.pyx":4840
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "core.pyx":4841
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4842
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4842, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4842, __pyx_L1_error)

  /* "core.pyx":4843
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4843, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4843, __pyx_L1_error)

  /* "core.pyx":4841
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4841, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":4844
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":4841
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":4794
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.drag_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4847
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_217drag_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_217drag_int4 = {"drag_int4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_217drag_int4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_217drag_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  float __pyx_v_change_speed;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_change_speed,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 1); __PYX_ERR(0, 4847, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 2); __PYX_ERR(0, 4847, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 3); __PYX_ERR(0, 4847, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 4); __PYX_ERR(0, 4847, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int4") < 0)) __PYX_ERR(0, 4847, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4848, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4848, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4848, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4848, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4849, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[6]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4850, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    if (values[7]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4851, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    __pyx_v_format = ((PyObject*)values[8]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4847, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.drag_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4848, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 4852, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_216drag_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_216drag_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, float __pyx_v_change_speed, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drag_int4", 0);

  /* "core.pyx":4893
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "core.pyx":4894
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":4895
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4895, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4895, __pyx_L1_error)

  /* "core.pyx":4896
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4896, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4896, __pyx_L1_error)

  /* "core.pyx":4894
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4894, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":4897
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "core.pyx":4894
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, min_value, max_value, _bytes(format),
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":4847
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("core.drag_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4900
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_219input_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_219input_text = {"input_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_219input_text, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_219input_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_buffer_length;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_buffer_length,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, 1); __PYX_ERR(0, 4900, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, 2); __PYX_ERR(0, 4900, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_text") < 0)) __PYX_ERR(0, 4900, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = ((PyObject*)values[1]);
    __pyx_v_buffer_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_buffer_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4903, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[3]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4904, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4900, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4901, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 4902, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_218input_text(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_buffer_length, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_218input_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, ImGuiInputTextFlags __pyx_v_flags) {
  char *__pyx_v_inout_text;
  bool __pyx_v_changed;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_text", 0);

  /* "core.pyx":4949
 *     """
 *     # todo: pymalloc
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))             # <<<<<<<<<<<<<<
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)
 */
  __pyx_v_inout_text = ((char *)malloc((__pyx_v_buffer_length * (sizeof(char)))));

  /* "core.pyx":4951
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)             # <<<<<<<<<<<<<<
 * 
 *     changed = cimgui.InputText(
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4951, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4951, __pyx_L1_error)
  (void)(strncpy(__pyx_v_inout_text, __pyx_t_2, __pyx_v_buffer_length));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":4954
 * 
 *     changed = cimgui.InputText(
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL             # <<<<<<<<<<<<<<
 *     )
 *     output = _from_bytes(inout_text)
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 4954, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4954, __pyx_L1_error)

  /* "core.pyx":4953
 *     strncpy(inout_text, _bytes(value), buffer_length)
 * 
 *     changed = cimgui.InputText(             # <<<<<<<<<<<<<<
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL
 *     )
 */
  try {
    __pyx_t_4 = ImGui::InputText(__pyx_t_3, __pyx_v_inout_text, __pyx_v_buffer_length, __pyx_v_flags, NULL, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4953, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_changed = __pyx_t_4;

  /* "core.pyx":4956
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL
 *     )
 *     output = _from_bytes(inout_text)             # <<<<<<<<<<<<<<
 * 
 *     free(inout_text)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_inout_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_f_4core__from_bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "core.pyx":4958
 *     output = _from_bytes(inout_text)
 * 
 *     free(inout_text)             # <<<<<<<<<<<<<<
 *     return changed, output
 * 
 */
  free(__pyx_v_inout_text);

  /* "core.pyx":4959
 * 
 *     free(inout_text)
 *     return changed, output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_changed); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_output);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":4900
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.input_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4962
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_221input_text_multiline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_221input_text_multiline = {"input_text_multiline", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_221input_text_multiline, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_221input_text_multiline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_buffer_length;
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_text_multiline (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_buffer_length,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, 1); __PYX_ERR(0, 4962, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, 2); __PYX_ERR(0, 4962, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_text_multiline") < 0)) __PYX_ERR(0, 4962, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = ((PyObject*)values[1]);
    __pyx_v_buffer_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_buffer_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4965, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4966, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4967, __pyx_L3_error)
    } else {
      __pyx_v_height = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4968, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4962, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_text_multiline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4963, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 4964, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_220input_text_multiline(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_buffer_length, __pyx_v_width, __pyx_v_height, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_220input_text_multiline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, float __pyx_v_width, float __pyx_v_height, ImGuiInputTextFlags __pyx_v_flags) {
  char *__pyx_v_inout_text;
  bool __pyx_v_changed;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  ImVec2 __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_text_multiline", 0);

  /* "core.pyx":5015
 *         )
 *     """
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))             # <<<<<<<<<<<<<<
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)
 */
  __pyx_v_inout_text = ((char *)malloc((__pyx_v_buffer_length * (sizeof(char)))));

  /* "core.pyx":5017
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)             # <<<<<<<<<<<<<<
 * 
 *     changed = cimgui.InputTextMultiline(
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5017, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5017, __pyx_L1_error)
  (void)(strncpy(__pyx_v_inout_text, __pyx_t_2, __pyx_v_buffer_length));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":5020
 * 
 *     changed = cimgui.InputTextMultiline(
 *         _bytes(label), inout_text, buffer_length,             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height), flags,
 *         NULL, NULL
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5020, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5020, __pyx_L1_error)

  /* "core.pyx":5021
 *     changed = cimgui.InputTextMultiline(
 *         _bytes(label), inout_text, buffer_length,
 *         _cast_args_ImVec2(width, height), flags,             # <<<<<<<<<<<<<<
 *         NULL, NULL
 *     )
 */
  __pyx_t_4 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 5021, __pyx_L1_error)

  /* "core.pyx":5019
 *     strncpy(inout_text, _bytes(value), buffer_length)
 * 
 *     changed = cimgui.InputTextMultiline(             # <<<<<<<<<<<<<<
 *         _bytes(label), inout_text, buffer_length,
 *         _cast_args_ImVec2(width, height), flags,
 */
  try {
    __pyx_t_5 = ImGui::InputTextMultiline(__pyx_t_3, __pyx_v_inout_text, __pyx_v_buffer_length, __pyx_t_4, __pyx_v_flags, NULL, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5019, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_changed = __pyx_t_5;

  /* "core.pyx":5024
 *         NULL, NULL
 *     )
 *     output = _from_bytes(inout_text)             # <<<<<<<<<<<<<<
 * 
 *     free(inout_text)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_inout_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_f_4core__from_bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "core.pyx":5026
 *     output = _from_bytes(inout_text)
 * 
 *     free(inout_text)             # <<<<<<<<<<<<<<
 *     return changed, output
 * 
 */
  free(__pyx_v_inout_text);

  /* "core.pyx":5027
 * 
 *     free(inout_text)
 *     return changed, output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_changed); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_output);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":4962
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.input_text_multiline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5030
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_223input_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_223input_float = {"input_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_223input_float, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_223input_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_step;
  float __pyx_v_step_fast;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float", 0, 2, 6, 1); __PYX_ERR(0, 5030, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float") < 0)) __PYX_ERR(0, 5030, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5032, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_step == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5033, __pyx_L3_error)
    } else {
      __pyx_v_step = ((float)0.0);
    }
    if (values[3]) {
      __pyx_v_step_fast = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_step_fast == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5034, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((float)0.0);
    }
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5036, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5030, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5031, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5035, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_222input_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_222input_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_step, float __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float", 0);

  /* "core.pyx":5074
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":5076
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5077
 * 
 *     return cimgui.InputFloat(
 *         _bytes(label), &inout_value, step,             # <<<<<<<<<<<<<<
 *         step_fast, _bytes(format), flags
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5077, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5077, __pyx_L1_error)

  /* "core.pyx":5078
 *     return cimgui.InputFloat(
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5078, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5078, __pyx_L1_error)

  /* "core.pyx":5076
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 */
  try {
    __pyx_t_5 = ImGui::InputFloat(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5076, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "core.pyx":5079
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":5076
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, _bytes(format), flags
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":5030
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.input_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5082
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_225input_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_225input_float2 = {"input_float2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_225input_float2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_225input_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, 1); __PYX_ERR(0, 5082, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, 2); __PYX_ERR(0, 5082, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float2") < 0)) __PYX_ERR(0, 5082, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5084, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5084, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[3]);
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5086, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5082, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5083, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5085, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_224input_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_224input_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float2", 0);

  /* "core.pyx":5120
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat2(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "core.pyx":5122
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5123
 * 
 *     return cimgui.InputFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5123, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5123, __pyx_L1_error)

  /* "core.pyx":5124
 *     return cimgui.InputFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5124, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5124, __pyx_L1_error)

  /* "core.pyx":5122
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  try {
    __pyx_t_6 = ImGui::InputFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_t_5, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5122, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5125
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "core.pyx":5122
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":5082
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.input_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5128
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_227input_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_227input_float3 = {"input_float3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_227input_float3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_227input_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 1); __PYX_ERR(0, 5128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 2); __PYX_ERR(0, 5128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 3); __PYX_ERR(0, 5128, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float3") < 0)) __PYX_ERR(0, 5128, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5130, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5130, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5130, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5132, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5128, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5129, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5131, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_226input_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_226input_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float3", 0);

  /* "core.pyx":5166
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat3(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "core.pyx":5168
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5169
 * 
 *     return cimgui.InputFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5169, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5169, __pyx_L1_error)

  /* "core.pyx":5170
 *     return cimgui.InputFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5170, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5170, __pyx_L1_error)

  /* "core.pyx":5168
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  try {
    __pyx_t_6 = ImGui::InputFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_t_5, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5168, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5171
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":5168
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":5128
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.input_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5174
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_229input_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_229input_float4 = {"input_float4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_229input_float4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_229input_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 1); __PYX_ERR(0, 5174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 2); __PYX_ERR(0, 5174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 3); __PYX_ERR(0, 5174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 4); __PYX_ERR(0, 5174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float4") < 0)) __PYX_ERR(0, 5174, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5176, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5176, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5176, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5176, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[6]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5178, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5175, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5177, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_228input_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_228input_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_float4", 0);

  /* "core.pyx":5212
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat4(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "core.pyx":5214
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5215
 * 
 *     return cimgui.InputFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5215, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5215, __pyx_L1_error)

  /* "core.pyx":5216
 *     return cimgui.InputFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5216, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5216, __pyx_L1_error)

  /* "core.pyx":5214
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  try {
    __pyx_t_6 = ImGui::InputFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_t_5, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5214, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5217
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "core.pyx":5214
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         _bytes(format), flags
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":5174
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("core.input_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5220
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_231input_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_231input_int = {"input_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_231input_int, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_231input_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  int __pyx_v_step;
  int __pyx_v_step_fast;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int", 0, 2, 5, 1); __PYX_ERR(0, 5220, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int") < 0)) __PYX_ERR(0, 5220, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5222, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5223, __pyx_L3_error)
    } else {
      __pyx_v_step = ((int)1);
    }
    if (values[3]) {
      __pyx_v_step_fast = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_step_fast == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5224, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((int)0x64);
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5225, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5220, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5221, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_230input_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_230input_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_step, int __pyx_v_step_fast, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int", 0);

  /* "core.pyx":5261
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":5263
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5264
 * 
 *     return cimgui.InputInt(
 *         _bytes(label), &inout_value, step, step_fast, flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5264, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5264, __pyx_L1_error)

  /* "core.pyx":5263
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  try {
    __pyx_t_3 = ImGui::InputInt(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5263, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":5265
 *     return cimgui.InputInt(
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5263
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "core.pyx":5220
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.input_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5268
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_233input_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_233input_int2 = {"input_int2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_233input_int2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_233input_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, 1); __PYX_ERR(0, 5268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, 2); __PYX_ERR(0, 5268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int2") < 0)) __PYX_ERR(0, 5268, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5270, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5270, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[3]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5271, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5269, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_232input_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_232input_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int2", 0);

  /* "core.pyx":5303
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt2(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "core.pyx":5305
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5306
 * 
 *     return cimgui.InputInt2(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1]]
 * 
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5306, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5306, __pyx_L1_error)

  /* "core.pyx":5305
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5305, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":5307
 *     return cimgui.InputInt2(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "core.pyx":5305
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":5268
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core.input_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5310
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_235input_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_235input_int3 = {"input_int3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_235input_int3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_235input_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 1); __PYX_ERR(0, 5310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 2); __PYX_ERR(0, 5310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 3); __PYX_ERR(0, 5310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int3") < 0)) __PYX_ERR(0, 5310, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5312, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5312, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5312, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5313, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5310, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5311, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_234input_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_234input_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int3", 0);

  /* "core.pyx":5345
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt3(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "core.pyx":5347
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5348
 * 
 *     return cimgui.InputInt3(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 * 
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5348, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5348, __pyx_L1_error)

  /* "core.pyx":5347
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5347, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":5349
 *     return cimgui.InputInt3(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "core.pyx":5347
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":5310
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.input_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5352
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_237input_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_237input_int4 = {"input_int4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_237input_int4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_237input_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 1); __PYX_ERR(0, 5352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 2); __PYX_ERR(0, 5352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 3); __PYX_ERR(0, 5352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 4); __PYX_ERR(0, 5352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int4") < 0)) __PYX_ERR(0, 5352, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5354, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5354, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5354, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5354, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5355, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5353, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_236input_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_236input_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_int4", 0);

  /* "core.pyx":5387
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt4(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "core.pyx":5389
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5390
 * 
 *     return cimgui.InputInt4(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 * 
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5390, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5390, __pyx_L1_error)

  /* "core.pyx":5389
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5389, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "core.pyx":5391
 *     return cimgui.InputInt4(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyList_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":5389
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":5352
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.input_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5394
 * 
 * 
 * def input_double(             # <<<<<<<<<<<<<<
 *     str label,
 *     double value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_239input_double(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_239input_double = {"input_double", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_239input_double, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_239input_double(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  double __pyx_v_value;
  double __pyx_v_step;
  double __pyx_v_step_fast;
  PyObject *__pyx_v_format = 0;
  ImGuiInputTextFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_double (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_format,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_6f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_double", 0, 2, 6, 1); __PYX_ERR(0, 5394, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_double") < 0)) __PYX_ERR(0, 5394, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5396, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5397, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_step_fast = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_step_fast == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 5398, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((double)0.0);
    }
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5400, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_double", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5394, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.input_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5395, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5399, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_238input_double(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_format, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_238input_double(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, double __pyx_v_value, double __pyx_v_step, double __pyx_v_step_fast, PyObject *__pyx_v_format, ImGuiInputTextFlags __pyx_v_flags) {
  double __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("input_double", 0);

  /* "core.pyx":5438
 *         )
 *     """
 *     cdef double inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputDouble(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":5440
 *     cdef double inout_value = value
 * 
 *     return cimgui.InputDouble(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5441
 * 
 *     return cimgui.InputDouble(
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5441, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5441, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5441, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5441, __pyx_L1_error)

  /* "core.pyx":5440
 *     cdef double inout_value = value
 * 
 *     return cimgui.InputDouble(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value
 */
  try {
    __pyx_t_5 = ImGui::InputDouble(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5440, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "core.pyx":5442
 *     return cimgui.InputDouble(
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":5440
 *     cdef double inout_value = value
 * 
 *     return cimgui.InputDouble(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, _bytes(format), flags
 *     ), inout_value
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":5394
 * 
 * 
 * def input_double(             # <<<<<<<<<<<<<<
 *     str label,
 *     double value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.input_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5445
 * 
 * 
 * def slider_angle(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_241slider_angle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_241slider_angle = {"slider_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_241slider_angle, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_241slider_angle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, 1); __PYX_ERR(0, 5445, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, 2); __PYX_ERR(0, 5445, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, 3); __PYX_ERR(0, 5445, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_angle") < 0)) __PYX_ERR(0, 5445, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5447, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5448, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5449, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_angle", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5445, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5446, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_240slider_angle(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_240slider_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_angle", 0);

  /* "core.pyx":5486
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderAngle(
 *         _bytes(label), <float*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":5487
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5488
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(
 *         _bytes(label), <float*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5488, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5488, __pyx_L1_error)

  /* "core.pyx":5487
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 */
  try {
    __pyx_t_3 = ImGui::SliderAngle(__pyx_t_2, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5487, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":5490
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5487
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderAngle(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "core.pyx":5445
 * 
 * 
 * def slider_angle(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.slider_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5494
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_243slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_243slider_float = {"slider_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_243slider_float, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_243slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 1); __PYX_ERR(0, 5494, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 2); __PYX_ERR(0, 5494, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 3); __PYX_ERR(0, 5494, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float") < 0)) __PYX_ERR(0, 5494, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5496, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5497, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5498, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5500, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5494, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5495, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5499, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_242slider_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_242slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float", 0);

  /* "core.pyx":5546
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":5547
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5548
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5548, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5548, __pyx_L1_error)

  /* "core.pyx":5549
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5549, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5549, __pyx_L1_error)

  /* "core.pyx":5547
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_5 = ImGui::SliderFloat(__pyx_t_2, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5547, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "core.pyx":5550
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":5547
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":5494
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5553
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_245slider_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_245slider_float2 = {"slider_float2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_245slider_float2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_245slider_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 1); __PYX_ERR(0, 5553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 2); __PYX_ERR(0, 5553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 3); __PYX_ERR(0, 5553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 4); __PYX_ERR(0, 5553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float2") < 0)) __PYX_ERR(0, 5553, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5555, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5555, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5556, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5557, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5559, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5553, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5554, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5558, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_244slider_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_244slider_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float2", 0);

  /* "core.pyx":5604
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "core.pyx":5605
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5606
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5606, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5606, __pyx_L1_error)

  /* "core.pyx":5607
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5607, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5607, __pyx_L1_error)

  /* "core.pyx":5605
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5605, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5608
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "core.pyx":5605
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":5553
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.slider_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5611
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_247slider_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_247slider_float3 = {"slider_float3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_247slider_float3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_247slider_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 1); __PYX_ERR(0, 5611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 2); __PYX_ERR(0, 5611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 3); __PYX_ERR(0, 5611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 4); __PYX_ERR(0, 5611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 5); __PYX_ERR(0, 5611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float3") < 0)) __PYX_ERR(0, 5611, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5613, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5613, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5613, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5614, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5615, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5617, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5611, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5612, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5616, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_246slider_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_246slider_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float3", 0);

  /* "core.pyx":5663
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "core.pyx":5664
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5665
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5665, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5665, __pyx_L1_error)

  /* "core.pyx":5666
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5666, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5666, __pyx_L1_error)

  /* "core.pyx":5664
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5664, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5667
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":5664
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":5611
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.slider_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5670
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_249slider_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_249slider_float4 = {"slider_float4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_249slider_float4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_249slider_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 1); __PYX_ERR(0, 5670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 2); __PYX_ERR(0, 5670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 3); __PYX_ERR(0, 5670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 4); __PYX_ERR(0, 5670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 5); __PYX_ERR(0, 5670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 6); __PYX_ERR(0, 5670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float4") < 0)) __PYX_ERR(0, 5670, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5672, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5672, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5672, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5672, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5673, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5674, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[7]);
    if (values[8]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5676, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5670, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5671, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5675, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_248slider_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_248slider_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_float4", 0);

  /* "core.pyx":5722
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "core.pyx":5723
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5724
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5724, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5724, __pyx_L1_error)

  /* "core.pyx":5725
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5725, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5725, __pyx_L1_error)

  /* "core.pyx":5723
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5723, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5726
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "core.pyx":5723
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":5670
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("core.slider_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5729
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_251slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_251slider_int = {"slider_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_251slider_int, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_251slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 1); __PYX_ERR(0, 5729, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 2); __PYX_ERR(0, 5729, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 3); __PYX_ERR(0, 5729, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int") < 0)) __PYX_ERR(0, 5729, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5731, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5732, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5733, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5729, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5730, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5734, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_250slider_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_250slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int", 0);

  /* "core.pyx":5776
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":5777
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5778
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5778, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5778, __pyx_L1_error)

  /* "core.pyx":5779
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5779, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5779, __pyx_L1_error)

  /* "core.pyx":5777
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_5 = ImGui::SliderInt(__pyx_t_2, ((int *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5777, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "core.pyx":5780
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":5777
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "core.pyx":5729
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5783
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_253slider_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_253slider_int2 = {"slider_int2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_253slider_int2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_253slider_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 1); __PYX_ERR(0, 5783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 2); __PYX_ERR(0, 5783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 3); __PYX_ERR(0, 5783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 4); __PYX_ERR(0, 5783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int2") < 0)) __PYX_ERR(0, 5783, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5785, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5785, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5786, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5787, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5783, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5784, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5788, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_252slider_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_252slider_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int2", 0);

  /* "core.pyx":5830
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "core.pyx":5831
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5832
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5832, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5832, __pyx_L1_error)

  /* "core.pyx":5833
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5833, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5833, __pyx_L1_error)

  /* "core.pyx":5831
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5831, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5834
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "core.pyx":5831
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":5783
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.slider_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5837
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_255slider_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_255slider_int3 = {"slider_int3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_255slider_int3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_255slider_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 1); __PYX_ERR(0, 5837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 2); __PYX_ERR(0, 5837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 3); __PYX_ERR(0, 5837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 4); __PYX_ERR(0, 5837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 5); __PYX_ERR(0, 5837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int3") < 0)) __PYX_ERR(0, 5837, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5839, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5839, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5839, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5840, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5841, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5837, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5842, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_254slider_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_254slider_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int3", 0);

  /* "core.pyx":5884
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "core.pyx":5885
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5886
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5886, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5886, __pyx_L1_error)

  /* "core.pyx":5887
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5887, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5887, __pyx_L1_error)

  /* "core.pyx":5885
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5885, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5888
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "core.pyx":5885
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "core.pyx":5837
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.slider_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5891
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_257slider_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_257slider_int4 = {"slider_int4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_257slider_int4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_257slider_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 1); __PYX_ERR(0, 5891, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 2); __PYX_ERR(0, 5891, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 3); __PYX_ERR(0, 5891, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 4); __PYX_ERR(0, 5891, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 5); __PYX_ERR(0, 5891, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 6); __PYX_ERR(0, 5891, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int4") < 0)) __PYX_ERR(0, 5891, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5893, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5893, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5893, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5893, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5894, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5895, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5891, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.slider_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5892, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5896, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_256slider_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_256slider_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slider_int4", 0);

  /* "core.pyx":5937
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "core.pyx":5938
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":5939
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5939, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 5939, __pyx_L1_error)

  /* "core.pyx":5940
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5940, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 5940, __pyx_L1_error)

  /* "core.pyx":5938
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5938, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":5941
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 5941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "core.pyx":5938
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "core.pyx":5891
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("core.slider_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5944
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_259v_slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_259v_slider_float = {"v_slider_float", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_259v_slider_float, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_259v_slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  float __pyx_v_power;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v_slider_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 1); __PYX_ERR(0, 5944, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 2); __PYX_ERR(0, 5944, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 3); __PYX_ERR(0, 5944, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 4); __PYX_ERR(0, 5944, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 5); __PYX_ERR(0, 5944, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "v_slider_float") < 0)) __PYX_ERR(0, 5944, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5946, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5947, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5948, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5949, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5950, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5952, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5944, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.v_slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 5945, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 5951, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_258v_slider_float(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_258v_slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v_slider_float", 0);

  /* "core.pyx":6001
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.VSliderFloat(
 *         _bytes(label), _cast_args_ImVec2(width, height),
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":6002
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":6003
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(
 *         _bytes(label), _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6003, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 6003, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6003, __pyx_L1_error)

  /* "core.pyx":6005
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6005, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6005, __pyx_L1_error)

  /* "core.pyx":6002
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  try {
    __pyx_t_6 = ImGui::VSliderFloat(__pyx_t_2, __pyx_t_3, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6002, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":6006
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":6002
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":5944
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core.v_slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6009
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_261v_slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_261v_slider_int = {"v_slider_int", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_261v_slider_int, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_261v_slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_v_value;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v_slider_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_d);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 1); __PYX_ERR(0, 6009, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 2); __PYX_ERR(0, 6009, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 3); __PYX_ERR(0, 6009, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 4); __PYX_ERR(0, 6009, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 5); __PYX_ERR(0, 6009, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "v_slider_int") < 0)) __PYX_ERR(0, 6009, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6011, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6012, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6013, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6014, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6015, __pyx_L3_error)
    __pyx_v_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6009, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.v_slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 6010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format), (&PyString_Type), 1, "format", 1))) __PYX_ERR(0, 6016, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_260v_slider_int(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_260v_slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v_slider_int", 0);

  /* "core.pyx":6062
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.VSliderInt(
 *         _bytes(label), _cast_args_ImVec2(width, height),
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "core.pyx":6063
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":6064
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(
 *         _bytes(label), _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6064, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 6064, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6064, __pyx_L1_error)

  /* "core.pyx":6066
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_4 = __pyx_f_4core__bytes(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6066, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6066, __pyx_L1_error)

  /* "core.pyx":6063
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  try {
    __pyx_t_6 = ImGui::VSliderInt(__pyx_t_2, __pyx_t_3, ((int *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6063, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "core.pyx":6067
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "core.pyx":6063
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "core.pyx":6009
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core.v_slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6070
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_263plot_lines(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_263plot_lines = {"plot_lines", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_263plot_lines, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_263plot_lines(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  __Pyx_memviewslice __pyx_v_values = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_values_count;
  int __pyx_v_values_offset;
  PyObject *__pyx_v_overlay_text = 0;
  float __pyx_v_scale_min;
  float __pyx_v_scale_max;
  PyObject *__pyx_v_graph_size = 0;
  int __pyx_v_stride;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot_lines (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_values,&__pyx_n_s_values_count,&__pyx_n_s_values_offset,&__pyx_n_s_overlay_text,&__pyx_n_s_scale_min,&__pyx_n_s_scale_max,&__pyx_n_s_graph_size,&__pyx_n_s_stride,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "core.pyx":6075
 *         int values_count  = -1,
 *         int values_offset = 0,
 *         str overlay_text = None,             # <<<<<<<<<<<<<<
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 */
    values[4] = ((PyObject*)Py_None);

    /* "core.pyx":6078
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),             # <<<<<<<<<<<<<<
 *         int stride = sizeof(float),
 *     ):
 */
    values[7] = ((PyObject *)__pyx_tuple__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plot_lines", 0, 2, 9, 1); __PYX_ERR(0, 6070, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_count);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_offset);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlay_text);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_min);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_max);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph_size);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot_lines") < 0)) __PYX_ERR(0, 6070, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_values = __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(values[1], 0); if (unlikely(!__pyx_v_values.memview)) __PYX_ERR(0, 6072, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_values_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_values_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6073, __pyx_L3_error)
    } else {
      __pyx_v_values_count = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_values_offset = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_values_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6074, __pyx_L3_error)
    } else {
      __pyx_v_values_offset = ((int)0);
    }
    __pyx_v_overlay_text = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_scale_min = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_scale_min == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6076, __pyx_L3_error)
    } else {
      __pyx_v_scale_min = __pyx_k__51;
    }
    if (values[6]) {
      __pyx_v_scale_max = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_scale_max == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6077, __pyx_L3_error)
    } else {
      __pyx_v_scale_max = __pyx_k__52;
    }
    __pyx_v_graph_size = values[7];
    if (values[8]) {
      __pyx_v_stride = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6079, __pyx_L3_error)
    } else {
      __pyx_v_stride = __pyx_k__53;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot_lines", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6070, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.plot_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 0, "label", 1))) __PYX_ERR(0, 6071, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_values.memview) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "values"); __PYX_ERR(0, 6072, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_overlay_text), (&PyString_Type), 1, "overlay_text", 1))) __PYX_ERR(0, 6075, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_262plot_lines(__pyx_self, __pyx_v_label, __pyx_v_values, __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_v_graph_size, __pyx_v_stride);

  /* "core.pyx":6070
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_262plot_lines(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride) {
  char const *__pyx_v_overlay_text_ptr;
  PyObject *__pyx_v_overlay_text_b = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  char const *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  ImVec2 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("plot_lines", 0);

  /* "core.pyx":6140
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_values_count == -1L) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":6141
 *     """
 *     if values_count == -1:
 *         values_count = values.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     # Would be nicer as something like
 */
    __pyx_v_values_count = (__pyx_v_values.shape[0]);

    /* "core.pyx":6140
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  }

  /* "core.pyx":6146
 *     #   _bytes(overlay_text) if overlay_text is not None else NULL
 *     # but then Cython complains about either types or pointers to temporary references.
 *     cdef const char* overlay_text_ptr = NULL             # <<<<<<<<<<<<<<
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:
 */
  __pyx_v_overlay_text_ptr = NULL;

  /* "core.pyx":6148
 *     cdef const char* overlay_text_ptr = NULL
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  __pyx_t_1 = (__pyx_v_overlay_text != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":6149
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable             # <<<<<<<<<<<<<<
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 */
    __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_overlay_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_overlay_text_b = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "core.pyx":6150
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*             # <<<<<<<<<<<<<<
 * 
 *     cimgui.PlotLines(
 */
    if (unlikely(__pyx_v_overlay_text_b == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 6150, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_overlay_text_b); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 6150, __pyx_L1_error)
    __pyx_v_overlay_text_ptr = __pyx_t_4;

    /* "core.pyx":6148
 *     cdef const char* overlay_text_ptr = NULL
 *     cdef bytes overlay_text_b
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  }

  /* "core.pyx":6153
 * 
 *     cimgui.PlotLines(
 *         _bytes(label), &values[0], values_count,             # <<<<<<<<<<<<<<
 *         values_offset,
 *         overlay_text_ptr,
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6153, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6153, __pyx_L1_error)
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_values.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_values.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 6153, __pyx_L1_error)
  }

  /* "core.pyx":6157
 *         overlay_text_ptr,
 *         scale_min, scale_max,
 *         _cast_tuple_ImVec2(graph_size),             # <<<<<<<<<<<<<<
 *         stride
 *     )
 */
  __pyx_t_8 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_graph_size); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6157, __pyx_L1_error)

  /* "core.pyx":6152
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 *     cimgui.PlotLines(             # <<<<<<<<<<<<<<
 *         _bytes(label), &values[0], values_count,
 *         values_offset,
 */
  try {
    ImGui::PlotLines(__pyx_t_5, (&(*((float const  *) ( /* dim=0 */ (__pyx_v_values.data + __pyx_t_6 * __pyx_v_values.strides[0]) )))), __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text_ptr, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_t_8, __pyx_v_stride);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6152, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":6070
 * 
 * 
 * def plot_lines(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.plot_lines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_overlay_text_b);
  __PYX_XDEC_MEMVIEW(&__pyx_v_values, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6162
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_265plot_histogram(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_265plot_histogram = {"plot_histogram", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_265plot_histogram, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_265plot_histogram(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  __Pyx_memviewslice __pyx_v_values = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_values_count;
  int __pyx_v_values_offset;
  PyObject *__pyx_v_overlay_text = 0;
  float __pyx_v_scale_min;
  float __pyx_v_scale_max;
  PyObject *__pyx_v_graph_size = 0;
  int __pyx_v_stride;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot_histogram (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_values,&__pyx_n_s_values_count,&__pyx_n_s_values_offset,&__pyx_n_s_overlay_text,&__pyx_n_s_scale_min,&__pyx_n_s_scale_max,&__pyx_n_s_graph_size,&__pyx_n_s_stride,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "core.pyx":6167
 *         int values_count  = -1,
 *         int values_offset = 0,
 *         str overlay_text = None,             # <<<<<<<<<<<<<<
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 */
    values[4] = ((PyObject*)Py_None);

    /* "core.pyx":6170
 *         float scale_min = FLT_MAX,
 *         float scale_max = FLT_MAX,
 *         graph_size = (0, 0),             # <<<<<<<<<<<<<<
 *         int stride = sizeof(float),
 *     ):
 */
    values[7] = ((PyObject *)__pyx_tuple__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plot_histogram", 0, 2, 9, 1); __PYX_ERR(0, 6162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_count);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values_offset);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlay_text);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_min);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_max);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph_size);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot_histogram") < 0)) __PYX_ERR(0, 6162, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_values = __Pyx_PyObject_to_MemoryviewSlice_ds_float__const__(values[1], 0); if (unlikely(!__pyx_v_values.memview)) __PYX_ERR(0, 6164, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_values_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_values_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6165, __pyx_L3_error)
    } else {
      __pyx_v_values_count = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_values_offset = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_values_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6166, __pyx_L3_error)
    } else {
      __pyx_v_values_offset = ((int)0);
    }
    __pyx_v_overlay_text = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_scale_min = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_scale_min == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6168, __pyx_L3_error)
    } else {
      __pyx_v_scale_min = __pyx_k__54;
    }
    if (values[6]) {
      __pyx_v_scale_max = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_scale_max == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6169, __pyx_L3_error)
    } else {
      __pyx_v_scale_max = __pyx_k__55;
    }
    __pyx_v_graph_size = values[7];
    if (values[8]) {
      __pyx_v_stride = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_stride == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6171, __pyx_L3_error)
    } else {
      __pyx_v_stride = __pyx_k__56;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot_histogram", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.plot_histogram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 0, "label", 1))) __PYX_ERR(0, 6163, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_values.memview) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "values"); __PYX_ERR(0, 6164, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_overlay_text), (&PyString_Type), 1, "overlay_text", 1))) __PYX_ERR(0, 6167, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_264plot_histogram(__pyx_self, __pyx_v_label, __pyx_v_values, __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_v_graph_size, __pyx_v_stride);

  /* "core.pyx":6162
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_264plot_histogram(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, __Pyx_memviewslice __pyx_v_values, int __pyx_v_values_count, int __pyx_v_values_offset, PyObject *__pyx_v_overlay_text, float __pyx_v_scale_min, float __pyx_v_scale_max, PyObject *__pyx_v_graph_size, int __pyx_v_stride) {
  char const *__pyx_v_overlay_text_ptr;
  PyObject *__pyx_v_overlay_text_b = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  char const *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  ImVec2 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("plot_histogram", 0);

  /* "core.pyx":6232
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_values_count == -1L) != 0);
  if (__pyx_t_1) {

    /* "core.pyx":6233
 *     """
 *     if values_count == -1:
 *         values_count = values.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     # Would be nicer as something like
 */
    __pyx_v_values_count = (__pyx_v_values.shape[0]);

    /* "core.pyx":6232
 *             )
 *     """
 *     if values_count == -1:             # <<<<<<<<<<<<<<
 *         values_count = values.shape[0]
 * 
 */
  }

  /* "core.pyx":6238
 *     #   _bytes(overlay_text) if overlay_text is not None else NULL
 *     # but then Cython complains about either types or pointers to temporary references.
 *     cdef const char* overlay_text_ptr = NULL             # <<<<<<<<<<<<<<
 *     cdef bytes overlay_text_b
 * 
 */
  __pyx_v_overlay_text_ptr = NULL;

  /* "core.pyx":6241
 *     cdef bytes overlay_text_b
 * 
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  __pyx_t_1 = (__pyx_v_overlay_text != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":6242
 * 
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable             # <<<<<<<<<<<<<<
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 */
    __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_overlay_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_overlay_text_b = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "core.pyx":6243
 *     if overlay_text is not None:
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*             # <<<<<<<<<<<<<<
 * 
 *     cimgui.PlotHistogram(
 */
    if (unlikely(__pyx_v_overlay_text_b == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 6243, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_overlay_text_b); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 6243, __pyx_L1_error)
    __pyx_v_overlay_text_ptr = __pyx_t_4;

    /* "core.pyx":6241
 *     cdef bytes overlay_text_b
 * 
 *     if overlay_text is not None:             # <<<<<<<<<<<<<<
 *         overlay_text_b = _bytes(overlay_text) # must be assigned to a variable
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 */
  }

  /* "core.pyx":6246
 * 
 *     cimgui.PlotHistogram(
 *         _bytes(label), &values[0], values_count,             # <<<<<<<<<<<<<<
 *         values_offset,
 *         overlay_text_ptr,
 */
  __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6246, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 6246, __pyx_L1_error)
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_values.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_values.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 6246, __pyx_L1_error)
  }

  /* "core.pyx":6250
 *         overlay_text_ptr,
 *         scale_min, scale_max,
 *         _cast_tuple_ImVec2(graph_size),             # <<<<<<<<<<<<<<
 *         stride
 *     )
 */
  __pyx_t_8 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_graph_size); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6250, __pyx_L1_error)

  /* "core.pyx":6245
 *         overlay_text_ptr = overlay_text_b # auto-convert bytes to char*
 * 
 *     cimgui.PlotHistogram(             # <<<<<<<<<<<<<<
 *         _bytes(label), &values[0], values_count,
 *         values_offset,
 */
  try {
    ImGui::PlotHistogram(__pyx_t_5, (&(*((float const  *) ( /* dim=0 */ (__pyx_v_values.data + __pyx_t_6 * __pyx_v_values.strides[0]) )))), __pyx_v_values_count, __pyx_v_values_offset, __pyx_v_overlay_text_ptr, __pyx_v_scale_min, __pyx_v_scale_max, __pyx_t_8, __pyx_v_stride);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6245, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":6162
 * 
 * 
 * def plot_histogram(             # <<<<<<<<<<<<<<
 *         str label not None,
 *         const float[:] values not None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.plot_histogram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_overlay_text_b);
  __PYX_XDEC_MEMVIEW(&__pyx_v_values, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6254
 *     )
 * 
 * def progress_bar(float fraction, size = (0,0), str overlay = ""):             # <<<<<<<<<<<<<<
 *     """ Show a progress bar
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_267progress_bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_267progress_bar = {"progress_bar", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_267progress_bar, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_267progress_bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fraction;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_overlay = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("progress_bar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fraction,&__pyx_n_s_size,&__pyx_n_s_overlay,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_tuple__8);
    values[2] = ((PyObject*)__pyx_kp_s__32);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fraction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlay);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "progress_bar") < 0)) __PYX_ERR(0, 6254, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fraction = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_fraction == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6254, __pyx_L3_error)
    __pyx_v_size = values[1];
    __pyx_v_overlay = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("progress_bar", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.progress_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_overlay), (&PyString_Type), 1, "overlay", 1))) __PYX_ERR(0, 6254, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_266progress_bar(__pyx_self, __pyx_v_fraction, __pyx_v_size, __pyx_v_overlay);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_266progress_bar(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_fraction, PyObject *__pyx_v_size, PyObject *__pyx_v_overlay) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("progress_bar", 0);

  /* "core.pyx":6280
 * 
 *     """
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))             # <<<<<<<<<<<<<<
 * 
 * def set_item_default_focus():
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_size); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6280, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_4core__bytes(__pyx_v_overlay); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6280, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 6280, __pyx_L1_error)
  try {
    ImGui::ProgressBar(__pyx_v_fraction, __pyx_t_1, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6280, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":6254
 *     )
 * 
 * def progress_bar(float fraction, size = (0,0), str overlay = ""):             # <<<<<<<<<<<<<<
 *     """ Show a progress bar
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.progress_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6282
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))
 * 
 * def set_item_default_focus():             # <<<<<<<<<<<<<<
 *     """Make last item the default focused item of a window.
 *     Please use instead of "if (is_window_appearing()) set_scroll_here()" to signify "default item".
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_269set_item_default_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_269set_item_default_focus = {"set_item_default_focus", (PyCFunction)__pyx_pw_4core_269set_item_default_focus, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_269set_item_default_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_item_default_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_268set_item_default_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_268set_item_default_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_item_default_focus", 0);

  /* "core.pyx":6289
 *         void SetItemDefaultFocus()
 *     """
 *     cimgui.SetItemDefaultFocus()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetItemDefaultFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6289, __pyx_L1_error)
  }

  /* "core.pyx":6282
 *     cimgui.ProgressBar(fraction, _cast_tuple_ImVec2(size), _bytes(overlay))
 * 
 * def set_item_default_focus():             # <<<<<<<<<<<<<<
 *     """Make last item the default focused item of a window.
 *     Please use instead of "if (is_window_appearing()) set_scroll_here()" to signify "default item".
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_item_default_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6292
 * 
 * 
 * def set_keyboard_focus_here(int offset = 0):             # <<<<<<<<<<<<<<
 *     """Focus keyboard on the next widget.
 *     Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_271set_keyboard_focus_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_271set_keyboard_focus_here = {"set_keyboard_focus_here", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_271set_keyboard_focus_here, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_271set_keyboard_focus_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_offset;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_keyboard_focus_here (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offset,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_keyboard_focus_here") < 0)) __PYX_ERR(0, 6292, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_offset = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6292, __pyx_L3_error)
    } else {
      __pyx_v_offset = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_keyboard_focus_here", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6292, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_keyboard_focus_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_270set_keyboard_focus_here(__pyx_self, __pyx_v_offset);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_270set_keyboard_focus_here(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_keyboard_focus_here", 0);

  /* "core.pyx":6299
 *         void SetKeyboardFocusHere(int offset = 0)
 *     """
 *     return cimgui.SetKeyboardFocusHere(offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetKeyboardFocusHere(__pyx_v_offset);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6299, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":6292
 * 
 * 
 * def set_keyboard_focus_here(int offset = 0):             # <<<<<<<<<<<<<<
 *     """Focus keyboard on the next widget.
 *     Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_keyboard_focus_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6302
 * 
 * 
 * def is_item_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_273is_item_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_273is_item_hovered = {"is_item_hovered", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_273is_item_hovered, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_273is_item_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiHoveredFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_hovered (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_item_hovered") < 0)) __PYX_ERR(0, 6302, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiHoveredFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiHoveredFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6303, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiHoveredFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_item_hovered", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6302, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_272is_item_hovered(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_272is_item_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_hovered", 0);

  /* "core.pyx":6313
 *         bool IsItemHovered(ImGuiHoveredFlags flags = 0)
 *     """
 *     return cimgui.IsItemHovered(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemHovered(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6313, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6302
 * 
 * 
 * def is_item_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6316
 * 
 * 
 * def is_item_focused():             # <<<<<<<<<<<<<<
 *     """Check if the last item is focused
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_275is_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_275is_item_focused = {"is_item_focused", (PyCFunction)__pyx_pw_4core_275is_item_focused, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_275is_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_274is_item_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_274is_item_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_focused", 0);

  /* "core.pyx":6325
 *         bool IsItemFocused()
 *     """
 *     return cimgui.IsItemFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6325, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6316
 * 
 * 
 * def is_item_focused():             # <<<<<<<<<<<<<<
 *     """Check if the last item is focused
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_item_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6328
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_277is_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_277is_item_active = {"is_item_active", (PyCFunction)__pyx_pw_4core_277is_item_active, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_277is_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_active (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_276is_item_active(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_276is_item_active(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_active", 0);

  /* "core.pyx":6338
 *         bool IsItemActive()
 *     """
 *     return cimgui.IsItemActive()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemActive();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6338, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6328
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_item_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6341
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_279is_item_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_279is_item_clicked = {"is_item_clicked", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_279is_item_clicked, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_279is_item_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_mouse_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mouse_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_item_clicked") < 0)) __PYX_ERR(0, 6341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6341, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_item_clicked", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_item_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_278is_item_clicked(__pyx_self, __pyx_v_mouse_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_278is_item_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_clicked", 0);

  /* "core.pyx":6351
 *         bool IsItemClicked(int mouse_button = 0)
 *     """
 *     return cimgui.IsItemClicked(mouse_button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemClicked(__pyx_v_mouse_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6351, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6341
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_item_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6354
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_281is_item_visible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_281is_item_visible = {"is_item_visible", (PyCFunction)__pyx_pw_4core_281is_item_visible, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_281is_item_visible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_visible (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_280is_item_visible(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_280is_item_visible(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_item_visible", 0);

  /* "core.pyx":6364
 *         bool IsItemVisible()
 *     """
 *     return cimgui.IsItemVisible()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemVisible();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6364, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6354
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_item_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6367
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_283is_any_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_283is_any_item_hovered = {"is_any_item_hovered", (PyCFunction)__pyx_pw_4core_283is_any_item_hovered, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_283is_any_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_hovered (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_282is_any_item_hovered(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_282is_any_item_hovered(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_any_item_hovered", 0);

  /* "core.pyx":6376
 *         bool IsAnyItemHovered()
 *     """
 *     return cimgui.IsAnyItemHovered()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemHovered();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6376, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6367
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_any_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6379
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_285is_any_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_285is_any_item_active = {"is_any_item_active", (PyCFunction)__pyx_pw_4core_285is_any_item_active, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_285is_any_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_active (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_284is_any_item_active(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_284is_any_item_active(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_any_item_active", 0);

  /* "core.pyx":6388
 *         bool IsAnyItemActive()
 *     """
 *     return cimgui.IsAnyItemActive()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemActive();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6388, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6379
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_any_item_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6391
 * 
 * 
 * def is_any_item_focused():             # <<<<<<<<<<<<<<
 *     """Is any of the items focused.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_287is_any_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_287is_any_item_focused = {"is_any_item_focused", (PyCFunction)__pyx_pw_4core_287is_any_item_focused, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_287is_any_item_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_286is_any_item_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_286is_any_item_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_any_item_focused", 0);

  /* "core.pyx":6400
 *         bool IsAnyItemFocused()
 *     """
 *     return cimgui.IsAnyItemFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6400, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6391
 * 
 * 
 * def is_any_item_focused():             # <<<<<<<<<<<<<<
 *     """Is any of the items focused.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_any_item_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6403
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_289get_item_rect_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_289get_item_rect_min = {"get_item_rect_min", (PyCFunction)__pyx_pw_4core_289get_item_rect_min, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_289get_item_rect_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_min (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_288get_item_rect_min(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_288get_item_rect_min(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_rect_min", 0);

  /* "core.pyx":6412
 *         ImVec2 GetItemRectMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectMin())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectMin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6412, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6403
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_item_rect_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6415
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_291get_item_rect_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_291get_item_rect_max = {"get_item_rect_max", (PyCFunction)__pyx_pw_4core_291get_item_rect_max, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_291get_item_rect_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_max (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_290get_item_rect_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_290get_item_rect_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_rect_max", 0);

  /* "core.pyx":6424
 *         ImVec2 GetItemRectMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6424, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6415
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_item_rect_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6427
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_293get_item_rect_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_293get_item_rect_size = {"get_item_rect_size", (PyCFunction)__pyx_pw_4core_293get_item_rect_size, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_293get_item_rect_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_292get_item_rect_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_292get_item_rect_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_rect_size", 0);

  /* "core.pyx":6436
 *         ImVec2 GetItemRectSize()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectSize())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6436, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6427
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_item_rect_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6439
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_295set_item_allow_overlap(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_295set_item_allow_overlap = {"set_item_allow_overlap", (PyCFunction)__pyx_pw_4core_295set_item_allow_overlap, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_295set_item_allow_overlap(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_item_allow_overlap (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_294set_item_allow_overlap(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_294set_item_allow_overlap(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_item_allow_overlap", 0);

  /* "core.pyx":6447
 *         void SetItemAllowOverlap()
 *     """
 *     cimgui.SetItemAllowOverlap()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetItemAllowOverlap();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6447, __pyx_L1_error)
  }

  /* "core.pyx":6439
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_item_allow_overlap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6450
 * 
 * 
 * def is_window_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_297is_window_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_297is_window_hovered = {"is_window_hovered", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_297is_window_hovered, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_297is_window_hovered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiHoveredFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_hovered (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_window_hovered") < 0)) __PYX_ERR(0, 6450, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiHoveredFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiHoveredFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6451, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiHoveredFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_window_hovered", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6450, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_window_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_296is_window_hovered(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_296is_window_hovered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_hovered", 0);

  /* "core.pyx":6462
 *         bool IsWindowHovered(ImGuiFocusedFlags flags = 0)
 *     """
 *     return cimgui.IsWindowHovered(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowHovered(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6462, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6450
 * 
 * 
 * def is_window_hovered(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_window_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6465
 * 
 * 
 * def is_window_focused(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_299is_window_focused(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_299is_window_focused = {"is_window_focused", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_299is_window_focused, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_299is_window_focused(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiHoveredFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_focused (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_window_focused") < 0)) __PYX_ERR(0, 6465, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiHoveredFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiHoveredFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6466, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiHoveredFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_window_focused", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6465, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_window_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_298is_window_focused(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_298is_window_focused(CYTHON_UNUSED PyObject *__pyx_self, ImGuiHoveredFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_focused", 0);

  /* "core.pyx":6476
 *         bool IsWindowFocused(ImGuiFocusedFlags flags = 0)
 *     """
 *     return cimgui.IsWindowFocused(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowFocused(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6476, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6465
 * 
 * 
 * def is_window_focused(             # <<<<<<<<<<<<<<
 *         cimgui.ImGuiHoveredFlags flags=0
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_window_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6479
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_301is_rect_visible(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_301is_rect_visible = {"is_rect_visible", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_301is_rect_visible, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_301is_rect_visible(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_size_width;
  float __pyx_v_size_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_rect_visible (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size_width,&__pyx_n_s_size_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_rect_visible", 1, 2, 2, 1); __PYX_ERR(0, 6479, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_rect_visible") < 0)) __PYX_ERR(0, 6479, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_size_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_size_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6479, __pyx_L3_error)
    __pyx_v_size_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_size_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6479, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_rect_visible", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6479, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_rect_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_300is_rect_visible(__pyx_self, __pyx_v_size_width, __pyx_v_size_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_300is_rect_visible(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_size_width, float __pyx_v_size_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_rect_visible", 0);

  /* "core.pyx":6493
 *         bool IsRectVisible(const ImVec2& size)
 *     """
 *     return cimgui.IsRectVisible(_cast_args_ImVec2(size_width, size_height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_size_width, __pyx_v_size_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6493, __pyx_L1_error)
  try {
    __pyx_t_2 = ImGui::IsRectVisible(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6493, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":6479
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.is_rect_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6496
 * 
 * 
 * def get_style_color_name(int index):             # <<<<<<<<<<<<<<
 *     """Get the style color name for a given ImGuiCol index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_303get_style_color_name(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static PyMethodDef __pyx_mdef_4core_303get_style_color_name = {"get_style_color_name", (PyCFunction)__pyx_pw_4core_303get_style_color_name, METH_O, 0};
static PyObject *__pyx_pw_4core_303get_style_color_name(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style_color_name (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6496, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_style_color_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_302get_style_color_name(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_302get_style_color_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  char const *__pyx_v_c_string;
  CYTHON_UNUSED PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style_color_name", 0);

  /* "core.pyx":6502
 *         const char* GetStyleColorName(ImGuiCol idx)
 *     """
 *     cdef const char* c_string = cimgui.GetStyleColorName(index)             # <<<<<<<<<<<<<<
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")
 */
  try {
    __pyx_t_1 = ImGui::GetStyleColorName(__pyx_v_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6502, __pyx_L1_error)
  }
  __pyx_v_c_string = __pyx_t_1;

  /* "core.pyx":6503
 *     """
 *     cdef const char* c_string = cimgui.GetStyleColorName(index)
 *     cdef bytes py_string = c_string             # <<<<<<<<<<<<<<
 *     return c_string.decode("utf-8")
 * 
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_string = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":6504
 *     cdef const char* c_string = cimgui.GetStyleColorName(index)
 *     cdef bytes py_string = c_string
 *     return c_string.decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_c_string, 0, strlen(__pyx_v_c_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6496
 * 
 * 
 * def get_style_color_name(int index):             # <<<<<<<<<<<<<<
 *     """Get the style color name for a given ImGuiCol index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_style_color_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6507
 * 
 * 
 * def get_time():             # <<<<<<<<<<<<<<
 *     """Seconds since program start.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_305get_time(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_305get_time = {"get_time", (PyCFunction)__pyx_pw_4core_305get_time, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_305get_time(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_time (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_304get_time(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_304get_time(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_time", 0);

  /* "core.pyx":6516
 *         float GetTime()
 *     """
 *     return cimgui.GetTime()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetTime();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6516, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6507
 * 
 * 
 * def get_time():             # <<<<<<<<<<<<<<
 *     """Seconds since program start.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6519
 * 
 * 
 * def get_key_index(int key):             # <<<<<<<<<<<<<<
 *     """Map ImGuiKey_* values into user's key index. == io.KeyMap[key]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_307get_key_index(PyObject *__pyx_self, PyObject *__pyx_arg_key); /*proto*/
static PyMethodDef __pyx_mdef_4core_307get_key_index = {"get_key_index", (PyCFunction)__pyx_pw_4core_307get_key_index, METH_O, 0};
static PyObject *__pyx_pw_4core_307get_key_index(PyObject *__pyx_self, PyObject *__pyx_arg_key) {
  int __pyx_v_key;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_key_index (wrapper)", 0);
  assert(__pyx_arg_key); {
    __pyx_v_key = __Pyx_PyInt_As_int(__pyx_arg_key); if (unlikely((__pyx_v_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6519, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_key_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_306get_key_index(__pyx_self, ((int)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_306get_key_index(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_key_index", 0);

  /* "core.pyx":6528
 *         int GetKeyIndex(ImGuiKey imgui_key)
 *     """
 *     return cimgui.GetKeyIndex(key)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetKeyIndex(__pyx_v_key);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6528, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6519
 * 
 * 
 * def get_key_index(int key):             # <<<<<<<<<<<<<<
 *     """Map ImGuiKey_* values into user's key index. == io.KeyMap[key]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_key_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6531
 * 
 * 
 * def is_key_pressed(int key_index, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Was key pressed (went from !Down to Down).
 *        If repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_309is_key_pressed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_309is_key_pressed = {"is_key_pressed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_309is_key_pressed, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_309is_key_pressed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_key_index;
  bool __pyx_v_repeat;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_key_pressed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key_index,&__pyx_n_s_repeat,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repeat);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_key_pressed") < 0)) __PYX_ERR(0, 6531, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_key_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6531, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_repeat = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_repeat == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6531, __pyx_L3_error)
    } else {
      __pyx_v_repeat = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_key_pressed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6531, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_key_pressed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_308is_key_pressed(__pyx_self, __pyx_v_key_index, __pyx_v_repeat);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_308is_key_pressed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_key_index, bool __pyx_v_repeat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_key_pressed", 0);

  /* "core.pyx":6541
 *         bool IsKeyPressed(int user_key_index)
 *     """
 *     return cimgui.IsKeyPressed(key_index, repeat)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsKeyPressed(__pyx_v_key_index, __pyx_v_repeat);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6541, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6531
 * 
 * 
 * def is_key_pressed(int key_index, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Was key pressed (went from !Down to Down).
 *        If repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_key_pressed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6544
 * 
 * 
 * def is_key_down(int key_index):             # <<<<<<<<<<<<<<
 *     """Returns if key is being held -- io.KeysDown[user_key_index].
 *        Note that imgui doesn't know the semantic of each entry of
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_311is_key_down(PyObject *__pyx_self, PyObject *__pyx_arg_key_index); /*proto*/
static PyMethodDef __pyx_mdef_4core_311is_key_down = {"is_key_down", (PyCFunction)__pyx_pw_4core_311is_key_down, METH_O, 0};
static PyObject *__pyx_pw_4core_311is_key_down(PyObject *__pyx_self, PyObject *__pyx_arg_key_index) {
  int __pyx_v_key_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_key_down (wrapper)", 0);
  assert(__pyx_arg_key_index); {
    __pyx_v_key_index = __Pyx_PyInt_As_int(__pyx_arg_key_index); if (unlikely((__pyx_v_key_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6544, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_key_down", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_310is_key_down(__pyx_self, ((int)__pyx_v_key_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_310is_key_down(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_key_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_key_down", 0);

  /* "core.pyx":6556
 *         bool IsKeyDown(int user_key_index)
 *     """
 *     return cimgui.IsKeyDown(key_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsKeyDown(__pyx_v_key_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6556, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6544
 * 
 * 
 * def is_key_down(int key_index):             # <<<<<<<<<<<<<<
 *     """Returns if key is being held -- io.KeysDown[user_key_index].
 *        Note that imgui doesn't know the semantic of each entry of
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_key_down", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6559
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_313is_mouse_hovering_rect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_313is_mouse_hovering_rect = {"is_mouse_hovering_rect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_313is_mouse_hovering_rect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_313is_mouse_hovering_rect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r_min_x;
  float __pyx_v_r_min_y;
  float __pyx_v_r_max_x;
  float __pyx_v_r_max_y;
  bool __pyx_v_clip;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_hovering_rect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r_min_x,&__pyx_n_s_r_min_y,&__pyx_n_s_r_max_x,&__pyx_n_s_r_max_y,&__pyx_n_s_clip,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_min_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_min_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 1); __PYX_ERR(0, 6559, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_max_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 2); __PYX_ERR(0, 6559, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_max_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 3); __PYX_ERR(0, 6559, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clip);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_hovering_rect") < 0)) __PYX_ERR(0, 6559, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_r_min_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r_min_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6560, __pyx_L3_error)
    __pyx_v_r_min_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r_min_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6560, __pyx_L3_error)
    __pyx_v_r_max_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_r_max_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6561, __pyx_L3_error)
    __pyx_v_r_max_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_r_max_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6561, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_clip = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_clip == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6562, __pyx_L3_error)
    } else {

      /* "core.pyx":6562
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 *     bool clip=True             # <<<<<<<<<<<<<<
 * ):
 *     """Test if mouse is hovering rectangle with given coordinates.
 */
      __pyx_v_clip = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6559, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_mouse_hovering_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_312is_mouse_hovering_rect(__pyx_self, __pyx_v_r_min_x, __pyx_v_r_min_y, __pyx_v_r_max_x, __pyx_v_r_max_y, __pyx_v_clip);

  /* "core.pyx":6559
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_312is_mouse_hovering_rect(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r_min_x, float __pyx_v_r_min_y, float __pyx_v_r_max_x, float __pyx_v_r_max_y, bool __pyx_v_clip) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_hovering_rect", 0);

  /* "core.pyx":6580
 *         )
 *     """
 *     return cimgui.IsMouseHoveringRect(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":6581
 *     """
 *     return cimgui.IsMouseHoveringRect(
 *         _cast_args_ImVec2(r_min_x, r_min_y),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 *         clip
 */
  __pyx_t_1 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_r_min_x, __pyx_v_r_min_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6581, __pyx_L1_error)

  /* "core.pyx":6582
 *     return cimgui.IsMouseHoveringRect(
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),             # <<<<<<<<<<<<<<
 *         clip
 *     )
 */
  __pyx_t_2 = __pyx_f_4core__cast_args_ImVec2(__pyx_v_r_max_x, __pyx_v_r_max_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6582, __pyx_L1_error)

  /* "core.pyx":6580
 *         )
 *     """
 *     return cimgui.IsMouseHoveringRect(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 */
  try {
    __pyx_t_3 = ImGui::IsMouseHoveringRect(__pyx_t_1, __pyx_t_2, __pyx_v_clip);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6580, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "core.pyx":6559
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.is_mouse_hovering_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6587
 * 
 * 
 * def is_mouse_double_clicked(int button = 0):             # <<<<<<<<<<<<<<
 *     """Return True if mouse was double-clicked.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_315is_mouse_double_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_315is_mouse_double_clicked = {"is_mouse_double_clicked", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_315is_mouse_double_clicked, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_315is_mouse_double_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_double_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_double_clicked") < 0)) __PYX_ERR(0, 6587, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6587, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_double_clicked", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6587, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_mouse_double_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_314is_mouse_double_clicked(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_314is_mouse_double_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_double_clicked", 0);

  /* "core.pyx":6601
 *          bool IsMouseDoubleClicked(int button);
 *     """
 *     return cimgui.IsMouseDoubleClicked(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDoubleClicked(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6601, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6587
 * 
 * 
 * def is_mouse_double_clicked(int button = 0):             # <<<<<<<<<<<<<<
 *     """Return True if mouse was double-clicked.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_mouse_double_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6604
 * 
 * 
 * def is_mouse_clicked(int button = 0, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was clicked this frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_317is_mouse_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_317is_mouse_clicked = {"is_mouse_clicked", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_317is_mouse_clicked, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_317is_mouse_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  bool __pyx_v_repeat;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_repeat,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repeat);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_clicked") < 0)) __PYX_ERR(0, 6604, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6604, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_repeat = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_repeat == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6604, __pyx_L3_error)
    } else {
      __pyx_v_repeat = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_clicked", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6604, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_mouse_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_316is_mouse_clicked(__pyx_self, __pyx_v_button, __pyx_v_repeat);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_316is_mouse_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, bool __pyx_v_repeat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_clicked", 0);

  /* "core.pyx":6617
 *         bool IsMouseClicked(int button, bool repeat = false)
 *     """
 *     return cimgui.IsMouseClicked(button, repeat)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseClicked(__pyx_v_button, __pyx_v_repeat);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6617, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6604
 * 
 * 
 * def is_mouse_clicked(int button = 0, bool repeat = False):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was clicked this frame.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_mouse_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6620
 * 
 * 
 * def is_mouse_released(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was released this frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_319is_mouse_released(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_319is_mouse_released = {"is_mouse_released", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_319is_mouse_released, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_319is_mouse_released(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_released (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_released") < 0)) __PYX_ERR(0, 6620, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6620, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_released", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6620, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_mouse_released", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_318is_mouse_released(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_318is_mouse_released(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_released", 0);

  /* "core.pyx":6632
 *         bool IsMouseReleased(int button)
 *     """
 *     return cimgui.IsMouseReleased(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseReleased(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6632, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6620
 * 
 * 
 * def is_mouse_released(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse was released this frame.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_mouse_released", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6635
 * 
 * 
 * def is_mouse_down(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse is down.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_321is_mouse_down(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_321is_mouse_down = {"is_mouse_down", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_321is_mouse_down, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_321is_mouse_down(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_down (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_down") < 0)) __PYX_ERR(0, 6635, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6635, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_down", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6635, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_mouse_down", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_320is_mouse_down(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_320is_mouse_down(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_down", 0);

  /* "core.pyx":6647
 *         bool IsMouseDown(int button)
 *     """
 *     return cimgui.IsMouseDown(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDown(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6647, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6635
 * 
 * 
 * def is_mouse_down(int button = 0):             # <<<<<<<<<<<<<<
 *     """Returns if the mouse is down.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_mouse_down", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6650
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_323is_mouse_dragging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_323is_mouse_dragging = {"is_mouse_dragging", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_323is_mouse_dragging, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_323is_mouse_dragging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  float __pyx_v_lock_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_dragging (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_lock_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lock_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_dragging") < 0)) __PYX_ERR(0, 6650, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6650, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_lock_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lock_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6650, __pyx_L3_error)
    } else {
      __pyx_v_lock_threshold = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_dragging", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6650, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.is_mouse_dragging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_322is_mouse_dragging(__pyx_self, __pyx_v_button, __pyx_v_lock_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_322is_mouse_dragging(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_mouse_dragging", 0);

  /* "core.pyx":6664
 *         bool IsMouseDragging(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return cimgui.IsMouseDragging(button, lock_threshold)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDragging(__pyx_v_button, __pyx_v_lock_threshold);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6664, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6650
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.is_mouse_dragging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6667
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_325get_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_325get_mouse_drag_delta = {"get_mouse_drag_delta", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_325get_mouse_drag_delta, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_325get_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  float __pyx_v_lock_threshold;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_drag_delta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_lock_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lock_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_mouse_drag_delta") < 0)) __PYX_ERR(0, 6667, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6667, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_lock_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lock_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6667, __pyx_L3_error)
    } else {
      __pyx_v_lock_threshold = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_mouse_drag_delta", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6667, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_324get_mouse_drag_delta(__pyx_self, __pyx_v_button, __pyx_v_lock_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_324get_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mouse_drag_delta", 0);

  /* "core.pyx":6681
 *         ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMouseDragDelta(button, lock_threshold)
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":6682
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.GetMouseDragDelta(button, lock_threshold)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetMouseDragDelta(__pyx_v_button, __pyx_v_lock_threshold);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6682, __pyx_L1_error)
  }

  /* "core.pyx":6681
 *         ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMouseDragDelta(button, lock_threshold)
 *     )
 */
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6667
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6686
 * 
 * 
 * def get_mouse_pos():             # <<<<<<<<<<<<<<
 *     """Current mouse position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_327get_mouse_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_327get_mouse_pos = {"get_mouse_pos", (PyCFunction)__pyx_pw_4core_327get_mouse_pos, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_327get_mouse_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_326get_mouse_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_326get_mouse_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mouse_pos", 0);

  /* "core.pyx":6695
 *         ImVec2 GetMousePos()
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMousePos()
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":6696
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.GetMousePos()             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetMousePos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6696, __pyx_L1_error)
  }

  /* "core.pyx":6695
 *         ImVec2 GetMousePos()
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMousePos()
 *     )
 */
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6686
 * 
 * 
 * def get_mouse_pos():             # <<<<<<<<<<<<<<
 *     """Current mouse position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_mouse_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6702
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_329reset_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_329reset_mouse_drag_delta = {"reset_mouse_drag_delta", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_329reset_mouse_drag_delta, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_329reset_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_mouse_drag_delta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_mouse_drag_delta") < 0)) __PYX_ERR(0, 6702, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6702, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_mouse_drag_delta", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6702, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.reset_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_328reset_mouse_drag_delta(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_328reset_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_mouse_drag_delta", 0);

  /* "core.pyx":6711
 *         void ResetMouseDragDelta(int button = 0)
 *     """
 *     cimgui.ResetMouseDragDelta(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ResetMouseDragDelta(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6711, __pyx_L1_error)
  }

  /* "core.pyx":6702
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.reset_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6714
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_331get_mouse_cursor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_331get_mouse_cursor = {"get_mouse_cursor", (PyCFunction)__pyx_pw_4core_331get_mouse_cursor, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_331get_mouse_cursor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_cursor (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_330get_mouse_cursor(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_330get_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiMouseCursor __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mouse_cursor", 0);

  /* "core.pyx":6720
 *         ImGuiMouseCursor GetMouseCursor()
 *     """
 *     return cimgui.GetMouseCursor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetMouseCursor();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6720, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiMouseCursor(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6714
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6723
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_333set_mouse_cursor(PyObject *__pyx_self, PyObject *__pyx_arg_mouse_cursor_type); /*proto*/
static PyMethodDef __pyx_mdef_4core_333set_mouse_cursor = {"set_mouse_cursor", (PyCFunction)__pyx_pw_4core_333set_mouse_cursor, METH_O, 0};
static PyObject *__pyx_pw_4core_333set_mouse_cursor(PyObject *__pyx_self, PyObject *__pyx_arg_mouse_cursor_type) {
  ImGuiMouseCursor __pyx_v_mouse_cursor_type;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mouse_cursor (wrapper)", 0);
  assert(__pyx_arg_mouse_cursor_type); {
    __pyx_v_mouse_cursor_type = __Pyx_PyInt_As_ImGuiMouseCursor(__pyx_arg_mouse_cursor_type); if (unlikely((__pyx_v_mouse_cursor_type == ((ImGuiMouseCursor)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6723, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_332set_mouse_cursor(__pyx_self, ((ImGuiMouseCursor)__pyx_v_mouse_cursor_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_332set_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self, ImGuiMouseCursor __pyx_v_mouse_cursor_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_mouse_cursor", 0);

  /* "core.pyx":6732
 *         void SetMouseCursor(ImGuiMouseCursor type)
 *     """
 *     return cimgui.SetMouseCursor(mouse_cursor_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetMouseCursor(__pyx_v_mouse_cursor_type);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6732, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":6723
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6735
 * 
 * 
 * def set_scroll_here(float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll here.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_335set_scroll_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_335set_scroll_here = {"set_scroll_here", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_335set_scroll_here, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_335set_scroll_here(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_center_y_ratio;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_here (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_center_y_ratio,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center_y_ratio);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_scroll_here") < 0)) __PYX_ERR(0, 6735, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_center_y_ratio = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_center_y_ratio == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6735, __pyx_L3_error)
    } else {
      __pyx_v_center_y_ratio = ((float)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_scroll_here", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6735, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_scroll_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_334set_scroll_here(__pyx_self, __pyx_v_center_y_ratio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_334set_scroll_here(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_center_y_ratio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_here", 0);

  /* "core.pyx":6746
 *         void SetScrollHere(float center_y_ratio = 0.5f)
 *     """
 *     return cimgui.SetScrollHere(center_y_ratio)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetScrollHere(__pyx_v_center_y_ratio);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6746, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":6735
 * 
 * 
 * def set_scroll_here(float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll here.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_scroll_here", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6749
 * 
 * 
 * def set_scroll_from_pos_y(float pos_y, float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll from position Y
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_337set_scroll_from_pos_y(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_337set_scroll_from_pos_y = {"set_scroll_from_pos_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_337set_scroll_from_pos_y, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_337set_scroll_from_pos_y(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_pos_y;
  float __pyx_v_center_y_ratio;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scroll_from_pos_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos_y,&__pyx_n_s_center_y_ratio,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center_y_ratio);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_scroll_from_pos_y") < 0)) __PYX_ERR(0, 6749, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pos_y = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_pos_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6749, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_center_y_ratio = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_center_y_ratio == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6749, __pyx_L3_error)
    } else {
      __pyx_v_center_y_ratio = ((float)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_scroll_from_pos_y", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6749, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_scroll_from_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_336set_scroll_from_pos_y(__pyx_self, __pyx_v_pos_y, __pyx_v_center_y_ratio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_336set_scroll_from_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_pos_y, float __pyx_v_center_y_ratio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_scroll_from_pos_y", 0);

  /* "core.pyx":6761
 *         void SetScrollFromPosY(float pos_y, float center_y_ratio = 0.5f)
 *     """
 *     return cimgui.SetScrollFromPosY(pos_y, center_y_ratio)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetScrollFromPosY(__pyx_v_pos_y, __pyx_v_center_y_ratio);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6761, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":6749
 * 
 * 
 * def set_scroll_from_pos_y(float pos_y, float center_y_ratio = 0.5):             # <<<<<<<<<<<<<<
 *     """Set scroll from position Y
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_scroll_from_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6764
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_339push_font(PyObject *__pyx_self, PyObject *__pyx_v_font); /*proto*/
static PyMethodDef __pyx_mdef_4core_339push_font = {"push_font", (PyCFunction)__pyx_pw_4core_339push_font, METH_O, 0};
static PyObject *__pyx_pw_4core_339push_font(PyObject *__pyx_self, PyObject *__pyx_v_font) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_font (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_font), __pyx_ptype_4core__Font, 1, "font", 0))) __PYX_ERR(0, 6764, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_338push_font(__pyx_self, ((struct __pyx_obj_4core__Font *)__pyx_v_font));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_338push_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__Font *__pyx_v_font) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_font", 0);

  /* "core.pyx":6801
 *         void PushFont(ImFont*)
 *     """
 *     cimgui.PushFont(font._ptr)             # <<<<<<<<<<<<<<
 * 
 * def pop_font():
 */
  try {
    ImGui::PushFont(__pyx_v_font->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6801, __pyx_L1_error)
  }

  /* "core.pyx":6764
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.push_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6803
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_341pop_font(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_341pop_font = {"pop_font", (PyCFunction)__pyx_pw_4core_341pop_font, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_341pop_font(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_font (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_340pop_font(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_340pop_font(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_font", 0);

  /* "core.pyx":6814
 *         void PopFont()
 *     """
 *     cimgui.PopFont()             # <<<<<<<<<<<<<<
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):
 */
  try {
    ImGui::PopFont();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6814, __pyx_L1_error)
  }

  /* "core.pyx":6803
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6816
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */

static PyObject *__pyx_pw_4core_343calc_text_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_calc_text_size(PyObject *__pyx_v_text, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4core_calc_text_size *__pyx_optional_args) {
  bool __pyx_v_hide_text_after_double_hash = ((bool)0);
  float __pyx_v_wrap_width = __pyx_k__57;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_text_size", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hide_text_after_double_hash = __pyx_optional_args->hide_text_after_double_hash;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_wrap_width = __pyx_optional_args->wrap_width;
      }
    }
  }

  /* "core.pyx":6844
 *         CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.CalcTextSize(
 *             _bytes(text),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "core.pyx":6846
 *     return _cast_ImVec2_tuple(
 *         cimgui.CalcTextSize(
 *             _bytes(text),             # <<<<<<<<<<<<<<
 *             NULL,
 *             hide_text_after_double_hash,
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 6846, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 6846, __pyx_L1_error)

  /* "core.pyx":6845
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.CalcTextSize(             # <<<<<<<<<<<<<<
 *             _bytes(text),
 *             NULL,
 */
  try {
    __pyx_t_3 = ImGui::CalcTextSize(__pyx_t_2, NULL, __pyx_v_hide_text_after_double_hash, __pyx_v_wrap_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6845, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":6844
 *         CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.CalcTextSize(
 *             _bytes(text),
 */
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":6816
 *     cimgui.PopFont()
 * 
 * cpdef calc_text_size(str text, bool hide_text_after_double_hash = False, float wrap_width = -1.0):             # <<<<<<<<<<<<<<
 *     """Calculate text size.
 *     Text can be multi-line.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.calc_text_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_343calc_text_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_343calc_text_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  bool __pyx_v_hide_text_after_double_hash;
  float __pyx_v_wrap_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_text_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_hide_text_after_double_hash,&__pyx_n_s_wrap_width,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hide_text_after_double_hash);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_width);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_text_size") < 0)) __PYX_ERR(0, 6816, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_hide_text_after_double_hash = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_hide_text_after_double_hash == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6816, __pyx_L3_error)
    } else {
      __pyx_v_hide_text_after_double_hash = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_wrap_width = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_wrap_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6816, __pyx_L3_error)
    } else {
      __pyx_v_wrap_width = __pyx_k__57;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_text_size", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6816, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.calc_text_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 6816, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_342calc_text_size(__pyx_self, __pyx_v_text, __pyx_v_hide_text_after_double_hash, __pyx_v_wrap_width);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_342calc_text_size(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, bool __pyx_v_hide_text_after_double_hash, float __pyx_v_wrap_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_calc_text_size __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_text_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.hide_text_after_double_hash = __pyx_v_hide_text_after_double_hash;
  __pyx_t_2.wrap_width = __pyx_v_wrap_width;
  __pyx_t_1 = __pyx_f_4core_calc_text_size(__pyx_v_text, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.calc_text_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6853
 *     )
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     """Push style variable on stack.
 * 
 */

static PyObject *__pyx_pw_4core_345push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_push_style_var(ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  ImVec2 __pyx_t_13;
  double __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_var", 0);

  /* "core.pyx":6886
 *         PushStyleVar(ImGuiStyleVar idx, float val)
 *     """
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiStyleVar_Count_);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "core.pyx":6887
 *     """
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):
 *         warnings.warn("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar(__pyx_v_variable); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "core.pyx":6888
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "core.pyx":6886
 *         PushStyleVar(ImGuiStyleVar idx, float val)
 *     """
 *     if not (0 <= variable < enums.ImGuiStyleVar_Count_):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  }

  /* "core.pyx":6890
 *         return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    /*try:*/ {

      /* "core.pyx":6891
 * 
 *     try:
 *         if isinstance(value, (tuple, list)):             # <<<<<<<<<<<<<<
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 */
      __pyx_t_1 = PyTuple_Check(__pyx_v_value); 
      __pyx_t_12 = (__pyx_t_1 != 0);
      if (!__pyx_t_12) {
      } else {
        __pyx_t_2 = __pyx_t_12;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_12 = PyList_Check(__pyx_v_value); 
      __pyx_t_1 = (__pyx_t_12 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L11_bool_binop_done:;
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "core.pyx":6892
 *     try:
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))             # <<<<<<<<<<<<<<
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))
 */
        __pyx_t_13 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6892, __pyx_L4_error)
        try {
          ImGui::PushStyleVar(__pyx_v_variable, __pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 6892, __pyx_L4_error)
        }

        /* "core.pyx":6891
 * 
 *     try:
 *         if isinstance(value, (tuple, list)):             # <<<<<<<<<<<<<<
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 */
        goto __pyx_L10;
      }

      /* "core.pyx":6894
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))             # <<<<<<<<<<<<<<
 *     except ValueError:
 *         raise ValueError(
 */
      /*else*/ {
        __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_v_value); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6894, __pyx_L4_error)
        try {
          ImGui::PushStyleVar(__pyx_v_variable, __pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 6894, __pyx_L4_error)
        }
      }
      __pyx_L10:;

      /* "core.pyx":6890
 *         return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
    }

    /* "core.pyx":6900
 *         )
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else:*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L7_except_return;
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "core.pyx":6895
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Style value must be float or two-elements list/tuple"
 */
    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 6895, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "core.pyx":6896
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Style value must be float or two-elements list/tuple"
 *         )
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6896, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 6896, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "core.pyx":6890
 *         return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L1_error;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L0;
  }

  /* "core.pyx":6853
 *     )
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     """Push style variable on stack.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_345push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_345push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiStyleVar __pyx_v_variable;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_var (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_var", 1, 2, 2, 1); __PYX_ERR(0, 6853, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_style_var") < 0)) __PYX_ERR(0, 6853, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiStyleVar(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6853, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_style_var", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6853, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_344push_style_var(__pyx_self, __pyx_v_variable, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_344push_style_var(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_var", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_push_style_var(__pyx_v_variable, __pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6903
 * 
 * 
 * cpdef push_style_color(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

static PyObject *__pyx_pw_4core_347push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_push_style_color(ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4core_push_style_color *__pyx_optional_args) {
  float __pyx_v_a = ((float)1.);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_color", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_a = __pyx_optional_args->a;
    }
  }

  /* "core.pyx":6939
 *         PushStyleColor(ImGuiCol idx, const ImVec4& col)
 *     """
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  __pyx_t_1 = (0 <= __pyx_v_variable);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_variable < ImGuiCol_COUNT);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "core.pyx":6940
 *     """
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):
 *         warnings.warn("Unknown style variable: {}".format(variable))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_style_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol(__pyx_v_variable); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 6940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "core.pyx":6941
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "core.pyx":6939
 *         PushStyleColor(ImGuiCol idx, const ImVec4& col)
 *     """
 *     if not (0 <= variable < enums.ImGuiCol_COUNT):             # <<<<<<<<<<<<<<
 *         warnings.warn("Unknown style variable: {}".format(variable))
 *         return False
 */
  }

  /* "core.pyx":6943
 *         return False
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  try {
    ImGui::PushStyleColor(__pyx_v_variable, __pyx_f_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6943, __pyx_L1_error)
  }

  /* "core.pyx":6944
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "core.pyx":6903
 * 
 * 
 * cpdef push_style_color(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_347push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_347push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_variable;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 1); __PYX_ERR(0, 6903, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 2); __PYX_ERR(0, 6903, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 3); __PYX_ERR(0, 6903, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_style_color") < 0)) __PYX_ERR(0, 6903, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6904, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6905, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6906, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6907, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6908, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_346push_style_color(__pyx_self, __pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_346push_style_color(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_push_style_color __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_style_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.a = __pyx_v_a;
  __pyx_t_1 = __pyx_f_4core_push_style_color(__pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6947
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */

static PyObject *__pyx_pw_4core_349pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_pop_style_var(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4core_pop_style_var *__pyx_optional_args) {
  unsigned int __pyx_v_count = ((unsigned int)1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_var", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_count = __pyx_optional_args->count;
    }
  }

  /* "core.pyx":6961
 *         void PopStyleVar(int count = 1)
 *     """
 *     cimgui.PopStyleVar(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopStyleVar(__pyx_v_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6961, __pyx_L1_error)
  }

  /* "core.pyx":6947
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_349pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_349pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_var (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_style_var") < 0)) __PYX_ERR(0, 6947, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_count == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 6947, __pyx_L3_error)
    } else {
      __pyx_v_count = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_style_var", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6947, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_348pop_style_var(__pyx_self, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_348pop_style_var(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_pop_style_var __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_var", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.count = __pyx_v_count;
  __pyx_t_1 = __pyx_f_4core_pop_style_var(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6964
 * 
 * 
 * cpdef get_font_size():             # <<<<<<<<<<<<<<
 *     """get current font size (= height in pixels) of current font with current scale applied
 * 
 */

static PyObject *__pyx_pw_4core_351get_font_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_get_font_size(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_size", 0);

  /* "core.pyx":6973
 *         float GetFontSize()
 *     """
 *     return cimgui.GetFontSize()             # <<<<<<<<<<<<<<
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFontSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6973, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6964
 * 
 * 
 * cpdef get_font_size():             # <<<<<<<<<<<<<<
 *     """get current font size (= height in pixels) of current font with current scale applied
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_font_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_351get_font_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_351get_font_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_font_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_350get_font_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_350get_font_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_get_font_size(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_font_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6975
 *     return cimgui.GetFontSize()
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):             # <<<<<<<<<<<<<<
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 */

static PyObject *__pyx_pw_4core_353get_style_color_vec_4(PyObject *__pyx_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_f_4core_get_style_color_vec_4(ImGuiCol __pyx_v_idx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<ImVec4> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style_color_vec_4", 0);

  /* "core.pyx":6976
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))             # <<<<<<<<<<<<<<
 * 
 * cpdef get_font_tex_uv_white_pixel():
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetStyleColorVec4(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6976, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec4_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6975
 *     return cimgui.GetFontSize()
 * 
 * cpdef get_style_color_vec_4(cimgui.ImGuiCol idx):             # <<<<<<<<<<<<<<
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_style_color_vec_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_353get_style_color_vec_4(PyObject *__pyx_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pw_4core_353get_style_color_vec_4(PyObject *__pyx_self, PyObject *__pyx_arg_idx) {
  ImGuiCol __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style_color_vec_4 (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_ImGuiCol(__pyx_arg_idx); if (unlikely((__pyx_v_idx == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6975, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_style_color_vec_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_352get_style_color_vec_4(__pyx_self, ((ImGuiCol)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_352get_style_color_vec_4(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_style_color_vec_4", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_get_style_color_vec_4(__pyx_v_idx, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_style_color_vec_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6978
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 * cpdef get_font_tex_uv_white_pixel():             # <<<<<<<<<<<<<<
 *     return _cast_ImVec2_tuple(cimgui.GetFontTexUvWhitePixel())
 * 
 */

static PyObject *__pyx_pw_4core_355get_font_tex_uv_white_pixel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_get_font_tex_uv_white_pixel(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_tex_uv_white_pixel", 0);

  /* "core.pyx":6979
 * 
 * cpdef get_font_tex_uv_white_pixel():
 *     return _cast_ImVec2_tuple(cimgui.GetFontTexUvWhitePixel())             # <<<<<<<<<<<<<<
 * 
 * # TODO: Can we implement function overloading? Prefer these are all named 'get_color_u32' with different signatures
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFontTexUvWhitePixel();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6979, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6978
 *     return _cast_ImVec4_tuple(cimgui.GetStyleColorVec4(idx))
 * 
 * cpdef get_font_tex_uv_white_pixel():             # <<<<<<<<<<<<<<
 *     return _cast_ImVec2_tuple(cimgui.GetFontTexUvWhitePixel())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_font_tex_uv_white_pixel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_355get_font_tex_uv_white_pixel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_355get_font_tex_uv_white_pixel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_font_tex_uv_white_pixel (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_354get_font_tex_uv_white_pixel(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_354get_font_tex_uv_white_pixel(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_font_tex_uv_white_pixel", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_get_font_tex_uv_white_pixel(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_font_tex_uv_white_pixel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6985
 * # Neither singledispatch nor multipledispatch seems to be available in Cython :-/
 * 
 * cpdef get_color_u32_idx(cimgui.ImGuiCol idx, float alpha_mul = 1.0):             # <<<<<<<<<<<<<<
 *     """ retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

static PyObject *__pyx_pw_4core_357get_color_u32_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_get_color_u32_idx(ImGuiCol __pyx_v_idx, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4core_get_color_u32_idx *__pyx_optional_args) {
  float __pyx_v_alpha_mul = ((float)1.0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImU32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_idx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_alpha_mul = __pyx_optional_args->alpha_mul;
    }
  }

  /* "core.pyx":6994
 *         ImU32 GetColorU32(ImGuiCol idx, alpha_mul)
 *     """
 *     return cimgui.GetColorU32(idx, alpha_mul)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColorU32(__pyx_v_idx, __pyx_v_alpha_mul);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 6994, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImU32(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6985
 * # Neither singledispatch nor multipledispatch seems to be available in Cython :-/
 * 
 * cpdef get_color_u32_idx(cimgui.ImGuiCol idx, float alpha_mul = 1.0):             # <<<<<<<<<<<<<<
 *     """ retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_color_u32_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_357get_color_u32_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_357get_color_u32_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_idx;
  float __pyx_v_alpha_mul;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color_u32_idx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_idx,&__pyx_n_s_alpha_mul,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha_mul);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_color_u32_idx") < 0)) __PYX_ERR(0, 6985, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_idx = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_idx == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 6985, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_alpha_mul = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_alpha_mul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6985, __pyx_L3_error)
    } else {
      __pyx_v_alpha_mul = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_color_u32_idx", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6985, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_color_u32_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_356get_color_u32_idx(__pyx_self, __pyx_v_idx, __pyx_v_alpha_mul);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_356get_color_u32_idx(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_idx, float __pyx_v_alpha_mul) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_get_color_u32_idx __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_idx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.alpha_mul = __pyx_v_alpha_mul;
  __pyx_t_1 = __pyx_f_4core_get_color_u32_idx(__pyx_v_idx, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_color_u32_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6997
 * 
 * 
 * cpdef get_color_u32_rgba(float r, float g, float b, float a):             # <<<<<<<<<<<<<<
 *     """ retrieve given color with style alpha applied
 * 
 */

static PyObject *__pyx_pw_4core_359get_color_u32_rgba(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_get_color_u32_rgba(float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImU32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_rgba", 0);

  /* "core.pyx":7006
 *         ImU32 GetColorU32(const ImVec4& col)
 *     """
 *     return cimgui.GetColorU32( _cast_args_ImVec4(r, g, b, a) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColorU32(__pyx_f_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7006, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImU32(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":6997
 * 
 * 
 * cpdef get_color_u32_rgba(float r, float g, float b, float a):             # <<<<<<<<<<<<<<
 *     """ retrieve given color with style alpha applied
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_color_u32_rgba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_359get_color_u32_rgba(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_359get_color_u32_rgba(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color_u32_rgba (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, 1); __PYX_ERR(0, 6997, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, 2); __PYX_ERR(0, 6997, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, 3); __PYX_ERR(0, 6997, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_color_u32_rgba") < 0)) __PYX_ERR(0, 6997, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6997, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6997, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6997, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 6997, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_color_u32_rgba", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 6997, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_color_u32_rgba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_358get_color_u32_rgba(__pyx_self, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_358get_color_u32_rgba(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32_rgba", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_get_color_u32_rgba(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_color_u32_rgba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7009
 * 
 * 
 * cpdef get_color_u32(cimgui.ImU32 col):             # <<<<<<<<<<<<<<
 *     """retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

static PyObject *__pyx_pw_4core_361get_color_u32(PyObject *__pyx_self, PyObject *__pyx_arg_col); /*proto*/
static PyObject *__pyx_f_4core_get_color_u32(ImU32 __pyx_v_col, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImU32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32", 0);

  /* "core.pyx":7018
 *         ImU32 GetColorU32(ImU32 col)
 *     """
 *     return cimgui.GetColorU32(col)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColorU32(__pyx_v_col);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7018, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImU32(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7009
 * 
 * 
 * cpdef get_color_u32(cimgui.ImU32 col):             # <<<<<<<<<<<<<<
 *     """retrieve given style color with style alpha applied and optional extra alpha multiplier
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_color_u32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_361get_color_u32(PyObject *__pyx_self, PyObject *__pyx_arg_col); /*proto*/
static PyObject *__pyx_pw_4core_361get_color_u32(PyObject *__pyx_self, PyObject *__pyx_arg_col) {
  ImU32 __pyx_v_col;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color_u32 (wrapper)", 0);
  assert(__pyx_arg_col); {
    __pyx_v_col = __Pyx_PyInt_As_ImU32(__pyx_arg_col); if (unlikely((__pyx_v_col == ((ImU32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7009, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_color_u32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_360get_color_u32(__pyx_self, ((ImU32)__pyx_v_col));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_360get_color_u32(CYTHON_UNUSED PyObject *__pyx_self, ImU32 __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_color_u32", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_get_color_u32(__pyx_v_col, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.get_color_u32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7022
 * 
 * 
 * cpdef push_item_width(float item_width):             # <<<<<<<<<<<<<<
 *     """Push item width in the stack.
 * 
 */

static PyObject *__pyx_pw_4core_363push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width); /*proto*/
static PyObject *__pyx_f_4core_push_item_width(float __pyx_v_item_width, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_item_width", 0);

  /* "core.pyx":7061
 *         void PushItemWidth(float item_width)
 *     """
 *     cimgui.PushItemWidth(item_width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PushItemWidth(__pyx_v_item_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7061, __pyx_L1_error)
  }

  /* "core.pyx":7022
 * 
 * 
 * cpdef push_item_width(float item_width):             # <<<<<<<<<<<<<<
 *     """Push item width in the stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_363push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width); /*proto*/
static PyObject *__pyx_pw_4core_363push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width) {
  float __pyx_v_item_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_item_width (wrapper)", 0);
  assert(__pyx_arg_item_width); {
    __pyx_v_item_width = __pyx_PyFloat_AsFloat(__pyx_arg_item_width); if (unlikely((__pyx_v_item_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7022, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_362push_item_width(__pyx_self, ((float)__pyx_v_item_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_362push_item_width(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_item_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_push_item_width(__pyx_v_item_width, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7064
 * 
 * 
 * cpdef pop_item_width():             # <<<<<<<<<<<<<<
 *     """Reset width back to the default width.
 * 
 */

static PyObject *__pyx_pw_4core_365pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_pop_item_width(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_item_width", 0);

  /* "core.pyx":7075
 *         void PopItemWidth()
 *     """
 *     cimgui.PopItemWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopItemWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7075, __pyx_L1_error)
  }

  /* "core.pyx":7064
 * 
 * 
 * cpdef pop_item_width():             # <<<<<<<<<<<<<<
 *     """Reset width back to the default width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_365pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_365pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_item_width (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_364pop_item_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_364pop_item_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_pop_item_width(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.pop_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7078
 * 
 * 
 * cpdef calculate_item_width():             # <<<<<<<<<<<<<<
 *     """Calculate and return the current item width.
 * 
 */

static PyObject *__pyx_pw_4core_367calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_calculate_item_width(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_item_width", 0);

  /* "core.pyx":7087
 *         float CalcItemWidth()
 *     """
 *     return cimgui.CalcItemWidth()             # <<<<<<<<<<<<<<
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::CalcItemWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7087, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7078
 * 
 * 
 * cpdef calculate_item_width():             # <<<<<<<<<<<<<<
 *     """Calculate and return the current item width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.calculate_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_367calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_367calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_item_width (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_366calculate_item_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_366calculate_item_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_calculate_item_width(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.calculate_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7089
 *     return cimgui.CalcItemWidth()
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */

static PyObject *__pyx_pw_4core_369push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_push_text_wrap_pos(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4core_push_text_wrap_pos *__pyx_optional_args) {
  float __pyx_v_wrap_pos_x = ((float)0.0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_text_wrap_pos", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_wrap_pos_x = __pyx_optional_args->wrap_pos_x;
    }
  }

  /* "core.pyx":7103
 *         float PushTextWrapPos(float wrap_pos_x = 0.0f)
 *     """
 *     cimgui.PushTextWrapPos(wrap_pos_x)             # <<<<<<<<<<<<<<
 * 
 * push_text_wrap_position = push_text_wrap_pos
 */
  try {
    ImGui::PushTextWrapPos(__pyx_v_wrap_pos_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7103, __pyx_L1_error)
  }

  /* "core.pyx":7089
 *     return cimgui.CalcItemWidth()
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_369push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_369push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_wrap_pos_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_text_wrap_pos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wrap_pos_x,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_pos_x);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_text_wrap_pos") < 0)) __PYX_ERR(0, 7089, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_wrap_pos_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_wrap_pos_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7089, __pyx_L3_error)
    } else {
      __pyx_v_wrap_pos_x = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_text_wrap_pos", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7089, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_368push_text_wrap_pos(__pyx_self, __pyx_v_wrap_pos_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_368push_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_wrap_pos_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_push_text_wrap_pos __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_text_wrap_pos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.wrap_pos_x = __pyx_v_wrap_pos_x;
  __pyx_t_1 = __pyx_f_4core_push_text_wrap_pos(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7107
 * push_text_wrap_position = push_text_wrap_pos
 * 
 * cpdef pop_text_wrap_pos():             # <<<<<<<<<<<<<<
 *     """Pop the text wrapping position from the stack.
 * 
 */

static PyObject *__pyx_pw_4core_371pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_pop_text_wrap_pos(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_text_wrap_pos", 0);

  /* "core.pyx":7118
 *         void PopTextWrapPos()
 *     """
 *     cimgui.PopTextWrapPos()             # <<<<<<<<<<<<<<
 * 
 * pop_text_wrap_position = pop_text_wrap_pos
 */
  try {
    ImGui::PopTextWrapPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7118, __pyx_L1_error)
  }

  /* "core.pyx":7107
 * push_text_wrap_position = push_text_wrap_pos
 * 
 * cpdef pop_text_wrap_pos():             # <<<<<<<<<<<<<<
 *     """Pop the text wrapping position from the stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_371pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_371pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_text_wrap_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_370pop_text_wrap_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_370pop_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_text_wrap_pos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_pop_text_wrap_pos(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.pop_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7122
 * pop_text_wrap_position = pop_text_wrap_pos
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):             # <<<<<<<<<<<<<<
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 */

static PyObject *__pyx_pw_4core_373push_allow_keyboard_focus(PyObject *__pyx_self, PyObject *__pyx_arg_allow_focus); /*proto*/
static PyObject *__pyx_f_4core_push_allow_keyboard_focus(bool __pyx_v_allow_focus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_allow_keyboard_focus", 0);

  /* "core.pyx":7123
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):
 *     cimgui.PushAllowKeyboardFocus(allow_focus)             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_allow_keyboard_focus():
 */
  try {
    ImGui::PushAllowKeyboardFocus(__pyx_v_allow_focus);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7123, __pyx_L1_error)
  }

  /* "core.pyx":7122
 * pop_text_wrap_position = pop_text_wrap_pos
 * 
 * cpdef push_allow_keyboard_focus(bool allow_focus):             # <<<<<<<<<<<<<<
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.push_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_373push_allow_keyboard_focus(PyObject *__pyx_self, PyObject *__pyx_arg_allow_focus); /*proto*/
static PyObject *__pyx_pw_4core_373push_allow_keyboard_focus(PyObject *__pyx_self, PyObject *__pyx_arg_allow_focus) {
  bool __pyx_v_allow_focus;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_allow_keyboard_focus (wrapper)", 0);
  assert(__pyx_arg_allow_focus); {
    __pyx_v_allow_focus = __Pyx_PyObject_IsTrue(__pyx_arg_allow_focus); if (unlikely((__pyx_v_allow_focus == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7122, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.push_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_372push_allow_keyboard_focus(__pyx_self, ((bool)__pyx_v_allow_focus));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_372push_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_allow_focus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_allow_keyboard_focus", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_push_allow_keyboard_focus(__pyx_v_allow_focus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7125
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 * cpdef pop_allow_keyboard_focus():             # <<<<<<<<<<<<<<
 *     cimgui.PopAllowKeyboardFocus()
 * 
 */

static PyObject *__pyx_pw_4core_375pop_allow_keyboard_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_pop_allow_keyboard_focus(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_allow_keyboard_focus", 0);

  /* "core.pyx":7126
 * 
 * cpdef pop_allow_keyboard_focus():
 *     cimgui.PopAllowKeyboardFocus()             # <<<<<<<<<<<<<<
 * 
 * cpdef push_button_repeat(bool repeat):
 */
  try {
    ImGui::PopAllowKeyboardFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7126, __pyx_L1_error)
  }

  /* "core.pyx":7125
 *     cimgui.PushAllowKeyboardFocus(allow_focus)
 * 
 * cpdef pop_allow_keyboard_focus():             # <<<<<<<<<<<<<<
 *     cimgui.PopAllowKeyboardFocus()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_375pop_allow_keyboard_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_375pop_allow_keyboard_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_allow_keyboard_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_374pop_allow_keyboard_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_374pop_allow_keyboard_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_allow_keyboard_focus", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_pop_allow_keyboard_focus(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.pop_allow_keyboard_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7128
 *     cimgui.PopAllowKeyboardFocus()
 * 
 * cpdef push_button_repeat(bool repeat):             # <<<<<<<<<<<<<<
 *     cimgui.PushButtonRepeat(repeat)
 * 
 */

static PyObject *__pyx_pw_4core_377push_button_repeat(PyObject *__pyx_self, PyObject *__pyx_arg_repeat); /*proto*/
static PyObject *__pyx_f_4core_push_button_repeat(bool __pyx_v_repeat, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_button_repeat", 0);

  /* "core.pyx":7129
 * 
 * cpdef push_button_repeat(bool repeat):
 *     cimgui.PushButtonRepeat(repeat)             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_button_repeat():
 */
  try {
    ImGui::PushButtonRepeat(__pyx_v_repeat);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7129, __pyx_L1_error)
  }

  /* "core.pyx":7128
 *     cimgui.PopAllowKeyboardFocus()
 * 
 * cpdef push_button_repeat(bool repeat):             # <<<<<<<<<<<<<<
 *     cimgui.PushButtonRepeat(repeat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.push_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_377push_button_repeat(PyObject *__pyx_self, PyObject *__pyx_arg_repeat); /*proto*/
static PyObject *__pyx_pw_4core_377push_button_repeat(PyObject *__pyx_self, PyObject *__pyx_arg_repeat) {
  bool __pyx_v_repeat;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_button_repeat (wrapper)", 0);
  assert(__pyx_arg_repeat); {
    __pyx_v_repeat = __Pyx_PyObject_IsTrue(__pyx_arg_repeat); if (unlikely((__pyx_v_repeat == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7128, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.push_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_376push_button_repeat(__pyx_self, ((bool)__pyx_v_repeat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_376push_button_repeat(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_repeat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_button_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_push_button_repeat(__pyx_v_repeat, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7131
 *     cimgui.PushButtonRepeat(repeat)
 * 
 * cpdef pop_button_repeat():             # <<<<<<<<<<<<<<
 *     cimgui.PopButtonRepeat()
 * 
 */

static PyObject *__pyx_pw_4core_379pop_button_repeat(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4core_pop_button_repeat(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_button_repeat", 0);

  /* "core.pyx":7132
 * 
 * cpdef pop_button_repeat():
 *     cimgui.PopButtonRepeat()             # <<<<<<<<<<<<<<
 * 
 * cpdef pop_style_color(unsigned int count=1):
 */
  try {
    ImGui::PopButtonRepeat();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7132, __pyx_L1_error)
  }

  /* "core.pyx":7131
 *     cimgui.PushButtonRepeat(repeat)
 * 
 * cpdef pop_button_repeat():             # <<<<<<<<<<<<<<
 *     cimgui.PopButtonRepeat()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_379pop_button_repeat(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4core_379pop_button_repeat(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_button_repeat (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_378pop_button_repeat(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_378pop_button_repeat(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_button_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core_pop_button_repeat(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.pop_button_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7134
 *     cimgui.PopButtonRepeat()
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */

static PyObject *__pyx_pw_4core_381pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4core_pop_style_color(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4core_pop_style_color *__pyx_optional_args) {
  unsigned int __pyx_v_count = ((unsigned int)1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_color", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_count = __pyx_optional_args->count;
    }
  }

  /* "core.pyx":7148
 *         void PopStyleColor(int count = 1)
 *     """
 *     cimgui.PopStyleColor(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopStyleColor(__pyx_v_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7148, __pyx_L1_error)
  }

  /* "core.pyx":7134
 *     cimgui.PopButtonRepeat()
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4core_381pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4core_381pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_style_color") < 0)) __PYX_ERR(0, 7134, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_count == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7134, __pyx_L3_error)
    } else {
      __pyx_v_count = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_style_color", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7134, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_380pop_style_color(__pyx_self, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_380pop_style_color(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_pop_style_color __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_style_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.count = __pyx_v_count;
  __pyx_t_1 = __pyx_f_4core_pop_style_color(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7151
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_383separator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_383separator = {"separator", (PyCFunction)__pyx_pw_4core_383separator, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_383separator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("separator (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_382separator(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_382separator(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("separator", 0);

  /* "core.pyx":7175
 *         void Separator()
 *     """
 *     cimgui.Separator()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Separator();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7175, __pyx_L1_error)
  }

  /* "core.pyx":7151
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.separator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7178
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_385same_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_385same_line = {"same_line", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_385same_line, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_385same_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_position;
  float __pyx_v_spacing;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_spacing,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_spacing);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "same_line") < 0)) __PYX_ERR(0, 7178, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_position = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_position == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7178, __pyx_L3_error)
    } else {
      __pyx_v_position = ((float)0.0);
    }
    if (values[1]) {
      __pyx_v_spacing = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_spacing == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7178, __pyx_L3_error)
    } else {
      __pyx_v_spacing = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("same_line", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7178, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.same_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_384same_line(__pyx_self, __pyx_v_position, __pyx_v_spacing);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_384same_line(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position, float __pyx_v_spacing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_line", 0);

  /* "core.pyx":7208
 *         void SameLine(float pos_x = 0.0f, float spacing_w = -1.0f)
 *     """
 *     cimgui.SameLine(position, spacing)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ImGui::SameLine(__pyx_v_position, __pyx_v_spacing);

  /* "core.pyx":7178
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7211
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_387new_line(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_387new_line = {"new_line", (PyCFunction)__pyx_pw_4core_387new_line, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_387new_line(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_line (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_386new_line(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_386new_line(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_line", 0);

  /* "core.pyx":7217
 *         void NewLine()
 *     """
 *     cimgui.NewLine()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NewLine();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7217, __pyx_L1_error)
  }

  /* "core.pyx":7211
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.new_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7220
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_389spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_389spacing = {"spacing", (PyCFunction)__pyx_pw_4core_389spacing, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_389spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_388spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_388spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("spacing", 0);

  /* "core.pyx":7244
 *         void Spacing()
 *     """
 *     cimgui.Spacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Spacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7244, __pyx_L1_error)
  }

  /* "core.pyx":7220
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7247
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_391dummy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_391dummy = {"dummy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_391dummy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_391dummy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dummy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dummy", 1, 2, 2, 1); __PYX_ERR(0, 7247, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dummy") < 0)) __PYX_ERR(0, 7247, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dummy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.dummy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_390dummy(__pyx_self, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_390dummy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  ImVec2 __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dummy", 0);

  /* "core.pyx":7268
 *         void Dummy(const ImVec2& size)
 *     """
 *     cimgui.Dummy(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7268, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7268, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_4core__cast_args_ImVec2(__pyx_t_1, __pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 7268, __pyx_L1_error)
  try {
    ImGui::Dummy(__pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7268, __pyx_L1_error)
  }

  /* "core.pyx":7247
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.dummy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7271
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_393indent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_393indent = {"indent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_393indent, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_393indent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "indent") < 0)) __PYX_ERR(0, 7271, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7271, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indent", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.indent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_392indent(__pyx_self, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_392indent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indent", 0);

  /* "core.pyx":7299
 *         void Indent(float indent_w = 0.0f)
 *     """
 *     cimgui.Indent(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Indent(__pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7299, __pyx_L1_error)
  }

  /* "core.pyx":7271
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.indent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7302
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_395unindent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_395unindent = {"unindent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_395unindent, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_395unindent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unindent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unindent") < 0)) __PYX_ERR(0, 7302, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7302, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unindent", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7302, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.unindent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_394unindent(__pyx_self, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_394unindent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unindent", 0);

  /* "core.pyx":7330
 *         void Unindent(float indent_w = 0.0f)
 *     """
 *     cimgui.Unindent(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Unindent(__pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7330, __pyx_L1_error)
  }

  /* "core.pyx":7302
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.unindent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7333
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_397columns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_397columns = {"columns", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_397columns, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_397columns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  PyObject *__pyx_v_identifier = 0;
  bool __pyx_v_border;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("columns (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_identifier,&__pyx_n_s_border,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_identifier);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "columns") < 0)) __PYX_ERR(0, 7333, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7333, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)1);
    }
    __pyx_v_identifier = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7333, __pyx_L3_error)
    } else {
      __pyx_v_border = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("columns", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_identifier), (&PyString_Type), 1, "identifier", 1))) __PYX_ERR(0, 7333, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_396columns(__pyx_self, __pyx_v_count, __pyx_v_identifier, __pyx_v_border);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_396columns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_count, PyObject *__pyx_v_identifier, bool __pyx_v_border) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("columns", 0);

  /* "core.pyx":7387
 *         )
 *     """
 *     if identifier is None:             # <<<<<<<<<<<<<<
 *         cimgui.Columns(count, NULL, border)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_identifier == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":7388
 *     """
 *     if identifier is None:
 *         cimgui.Columns(count, NULL, border)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.Columns(count, _bytes(identifier), border)
 */
    try {
      ImGui::Columns(__pyx_v_count, NULL, __pyx_v_border);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7388, __pyx_L1_error)
    }

    /* "core.pyx":7387
 *         )
 *     """
 *     if identifier is None:             # <<<<<<<<<<<<<<
 *         cimgui.Columns(count, NULL, border)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":7390
 *         cimgui.Columns(count, NULL, border)
 *     else:
 *         cimgui.Columns(count, _bytes(identifier), border)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_4core__bytes(__pyx_v_identifier); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 7390, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 7390, __pyx_L1_error)
    try {
      ImGui::Columns(__pyx_v_count, __pyx_t_4, __pyx_v_border);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7390, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "core.pyx":7333
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7393
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_399next_column(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_399next_column = {"next_column", (PyCFunction)__pyx_pw_4core_399next_column, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_399next_column(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next_column (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_398next_column(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_398next_column(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next_column", 0);

  /* "core.pyx":7401
 *         void NextColumn()
 *     """
 *     cimgui.NextColumn()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NextColumn();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7401, __pyx_L1_error)
  }

  /* "core.pyx":7393
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.next_column", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7404
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_401get_column_index(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_401get_column_index = {"get_column_index", (PyCFunction)__pyx_pw_4core_401get_column_index, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_401get_column_index(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_index (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_400get_column_index(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_400get_column_index(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_index", 0);

  /* "core.pyx":7415
 *         int GetColumnIndex()
 *     """
 *     return cimgui.GetColumnIndex()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnIndex();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7415, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7404
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_column_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7418
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_403get_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_403get_column_offset = {"get_column_offset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_403get_column_offset, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_403get_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_column_offset") < 0)) __PYX_ERR(0, 7418, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7418, __pyx_L3_error)
    } else {
      __pyx_v_column_index = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_offset", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7418, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_402get_column_offset(__pyx_self, __pyx_v_column_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_402get_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_offset", 0);

  /* "core.pyx":7435
 *         float GetColumnOffset(int column_index = -1)
 *     """
 *     return cimgui.GetColumnOffset(column_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnOffset(__pyx_v_column_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7435, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7418
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7438
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_405set_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_405set_column_offset = {"set_column_offset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_405set_column_offset, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_405set_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  float __pyx_v_offset_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_column_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,&__pyx_n_s_offset_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_column_offset", 1, 2, 2, 1); __PYX_ERR(0, 7438, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_column_offset") < 0)) __PYX_ERR(0, 7438, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7438, __pyx_L3_error)
    __pyx_v_offset_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_offset_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7438, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_column_offset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7438, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_404set_column_offset(__pyx_self, __pyx_v_column_index, __pyx_v_offset_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_404set_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_offset_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_column_offset", 0);

  /* "core.pyx":7451
 *         void SetColumnOffset(int column_index, float offset_x)
 *     """
 *     cimgui.SetColumnOffset(column_index, offset_x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetColumnOffset(__pyx_v_column_index, __pyx_v_offset_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7451, __pyx_L1_error)
  }

  /* "core.pyx":7438
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7454
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_407get_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_407get_column_width = {"get_column_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_407get_column_width, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_407get_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_width (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_column_width") < 0)) __PYX_ERR(0, 7454, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7454, __pyx_L3_error)
    } else {
      __pyx_v_column_index = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_width", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7454, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.get_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_406get_column_width(__pyx_self, __pyx_v_column_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_406get_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_width", 0);

  /* "core.pyx":7465
 *         float GetColumnWidth(int column_index = -1)
 *     """
 *     return cimgui.GetColumnWidth(column_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnWidth(__pyx_v_column_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7465, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7454
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7468
 * 
 * 
 * def set_column_width(int column_index, float width):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_409set_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_409set_column_width = {"set_column_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_409set_column_width, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_409set_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  float __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_column_width (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,&__pyx_n_s_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_column_width", 1, 2, 2, 1); __PYX_ERR(0, 7468, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_column_width") < 0)) __PYX_ERR(0, 7468, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7468, __pyx_L3_error)
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7468, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_column_width", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7468, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_408set_column_width(__pyx_self, __pyx_v_column_index, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_408set_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_column_width", 0);

  /* "core.pyx":7481
 *         void SetColumnWidth(int column_index, float width)
 *     """
 *     cimgui.SetColumnWidth(column_index, width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetColumnWidth(__pyx_v_column_index, __pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7481, __pyx_L1_error)
  }

  /* "core.pyx":7468
 * 
 * 
 * def set_column_width(int column_index, float width):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7484
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_411get_columns_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_411get_columns_count = {"get_columns_count", (PyCFunction)__pyx_pw_4core_411get_columns_count, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_411get_columns_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_columns_count (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_410get_columns_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_410get_columns_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_columns_count", 0);

  /* "core.pyx":7495
 *         int GetColumnsCount()
 *     """
 *     return cimgui.GetColumnsCount()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnsCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7495, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7484
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_columns_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7498
 * 
 * 
 * def begin_drag_drop_source(cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop source. If this return True, you
 *     can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_413begin_drag_drop_source(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_413begin_drag_drop_source = {"begin_drag_drop_source", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_413begin_drag_drop_source, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_413begin_drag_drop_source(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiDragDropFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_drag_drop_source (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flags,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_drag_drop_source") < 0)) __PYX_ERR(0, 7498, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiDragDropFlags(values[0]); if (unlikely((__pyx_v_flags == ((ImGuiDragDropFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7498, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiDragDropFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_drag_drop_source", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7498, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin_drag_drop_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_412begin_drag_drop_source(__pyx_self, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_412begin_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self, ImGuiDragDropFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_drag_drop_source", 0);

  /* "core.pyx":7534
 *         bool BeginDragDropSource(ImGuiDragDropFlags flags = 0)
 *     """
 *     return cimgui.BeginDragDropSource(flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginDragDropSource(__pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7534, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7498
 * 
 * 
 * def begin_drag_drop_source(cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop source. If this return True, you
 *     can call :func:`set_drag_drop_payload` and :func:`end_drag_drop_source`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.begin_drag_drop_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7537
 * 
 * 
 * def set_drag_drop_payload(str type, bytes data, cimgui.ImGuiCond condition=0):             # <<<<<<<<<<<<<<
 *     """Set the payload for a drag and drop source. Only call after
 *     :func:`begin_drag_drop_source` returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_415set_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_415set_drag_drop_payload = {"set_drag_drop_payload", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_415set_drag_drop_payload, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_415set_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_data = 0;
  ImGuiCond __pyx_v_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_drag_drop_payload (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_data,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_drag_drop_payload", 0, 2, 3, 1); __PYX_ERR(0, 7537, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_drag_drop_payload") < 0)) __PYX_ERR(0, 7537, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_type = ((PyObject*)values[0]);
    __pyx_v_data = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7537, __pyx_L3_error)
    } else {
      __pyx_v_condition = ((ImGuiCond)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_drag_drop_payload", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7537, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_type), (&PyString_Type), 1, "type", 1))) __PYX_ERR(0, 7537, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) __PYX_ERR(0, 7537, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_414set_drag_drop_payload(__pyx_self, __pyx_v_type, __pyx_v_data, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_414set_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, PyObject *__pyx_v_data, ImGuiCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_drag_drop_payload", 0);

  /* "core.pyx":7554
 *         bool SetDragDropPayload(const char* type, const void* data, size_t size, ImGuiCond cond = 0)
 *     """
 *     return cimgui.SetDragDropPayload(_bytes(type), <const char*>data, len(data), condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7554, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7554, __pyx_L1_error)
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7554, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_data); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 7554, __pyx_L1_error)
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 7554, __pyx_L1_error)
  }
  __pyx_t_4 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 7554, __pyx_L1_error)
  try {
    __pyx_t_5 = ImGui::SetDragDropPayload(__pyx_t_2, ((char const *)__pyx_t_3), __pyx_t_4, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7554, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":7537
 * 
 * 
 * def set_drag_drop_payload(str type, bytes data, cimgui.ImGuiCond condition=0):             # <<<<<<<<<<<<<<
 *     """Set the payload for a drag and drop source. Only call after
 *     :func:`begin_drag_drop_source` returns True.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.set_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7557
 * 
 * 
 * def end_drag_drop_source():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_source`
 *     returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_417end_drag_drop_source(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_417end_drag_drop_source = {"end_drag_drop_source", (PyCFunction)__pyx_pw_4core_417end_drag_drop_source, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_417end_drag_drop_source(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_drag_drop_source (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_416end_drag_drop_source(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_416end_drag_drop_source(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_drag_drop_source", 0);

  /* "core.pyx":7568
 *         void EndDragDropSource()
 *     """
 *     cimgui.EndDragDropSource()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndDragDropSource();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7568, __pyx_L1_error)
  }

  /* "core.pyx":7557
 * 
 * 
 * def end_drag_drop_source():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_source`
 *     returns True.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_drag_drop_source", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7571
 * 
 * 
 * def begin_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop target. If this return True, you
 *     can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_419begin_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_419begin_drag_drop_target = {"begin_drag_drop_target", (PyCFunction)__pyx_pw_4core_419begin_drag_drop_target, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_419begin_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_drag_drop_target (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_418begin_drag_drop_target(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_418begin_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_drag_drop_target", 0);

  /* "core.pyx":7585
 *         bool BeginDragDropTarget()
 *     """
 *     return cimgui.BeginDragDropTarget()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginDragDropTarget();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7585, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7571
 * 
 * 
 * def begin_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """Set the current item as a drag and drop target. If this return True, you
 *     can call :func:`accept_drag_drop_payload` and :func:`end_drag_drop_target`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.begin_drag_drop_target", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7588
 * 
 * 
 * def accept_drag_drop_payload(str type, cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Get the drag and drop payload. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_421accept_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_421accept_drag_drop_payload = {"accept_drag_drop_payload", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_421accept_drag_drop_payload, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_421accept_drag_drop_payload(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_type = 0;
  ImGuiDragDropFlags __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("accept_drag_drop_payload (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "accept_drag_drop_payload") < 0)) __PYX_ERR(0, 7588, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_type = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiDragDropFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiDragDropFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7588, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiDragDropFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("accept_drag_drop_payload", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.accept_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_type), (&PyString_Type), 1, "type", 1))) __PYX_ERR(0, 7588, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_420accept_drag_drop_payload(__pyx_self, __pyx_v_type, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_420accept_drag_drop_payload(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type, ImGuiDragDropFlags __pyx_v_flags) {
  ImGuiPayload const *__pyx_v_payload;
  char const *__pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImGuiPayload const *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("accept_drag_drop_payload", 0);

  /* "core.pyx":7606
 *         const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0)
 *     """
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)             # <<<<<<<<<<<<<<
 *     if payload == NULL:
 *         return None
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7606, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7606, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::AcceptDragDropPayload(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7606, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_payload = __pyx_t_3;

  /* "core.pyx":7607
 *     """
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)
 *     if payload == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef const char* data = <const char *>payload.Data
 */
  __pyx_t_4 = ((__pyx_v_payload == NULL) != 0);
  if (__pyx_t_4) {

    /* "core.pyx":7608
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)
 *     if payload == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     cdef const char* data = <const char *>payload.Data
 *     return <bytes>data[:payload.DataSize]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "core.pyx":7607
 *     """
 *     cdef const cimgui.ImGuiPayload* payload = cimgui.AcceptDragDropPayload(_bytes(type), flags)
 *     if payload == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef const char* data = <const char *>payload.Data
 */
  }

  /* "core.pyx":7609
 *     if payload == NULL:
 *         return None
 *     cdef const char* data = <const char *>payload.Data             # <<<<<<<<<<<<<<
 *     return <bytes>data[:payload.DataSize]
 * 
 */
  __pyx_v_data = ((char const *)__pyx_v_payload->Data);

  /* "core.pyx":7610
 *         return None
 *     cdef const char* data = <const char *>payload.Data
 *     return <bytes>data[:payload.DataSize]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_data + 0, __pyx_v_payload->DataSize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":7588
 * 
 * 
 * def accept_drag_drop_payload(str type, cimgui.ImGuiDragDropFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Get the drag and drop payload. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.accept_drag_drop_payload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7613
 * 
 * 
 * def end_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_423end_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_423end_drag_drop_target = {"end_drag_drop_target", (PyCFunction)__pyx_pw_4core_423end_drag_drop_target, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_423end_drag_drop_target(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_drag_drop_target (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_422end_drag_drop_target(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_422end_drag_drop_target(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_drag_drop_target", 0);

  /* "core.pyx":7624
 *         void EndDragDropTarget()
 *     """
 *     cimgui.EndDragDropTarget()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndDragDropTarget();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7624, __pyx_L1_error)
  }

  /* "core.pyx":7613
 * 
 * 
 * def end_drag_drop_target():             # <<<<<<<<<<<<<<
 *     """End the drag and drop source. Only call after :func:`begin_drag_drop_target`
 *     returns True.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_drag_drop_target", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7627
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_425begin_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_425begin_group = {"begin_group", (PyCFunction)__pyx_pw_4core_425begin_group, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_425begin_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_group (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_424begin_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_424begin_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_group", 0);

  /* "core.pyx":7659
 *         void BeginGroup()
 *     """
 *     cimgui.BeginGroup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::BeginGroup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7659, __pyx_L1_error)
  }

  /* "core.pyx":7627
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.begin_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7662
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_427end_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_427end_group = {"end_group", (PyCFunction)__pyx_pw_4core_427end_group, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_427end_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_group (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_426end_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_426end_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_group", 0);

  /* "core.pyx":7668
 *         void EndGroup()
 *     """
 *     cimgui.EndGroup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndGroup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7668, __pyx_L1_error)
  }

  /* "core.pyx":7662
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7671
 * 
 * 
 * def get_cursor_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_429get_cursor_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_429get_cursor_pos = {"get_cursor_pos", (PyCFunction)__pyx_pw_4core_429get_cursor_pos, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_429get_cursor_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_428get_cursor_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_428get_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_pos", 0);

  /* "core.pyx":7677
 *         ImVec2 GetCursorPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetCursorPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7677, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7671
 * 
 * 
 * def get_cursor_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_cursor_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7680
 * 
 * 
 * def get_cursor_pos_x():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosX()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_431get_cursor_pos_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_431get_cursor_pos_x = {"get_cursor_pos_x", (PyCFunction)__pyx_pw_4core_431get_cursor_pos_x, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_431get_cursor_pos_x(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_pos_x (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_430get_cursor_pos_x(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_430get_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_pos_x", 0);

  /* "core.pyx":7681
 * 
 * def get_cursor_pos_x():
 *     return cimgui.GetCursorPosX()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorPosX();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7681, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7680
 * 
 * 
 * def get_cursor_pos_x():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosX()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_cursor_pos_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7684
 * 
 * 
 * def get_cursor_pos_y():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosY()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_433get_cursor_pos_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_433get_cursor_pos_y = {"get_cursor_pos_y", (PyCFunction)__pyx_pw_4core_433get_cursor_pos_y, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_433get_cursor_pos_y(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_pos_y (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_432get_cursor_pos_y(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_432get_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_pos_y", 0);

  /* "core.pyx":7685
 * 
 * def get_cursor_pos_y():
 *     return cimgui.GetCursorPosY()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorPosY();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7685, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7684
 * 
 * 
 * def get_cursor_pos_y():             # <<<<<<<<<<<<<<
 *     return cimgui.GetCursorPosY()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_cursor_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7688
 * 
 * 
 * def set_cursor_pos(local_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_435set_cursor_pos(PyObject *__pyx_self, PyObject *__pyx_v_local_pos); /*proto*/
static PyMethodDef __pyx_mdef_4core_435set_cursor_pos = {"set_cursor_pos", (PyCFunction)__pyx_pw_4core_435set_cursor_pos, METH_O, 0};
static PyObject *__pyx_pw_4core_435set_cursor_pos(PyObject *__pyx_self, PyObject *__pyx_v_local_pos) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_434set_cursor_pos(__pyx_self, ((PyObject *)__pyx_v_local_pos));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_434set_cursor_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_local_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_pos", 0);

  /* "core.pyx":7694
 *         ImVec2 SetCursorScreenPos(const ImVec2& screen_pos)
 *     """
 *     cimgui.SetCursorPos(_cast_tuple_ImVec2(local_pos))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_local_pos); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 7694, __pyx_L1_error)
  try {
    ImGui::SetCursorPos(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7694, __pyx_L1_error)
  }

  /* "core.pyx":7688
 * 
 * 
 * def set_cursor_pos(local_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in local coordinates [0..<window size>] (useful to work with ImDrawList API)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_cursor_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7697
 * 
 * 
 * def set_cursor_pos_x(float x):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosX(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_437set_cursor_pos_x(PyObject *__pyx_self, PyObject *__pyx_arg_x); /*proto*/
static PyMethodDef __pyx_mdef_4core_437set_cursor_pos_x = {"set_cursor_pos_x", (PyCFunction)__pyx_pw_4core_437set_cursor_pos_x, METH_O, 0};
static PyObject *__pyx_pw_4core_437set_cursor_pos_x(PyObject *__pyx_self, PyObject *__pyx_arg_x) {
  float __pyx_v_x;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_pos_x (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsFloat(__pyx_arg_x); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7697, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_cursor_pos_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_436set_cursor_pos_x(__pyx_self, ((float)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_436set_cursor_pos_x(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_pos_x", 0);

  /* "core.pyx":7698
 * 
 * def set_cursor_pos_x(float x):
 *     cimgui.SetCursorPosX(x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetCursorPosX(__pyx_v_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7698, __pyx_L1_error)
  }

  /* "core.pyx":7697
 * 
 * 
 * def set_cursor_pos_x(float x):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosX(x)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_cursor_pos_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7701
 * 
 * 
 * def set_cursor_pos_y(float y):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosY(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_439set_cursor_pos_y(PyObject *__pyx_self, PyObject *__pyx_arg_y); /*proto*/
static PyMethodDef __pyx_mdef_4core_439set_cursor_pos_y = {"set_cursor_pos_y", (PyCFunction)__pyx_pw_4core_439set_cursor_pos_y, METH_O, 0};
static PyObject *__pyx_pw_4core_439set_cursor_pos_y(PyObject *__pyx_self, PyObject *__pyx_arg_y) {
  float __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_pos_y (wrapper)", 0);
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsFloat(__pyx_arg_y); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7701, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.set_cursor_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_438set_cursor_pos_y(__pyx_self, ((float)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_438set_cursor_pos_y(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_pos_y", 0);

  /* "core.pyx":7702
 * 
 * def set_cursor_pos_y(float y):
 *     cimgui.SetCursorPosY(y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetCursorPosY(__pyx_v_y);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7702, __pyx_L1_error)
  }

  /* "core.pyx":7701
 * 
 * 
 * def set_cursor_pos_y(float y):             # <<<<<<<<<<<<<<
 *     cimgui.SetCursorPosY(y)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_cursor_pos_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7705
 * 
 * 
 * def get_cursor_start_pos():             # <<<<<<<<<<<<<<
 *     """Get the initial cursor position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_441get_cursor_start_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_441get_cursor_start_pos = {"get_cursor_start_pos", (PyCFunction)__pyx_pw_4core_441get_cursor_start_pos, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_441get_cursor_start_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_start_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_440get_cursor_start_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_440get_cursor_start_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_start_pos", 0);

  /* "core.pyx":7711
 *         ImVec2 GetCursorStartPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetCursorStartPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorStartPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7711, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7705
 * 
 * 
 * def get_cursor_start_pos():             # <<<<<<<<<<<<<<
 *     """Get the initial cursor position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_cursor_start_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7714
 * 
 * 
 * def get_cursor_screen_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_443get_cursor_screen_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_443get_cursor_screen_pos = {"get_cursor_screen_pos", (PyCFunction)__pyx_pw_4core_443get_cursor_screen_pos, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_443get_cursor_screen_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cursor_screen_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_442get_cursor_screen_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_442get_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cursor_screen_pos", 0);

  /* "core.pyx":7720
 *         ImVec2 GetCursorScreenPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetCursorScreenPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetCursorScreenPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7720, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7714
 * 
 * 
 * def get_cursor_screen_pos():             # <<<<<<<<<<<<<<
 *     """Get the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_cursor_screen_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7723
 * 
 * 
 * def set_cursor_screen_pos(screen_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_445set_cursor_screen_pos(PyObject *__pyx_self, PyObject *__pyx_v_screen_pos); /*proto*/
static PyMethodDef __pyx_mdef_4core_445set_cursor_screen_pos = {"set_cursor_screen_pos", (PyCFunction)__pyx_pw_4core_445set_cursor_screen_pos, METH_O, 0};
static PyObject *__pyx_pw_4core_445set_cursor_screen_pos(PyObject *__pyx_self, PyObject *__pyx_v_screen_pos) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cursor_screen_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_444set_cursor_screen_pos(__pyx_self, ((PyObject *)__pyx_v_screen_pos));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_444set_cursor_screen_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_screen_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_cursor_screen_pos", 0);

  /* "core.pyx":7729
 *         ImVec2 SetCursorScreenPos(const ImVec2& screen_pos)
 *     """
 *     cimgui.SetCursorScreenPos(_cast_tuple_ImVec2(screen_pos))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_screen_pos); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 7729, __pyx_L1_error)
  try {
    ImGui::SetCursorScreenPos(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7729, __pyx_L1_error)
  }

  /* "core.pyx":7723
 * 
 * 
 * def set_cursor_screen_pos(screen_pos):             # <<<<<<<<<<<<<<
 *     """Set the cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_cursor_screen_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7738
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 * def align_text_to_frame_padding():             # <<<<<<<<<<<<<<
 *     cimgui.AlignTextToFramePadding()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_447align_text_to_frame_padding(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_447align_text_to_frame_padding = {"align_text_to_frame_padding", (PyCFunction)__pyx_pw_4core_447align_text_to_frame_padding, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_447align_text_to_frame_padding(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("align_text_to_frame_padding (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_446align_text_to_frame_padding(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_446align_text_to_frame_padding(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("align_text_to_frame_padding", 0);

  /* "core.pyx":7739
 * 
 * def align_text_to_frame_padding():
 *     cimgui.AlignTextToFramePadding()             # <<<<<<<<<<<<<<
 * 
 * def get_text_line_height():
 */
  try {
    ImGui::AlignTextToFramePadding();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7739, __pyx_L1_error)
  }

  /* "core.pyx":7738
 * set_cursor_screen_position = set_cursor_screen_pos
 * 
 * def align_text_to_frame_padding():             # <<<<<<<<<<<<<<
 *     cimgui.AlignTextToFramePadding()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.align_text_to_frame_padding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7741
 *     cimgui.AlignTextToFramePadding()
 * 
 * def get_text_line_height():             # <<<<<<<<<<<<<<
 *     """Get text line height.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_449get_text_line_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_449get_text_line_height = {"get_text_line_height", (PyCFunction)__pyx_pw_4core_449get_text_line_height, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_449get_text_line_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_text_line_height (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_448get_text_line_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_448get_text_line_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_text_line_height", 0);

  /* "core.pyx":7750
 *         void GetTextLineHeight()
 *     """
 *     return cimgui.GetTextLineHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetTextLineHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7750, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7741
 *     cimgui.AlignTextToFramePadding()
 * 
 * def get_text_line_height():             # <<<<<<<<<<<<<<
 *     """Get text line height.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_text_line_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7753
 * 
 * 
 * def get_text_line_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """Get text line height, with spacing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_451get_text_line_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_451get_text_line_height_with_spacing = {"get_text_line_height_with_spacing", (PyCFunction)__pyx_pw_4core_451get_text_line_height_with_spacing, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_451get_text_line_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_text_line_height_with_spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_450get_text_line_height_with_spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_450get_text_line_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_text_line_height_with_spacing", 0);

  /* "core.pyx":7762
 *         void GetTextLineHeightWithSpacing()
 *     """
 *     return cimgui.GetTextLineHeightWithSpacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetTextLineHeightWithSpacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7762, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7753
 * 
 * 
 * def get_text_line_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """Get text line height, with spacing.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_text_line_height_with_spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7765
 * 
 * 
 * def get_frame_height():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_453get_frame_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_453get_frame_height = {"get_frame_height", (PyCFunction)__pyx_pw_4core_453get_frame_height, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_453get_frame_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frame_height (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_452get_frame_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_452get_frame_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frame_height", 0);

  /* "core.pyx":7772
 *     float GetFrameHeightWithSpacing() except +
 *     """
 *     return cimgui.GetFrameHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFrameHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7772, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7765
 * 
 * 
 * def get_frame_height():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_frame_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7775
 * 
 * 
 * def get_frame_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_455get_frame_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_455get_frame_height_with_spacing = {"get_frame_height_with_spacing", (PyCFunction)__pyx_pw_4core_455get_frame_height_with_spacing, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_455get_frame_height_with_spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frame_height_with_spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_454get_frame_height_with_spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_454get_frame_height_with_spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frame_height_with_spacing", 0);

  /* "core.pyx":7781
 *         float GetFrameHeightWithSpacing()
 *     """
 *     return cimgui.GetFrameHeightWithSpacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetFrameHeightWithSpacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7781, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7775
 * 
 * 
 * def get_frame_height_with_spacing():             # <<<<<<<<<<<<<<
 *     """~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_frame_height_with_spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7784
 * 
 * 
 * def create_context(_FontAtlas shared_font_atlas = None):             # <<<<<<<<<<<<<<
 *     """CreateContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_457create_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_457create_context = {"create_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_457create_context, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_457create_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core__FontAtlas *__pyx_v_shared_font_atlas = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shared_font_atlas,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core__FontAtlas *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shared_font_atlas);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_context") < 0)) __PYX_ERR(0, 7784, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shared_font_atlas = ((struct __pyx_obj_4core__FontAtlas *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_context", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7784, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.create_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shared_font_atlas), __pyx_ptype_4core__FontAtlas, 1, "shared_font_atlas", 0))) __PYX_ERR(0, 7784, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_456create_context(__pyx_self, __pyx_v_shared_font_atlas);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_456create_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__FontAtlas *__pyx_v_shared_font_atlas) {
  ImGuiContext *__pyx_v__ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  ImGuiContext *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_context", 0);

  /* "core.pyx":7799
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 *     if (shared_font_atlas):             # <<<<<<<<<<<<<<
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_shared_font_atlas)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 7799, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "core.pyx":7800
 * 
 *     if (shared_font_atlas):
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)             # <<<<<<<<<<<<<<
 *     else:
 *         _ptr = cimgui.CreateContext(NULL)
 */
    try {
      __pyx_t_2 = ImGui::CreateContext(__pyx_v_shared_font_atlas->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7800, __pyx_L1_error)
    }
    __pyx_v__ptr = __pyx_t_2;

    /* "core.pyx":7799
 *     cdef cimgui.ImGuiContext* _ptr
 * 
 *     if (shared_font_atlas):             # <<<<<<<<<<<<<<
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":7802
 *         _ptr = cimgui.CreateContext(shared_font_atlas._ptr)
 *     else:
 *         _ptr = cimgui.CreateContext(NULL)             # <<<<<<<<<<<<<<
 * 
 *     return _ImGuiContext.from_ptr(_ptr)
 */
  /*else*/ {
    try {
      __pyx_t_2 = ImGui::CreateContext(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7802, __pyx_L1_error)
    }
    __pyx_v__ptr = __pyx_t_2;
  }
  __pyx_L3:;

  /* "core.pyx":7804
 *         _ptr = cimgui.CreateContext(NULL)
 * 
 *     return _ImGuiContext.from_ptr(_ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_4core_13_ImGuiContext_from_ptr(__pyx_v__ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":7784
 * 
 * 
 * def create_context(_FontAtlas shared_font_atlas = None):             # <<<<<<<<<<<<<<
 *     """CreateContext
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.create_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7807
 * 
 * 
 * def destroy_context(_ImGuiContext ctx = None):             # <<<<<<<<<<<<<<
 *     """DestroyContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_459destroy_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_459destroy_context = {"destroy_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_459destroy_context, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_459destroy_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core__ImGuiContext *__pyx_v_ctx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ctx,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core__ImGuiContext *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctx);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "destroy_context") < 0)) __PYX_ERR(0, 7807, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ctx = ((struct __pyx_obj_4core__ImGuiContext *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroy_context", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7807, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.destroy_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ctx), __pyx_ptype_4core__ImGuiContext, 1, "ctx", 0))) __PYX_ERR(0, 7807, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_458destroy_context(__pyx_self, __pyx_v_ctx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_458destroy_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__ImGuiContext *__pyx_v_ctx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy_context", 0);

  /* "core.pyx":7816
 *     """
 * 
 *     if ctx and ctx._ptr != NULL:             # <<<<<<<<<<<<<<
 *         cimgui.DestroyContext(ctx._ptr)
 *         ctx._ptr = NULL
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_ctx)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 7816, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_ctx->_ptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "core.pyx":7817
 * 
 *     if ctx and ctx._ptr != NULL:
 *         cimgui.DestroyContext(ctx._ptr)             # <<<<<<<<<<<<<<
 *         ctx._ptr = NULL
 *     else:
 */
    try {
      ImGui::DestroyContext(__pyx_v_ctx->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 7817, __pyx_L1_error)
    }

    /* "core.pyx":7818
 *     if ctx and ctx._ptr != NULL:
 *         cimgui.DestroyContext(ctx._ptr)
 *         ctx._ptr = NULL             # <<<<<<<<<<<<<<
 *     else:
 *         raise RuntimeError("Context invalid (None or destroyed)")
 */
    __pyx_v_ctx->_ptr = NULL;

    /* "core.pyx":7816
 *     """
 * 
 *     if ctx and ctx._ptr != NULL:             # <<<<<<<<<<<<<<
 *         cimgui.DestroyContext(ctx._ptr)
 *         ctx._ptr = NULL
 */
    goto __pyx_L3;
  }

  /* "core.pyx":7820
 *         ctx._ptr = NULL
 *     else:
 *         raise RuntimeError("Context invalid (None or destroyed)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 7820, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "core.pyx":7807
 * 
 * 
 * def destroy_context(_ImGuiContext ctx = None):             # <<<<<<<<<<<<<<
 *     """DestroyContext
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.destroy_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7823
 * 
 * 
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     """GetCurrentContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_461get_current_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_461get_current_context = {"get_current_context", (PyCFunction)__pyx_pw_4core_461get_current_context, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_461get_current_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_context (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_460get_current_context(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_460get_current_context(CYTHON_UNUSED PyObject *__pyx_self) {
  ImGuiContext *__pyx_v__ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiContext *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_current_context", 0);

  /* "core.pyx":7831
 * 
 *     cdef cimgui.ImGuiContext* _ptr
 *     _ptr = cimgui.GetCurrentContext()             # <<<<<<<<<<<<<<
 *     return _ImGuiContext.from_ptr(_ptr)
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7831, __pyx_L1_error)
  }
  __pyx_v__ptr = __pyx_t_1;

  /* "core.pyx":7832
 *     cdef cimgui.ImGuiContext* _ptr
 *     _ptr = cimgui.GetCurrentContext()
 *     return _ImGuiContext.from_ptr(_ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_4core_13_ImGuiContext_from_ptr(__pyx_v__ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":7823
 * 
 * 
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     """GetCurrentContext
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_current_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7835
 * 
 * 
 * def set_current_context(_ImGuiContext ctx):             # <<<<<<<<<<<<<<
 *     """SetCurrentContext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_463set_current_context(PyObject *__pyx_self, PyObject *__pyx_v_ctx); /*proto*/
static PyMethodDef __pyx_mdef_4core_463set_current_context = {"set_current_context", (PyCFunction)__pyx_pw_4core_463set_current_context, METH_O, 0};
static PyObject *__pyx_pw_4core_463set_current_context(PyObject *__pyx_self, PyObject *__pyx_v_ctx) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_current_context (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ctx), __pyx_ptype_4core__ImGuiContext, 1, "ctx", 0))) __PYX_ERR(0, 7835, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_462set_current_context(__pyx_self, ((struct __pyx_obj_4core__ImGuiContext *)__pyx_v_ctx));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_462set_current_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__ImGuiContext *__pyx_v_ctx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_current_context", 0);

  /* "core.pyx":7842
 *                 ImGuiContext *ctx);
 *     """
 *     cimgui.SetCurrentContext(ctx._ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetCurrentContext(__pyx_v_ctx->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7842, __pyx_L1_error)
  }

  /* "core.pyx":7835
 * 
 * 
 * def set_current_context(_ImGuiContext ctx):             # <<<<<<<<<<<<<<
 *     """SetCurrentContext
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.set_current_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7845
 * 
 * 
 * def push_id(str str_id):             # <<<<<<<<<<<<<<
 *     """Push an ID into the ID stack
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_465push_id(PyObject *__pyx_self, PyObject *__pyx_v_str_id); /*proto*/
static PyMethodDef __pyx_mdef_4core_465push_id = {"push_id", (PyCFunction)__pyx_pw_4core_465push_id, METH_O, 0};
static PyObject *__pyx_pw_4core_465push_id(PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_id (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_str_id), (&PyString_Type), 1, "str_id", 1))) __PYX_ERR(0, 7845, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_464push_id(__pyx_self, ((PyObject*)__pyx_v_str_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_464push_id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_id", 0);

  /* "core.pyx":7854
 *         PushID(const char* str_id)
 *     """
 *     cimgui.PushID(_bytes(str_id))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_str_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7854, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7854, __pyx_L1_error)
  try {
    ImGui::PushID(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7854, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":7845
 * 
 * 
 * def push_id(str str_id):             # <<<<<<<<<<<<<<
 *     """Push an ID into the ID stack
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.push_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7857
 * 
 * 
 * def pop_id():             # <<<<<<<<<<<<<<
 *     """Pop from the ID stack
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_467pop_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_467pop_id = {"pop_id", (PyCFunction)__pyx_pw_4core_467pop_id, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_467pop_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_id (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_466pop_id(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_466pop_id(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_id", 0);

  /* "core.pyx":7863
 *         PopID()
 *     """
 *     cimgui.PopID()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7863, __pyx_L1_error)
  }

  /* "core.pyx":7857
 * 
 * 
 * def pop_id():             # <<<<<<<<<<<<<<
 *     """Pop from the ID stack
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.pop_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7877
 * # === ansifeed extras ===
 * 
 * def _ansifeed_text_ansi(str text):             # <<<<<<<<<<<<<<
 *     """Add ANSI-escape-formatted text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_469_ansifeed_text_ansi(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_4core_469_ansifeed_text_ansi = {"_ansifeed_text_ansi", (PyCFunction)__pyx_pw_4core_469_ansifeed_text_ansi, METH_O, 0};
static PyObject *__pyx_pw_4core_469_ansifeed_text_ansi(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 7877, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_468_ansifeed_text_ansi(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_468_ansifeed_text_ansi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi", 0);

  /* "core.pyx":7899
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     ansifeed.TextAnsi("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7899, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7899, __pyx_L1_error)
  try {
    ImGui::TextAnsi(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7899, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":7877
 * # === ansifeed extras ===
 * 
 * def _ansifeed_text_ansi(str text):             # <<<<<<<<<<<<<<
 *     """Add ANSI-escape-formatted text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._ansifeed_text_ansi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7902
 * 
 * 
 * def _ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add pre-colored ANSI-escape-formatted text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_471_ansifeed_text_ansi_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_471_ansifeed_text_ansi_colored = {"_ansifeed_text_ansi_colored", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_471_ansifeed_text_ansi_colored, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_471_ansifeed_text_ansi_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, 1); __PYX_ERR(0, 7902, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, 2); __PYX_ERR(0, 7902, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, 3); __PYX_ERR(0, 7902, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_ansifeed_text_ansi_colored") < 0)) __PYX_ERR(0, 7902, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7902, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7902, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7902, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7902, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_ansifeed_text_ansi_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7902, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._ansifeed_text_ansi_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 7902, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_470_ansifeed_text_ansi_colored(__pyx_self, __pyx_v_text, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_470_ansifeed_text_ansi_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ansifeed_text_ansi_colored", 0);

  /* "core.pyx":7937
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     ansifeed.TextAnsiColored(_cast_args_ImVec4(r, g, b, a), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 7937, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 7937, __pyx_L1_error)
  try {
    ImGui::TextAnsiColored(__pyx_f_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a), ((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 7937, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":7902
 * 
 * 
 * def _ansifeed_text_ansi_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add pre-colored ANSI-escape-formatted text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._ansifeed_text_ansi_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4core_474generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "core.pyx":7943
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_473_py_font(PyObject *__pyx_self, PyObject *__pyx_v_font); /*proto*/
static PyMethodDef __pyx_mdef_4core_473_py_font = {"_py_font", (PyCFunction)__pyx_pw_4core_473_py_font, METH_O, 0};
static PyObject *__pyx_pw_4core_473_py_font(PyObject *__pyx_self, PyObject *__pyx_v_font) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_font (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_font), __pyx_ptype_4core__Font, 1, "font", 0))) __PYX_ERR(0, 7943, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_472_py_font(__pyx_self, ((struct __pyx_obj_4core__Font *)__pyx_v_font));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_472_py_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core__Font *__pyx_v_font) {
  struct __pyx_obj_4core___pyx_scope_struct___py_font *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_font", 0);
  __pyx_cur_scope = (struct __pyx_obj_4core___pyx_scope_struct___py_font *)__pyx_tp_new_4core___pyx_scope_struct___py_font(__pyx_ptype_4core___pyx_scope_struct___py_font, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct___py_font *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7943, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_font = __pyx_v_font;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_font);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_font);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4core_474generator, __pyx_codeobj__60, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_font, __pyx_n_s_py_font, __pyx_n_s_core); if (unlikely(!gen)) __PYX_ERR(0, 7943, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._py_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4core_474generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4core___pyx_scope_struct___py_font *__pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct___py_font *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_font", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7943, __pyx_L1_error)

  /* "core.pyx":7969
 *         font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.
 *     """
 *     push_font(font)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_font()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_push_font); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_font)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_cur_scope->__pyx_v_font));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":7970
 *     """
 *     push_font(font)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_font()
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7970, __pyx_L1_error)

  /* "core.pyx":7971
 *     push_font(font)
 *     yield
 *     pop_font()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pop_font); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "core.pyx":7943
 * 
 * @contextmanager
 * def _py_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_py_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4core_477generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "core.pyx":7975
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_476_py_styled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_476_py_styled = {"_py_styled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_476_py_styled, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_476_py_styled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiStyleVar __pyx_v_variable;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_styled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_styled", 1, 2, 2, 1); __PYX_ERR(0, 7975, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_py_styled") < 0)) __PYX_ERR(0, 7975, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiStyleVar(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7975, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_py_styled", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7975, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._py_styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_475_py_styled(__pyx_self, __pyx_v_variable, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_475_py_styled(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value) {
  struct __pyx_obj_4core___pyx_scope_struct_1__py_styled *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_styled", 0);
  __pyx_cur_scope = (struct __pyx_obj_4core___pyx_scope_struct_1__py_styled *)__pyx_tp_new_4core___pyx_scope_struct_1__py_styled(__pyx_ptype_4core___pyx_scope_struct_1__py_styled, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_1__py_styled *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7975, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variable = __pyx_v_variable;
  __pyx_cur_scope->__pyx_v_value = __pyx_v_value;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_value);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_value);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4core_477generator1, __pyx_codeobj__61, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_styled, __pyx_n_s_py_styled, __pyx_n_s_core); if (unlikely(!gen)) __PYX_ERR(0, 7975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._py_styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4core_477generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4core___pyx_scope_struct_1__py_styled *__pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_1__py_styled *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  struct __pyx_opt_args_4core_pop_style_var __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_styled", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7975, __pyx_L1_error)

  /* "core.pyx":7978
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_var(variable, value)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_style_var(count)
 */
  __pyx_t_1 = __pyx_f_4core_push_style_var(__pyx_cur_scope->__pyx_v_variable, __pyx_cur_scope->__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":7979
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_var(variable, value)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_style_var(count)
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7979, __pyx_L1_error)

  /* "core.pyx":7980
 *     count = push_style_var(variable, value)
 *     yield
 *     pop_style_var(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7980, __pyx_L1_error)
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.count = __pyx_t_2;
  __pyx_t_1 = __pyx_f_4core_pop_style_var(0, &__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "core.pyx":7975
 * 
 * @contextmanager
 * def _py_styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_py_styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4core_480generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "core.pyx":7984
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_479_py_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_479_py_colored = {"_py_colored", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_479_py_colored, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_479_py_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_variable;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, 1); __PYX_ERR(0, 7984, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, 2); __PYX_ERR(0, 7984, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, 3); __PYX_ERR(0, 7984, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_py_colored") < 0)) __PYX_ERR(0, 7984, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 7985, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7986, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7987, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7988, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 7989, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_py_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 7984, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core._py_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_478_py_colored(__pyx_self, __pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_478_py_colored(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  struct __pyx_obj_4core___pyx_scope_struct_2__py_colored *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_colored", 0);
  __pyx_cur_scope = (struct __pyx_obj_4core___pyx_scope_struct_2__py_colored *)__pyx_tp_new_4core___pyx_scope_struct_2__py_colored(__pyx_ptype_4core___pyx_scope_struct_2__py_colored, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_2__py_colored *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7984, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variable = __pyx_v_variable;
  __pyx_cur_scope->__pyx_v_r = __pyx_v_r;
  __pyx_cur_scope->__pyx_v_g = __pyx_v_g;
  __pyx_cur_scope->__pyx_v_b = __pyx_v_b;
  __pyx_cur_scope->__pyx_v_a = __pyx_v_a;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4core_480generator2, __pyx_codeobj__62, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_colored, __pyx_n_s_py_colored, __pyx_n_s_core); if (unlikely(!gen)) __PYX_ERR(0, 7984, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._py_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4core_480generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4core___pyx_scope_struct_2__py_colored *__pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_2__py_colored *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4core_push_style_color __pyx_t_2;
  unsigned int __pyx_t_3;
  struct __pyx_opt_args_4core_pop_style_color __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_colored", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7984, __pyx_L1_error)

  /* "core.pyx":7993
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_color(variable, r, g, b, a)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_style_color(count)
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.a = __pyx_cur_scope->__pyx_v_a;
  __pyx_t_1 = __pyx_f_4core_push_style_color(__pyx_cur_scope->__pyx_v_variable, __pyx_cur_scope->__pyx_v_r, __pyx_cur_scope->__pyx_v_g, __pyx_cur_scope->__pyx_v_b, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":7994
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_color(variable, r, g, b, a)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_style_color(count)
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7994, __pyx_L1_error)

  /* "core.pyx":7995
 *     count = push_style_color(variable, r, g, b, a)
 *     yield
 *     pop_style_color(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 7995, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.count = __pyx_t_3;
  __pyx_t_1 = __pyx_f_4core_pop_style_color(0, &__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "core.pyx":7984
 * 
 * @contextmanager
 * def _py_colored(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_py_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4core_483generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "core.pyx":7999
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_482_py_istyled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4core_482_py_istyled = {"_py_istyled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_482_py_istyled, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4core_482_py_istyled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_variables_and_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_istyled (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_py_istyled", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_variables_and_values = __pyx_args;
  __pyx_r = __pyx_pf_4core_481_py_istyled(__pyx_self, __pyx_v_variables_and_values);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_variables_and_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_481_py_istyled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variables_and_values) {
  struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_istyled", 0);
  __pyx_cur_scope = (struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled *)__pyx_tp_new_4core___pyx_scope_struct_3__py_istyled(__pyx_ptype_4core___pyx_scope_struct_3__py_istyled, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 7999, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variables_and_values = __pyx_v_variables_and_values;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_variables_and_values);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_variables_and_values);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4core_483generator3, __pyx_codeobj__63, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_istyled, __pyx_n_s_py_istyled, __pyx_n_s_core); if (unlikely(!gen)) __PYX_ERR(0, 7999, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._py_istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4core_483generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled *__pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_3__py_istyled *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  ImGuiStyleVar __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_istyled", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L18_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 7999, __pyx_L1_error)

  /* "core.pyx":8001
 * def _py_istyled(*variables_and_values):
 *     # todo: rename to nstyled?
 *     count = 0             # <<<<<<<<<<<<<<
 *     iterator = iter(variables_and_values)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_count = __pyx_int_0;

  /* "core.pyx":8002
 *     # todo: rename to nstyled?
 *     count = 0
 *     iterator = iter(variables_and_values)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_variables_and_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":8004
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
  /*try:*/ {
    {
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "core.pyx":8006
 *     try:
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):             # <<<<<<<<<<<<<<
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8006, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 8006, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterator);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterator);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_iterator);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterator);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterator);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_iterator);
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 8006, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fillvalue, Py_None) < 0) __PYX_ERR(0, 8006, __pyx_L7_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 8006, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 8006, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 8006, __pyx_L7_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 8006, __pyx_L7_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 8006, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 8006, __pyx_L7_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 8006, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_9(__pyx_t_6);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 8006, __pyx_L7_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
            PyObject* sequence = __pyx_t_7;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 8006, __pyx_L7_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            #else
            __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 8006, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8006, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 8006, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_5 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_5);
            index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_1)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_1);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 8006, __pyx_L7_error)
            __pyx_t_11 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 8006, __pyx_L7_error)
            __pyx_L16_unpacking_done:;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_var);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_var, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_val);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_val, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "core.pyx":8009
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 *             if val is not None:             # <<<<<<<<<<<<<<
 *                 count += push_style_var(var, val)
 *             else:
 */
          __pyx_t_12 = (__pyx_cur_scope->__pyx_v_val != Py_None);
          __pyx_t_13 = (__pyx_t_12 != 0);
          if (likely(__pyx_t_13)) {

            /* "core.pyx":8010
 *             #       var equal to None
 *             if val is not None:
 *                 count += push_style_var(var, val)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(
 */
            __pyx_t_14 = __Pyx_PyInt_As_ImGuiStyleVar(__pyx_cur_scope->__pyx_v_var); if (unlikely((__pyx_t_14 == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 8010, __pyx_L7_error)
            __pyx_t_7 = __pyx_f_4core_push_style_var(__pyx_t_14, __pyx_cur_scope->__pyx_v_val, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 8010, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_count, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8010, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_count);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_count, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "core.pyx":8009
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 *             if val is not None:             # <<<<<<<<<<<<<<
 *                 count += push_style_var(var, val)
 *             else:
 */
            goto __pyx_L17;
          }

          /* "core.pyx":8012
 *                 count += push_style_var(var, val)
 *             else:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)
 */
          /*else*/ {

            /* "core.pyx":8014
 *                 raise ValueError(
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)             # <<<<<<<<<<<<<<
 *                 )
 *     except:
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unsufficient_style_info_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 8014, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_cur_scope->__pyx_v_var) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_cur_scope->__pyx_v_var);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8014, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "core.pyx":8012
 *                 count += push_style_var(var, val)
 *             else:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)
 */
            __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 8012, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_Raise(__pyx_t_7, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __PYX_ERR(0, 8012, __pyx_L7_error)
          }
          __pyx_L17:;

          /* "core.pyx":8006
 *     try:
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):             # <<<<<<<<<<<<<<
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "core.pyx":8004
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
      }

      /* "core.pyx":8019
 *         raise
 *     else:
 *         yield             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
      /*else:*/ {
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_t_4);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L18_resume_from_yield:;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_4);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 8019, __pyx_L9_except_error)
      }
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "core.pyx":8016
 *                     "".format(var)
 *                 )
 *     except:             # <<<<<<<<<<<<<<
 *         raise
 *     else:
 */
      /*except:*/ {
        __Pyx_AddTraceback("core._py_istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_1) < 0) __PYX_ERR(0, 8016, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_1);

        /* "core.pyx":8017
 *                 )
 *     except:
 *         raise             # <<<<<<<<<<<<<<
 *     else:
 *         yield
 */
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_7, __pyx_t_1);
        __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_1 = 0; 
        __PYX_ERR(0, 8017, __pyx_L9_except_error)
      }
      __pyx_L9_except_error:;

      /* "core.pyx":8004
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L5_error;
      __pyx_L12_try_end:;
    }
  }

  /* "core.pyx":8023
 *     finally:
 *         # perf: short wiring despite we have a wrapper for this
 *         cimgui.PopStyleVar(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 8023, __pyx_L1_error)
      try {
        ImGui::PopStyleVar(__pyx_t_15);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 8023, __pyx_L1_error)
      }
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2) < 0)) __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 8023, __pyx_L22_error)
        try {
          ImGui::PopStyleVar(__pyx_t_21);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 8023, __pyx_L22_error)
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_3, __pyx_t_2);
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
      __pyx_L22_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "core.pyx":7999
 * 
 * @contextmanager
 * def _py_istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_py_istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4core_486generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "core.pyx":8027
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_485_py_scoped(PyObject *__pyx_self, PyObject *__pyx_v_str_id); /*proto*/
static PyMethodDef __pyx_mdef_4core_485_py_scoped = {"_py_scoped", (PyCFunction)__pyx_pw_4core_485_py_scoped, METH_O, 0};
static PyObject *__pyx_pw_4core_485_py_scoped(PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_scoped (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_str_id), (&PyString_Type), 1, "str_id", 1))) __PYX_ERR(0, 8027, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_484_py_scoped(__pyx_self, ((PyObject*)__pyx_v_str_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_484_py_scoped(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str_id) {
  struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_scoped", 0);
  __pyx_cur_scope = (struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped *)__pyx_tp_new_4core___pyx_scope_struct_4__py_scoped(__pyx_ptype_4core___pyx_scope_struct_4__py_scoped, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 8027, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_str_id = __pyx_v_str_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_str_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_str_id);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4core_486generator4, __pyx_codeobj__64, (PyObject *) __pyx_cur_scope, __pyx_n_s_py_scoped, __pyx_n_s_py_scoped, __pyx_n_s_core); if (unlikely(!gen)) __PYX_ERR(0, 8027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core._py_scoped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4core_486generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped *__pyx_cur_scope = ((struct __pyx_obj_4core___pyx_scope_struct_4__py_scoped *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_scoped", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 8027, __pyx_L1_error)

  /* "core.pyx":8039
 *         str_id (str): ID to push and pop within marked scope
 *     """
 *     push_id(str_id)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_id()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_push_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_str_id) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_str_id);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":8040
 *     """
 *     push_id(str_id)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_id()
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 8040, __pyx_L1_error)

  /* "core.pyx":8041
 *     push_id(str_id)
 *     yield
 *     pop_id()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pop_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "core.pyx":8027
 * 
 * @contextmanager
 * def _py_scoped(str str_id):             # <<<<<<<<<<<<<<
 *     """Use scoped ID within a block of code.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_py_scoped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8044
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_488_py_vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_488_py_vertex_buffer_vertex_pos_offset = {"_py_vertex_buffer_vertex_pos_offset", (PyCFunction)__pyx_pw_4core_488_py_vertex_buffer_vertex_pos_offset, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_488_py_vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_pos_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_487_py_vertex_buffer_vertex_pos_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_487_py_vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_pos_offset", 0);

  /* "core.pyx":8045
 * 
 * def _py_vertex_buffer_vertex_pos_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_uv_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->pos)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8044
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_pos_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8047
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_490_py_vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_490_py_vertex_buffer_vertex_uv_offset = {"_py_vertex_buffer_vertex_uv_offset", (PyCFunction)__pyx_pw_4core_490_py_vertex_buffer_vertex_uv_offset, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_490_py_vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_uv_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_489_py_vertex_buffer_vertex_uv_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_489_py_vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_uv_offset", 0);

  /* "core.pyx":8048
 * 
 * def _py_vertex_buffer_vertex_uv_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_col_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->uv)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8047
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_uv_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8050
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_492_py_vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_492_py_vertex_buffer_vertex_col_offset = {"_py_vertex_buffer_vertex_col_offset", (PyCFunction)__pyx_pw_4core_492_py_vertex_buffer_vertex_col_offset, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_492_py_vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_col_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_491_py_vertex_buffer_vertex_col_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_491_py_vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_col_offset", 0);

  /* "core.pyx":8051
 * 
 * def _py_vertex_buffer_vertex_col_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->col)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8050
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_col_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8053
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_494_py_vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_494_py_vertex_buffer_vertex_size = {"_py_vertex_buffer_vertex_size", (PyCFunction)__pyx_pw_4core_494_py_vertex_buffer_vertex_size, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_494_py_vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_493_py_vertex_buffer_vertex_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_493_py_vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_size", 0);

  /* "core.pyx":8054
 * 
 * def _py_vertex_buffer_vertex_size():
 *     return sizeof(cimgui.ImDrawVert)             # <<<<<<<<<<<<<<
 * 
 * def _py_index_buffer_index_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawVert))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8053
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8056
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_496_py_index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4core_496_py_index_buffer_index_size = {"_py_index_buffer_index_size", (PyCFunction)__pyx_pw_4core_496_py_index_buffer_index_size, METH_NOARGS, 0};
static PyObject *__pyx_pw_4core_496_py_index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_index_buffer_index_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_495_py_index_buffer_index_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_495_py_index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_index_buffer_index_size", 0);

  /* "core.pyx":8057
 * 
 * def _py_index_buffer_index_size():
 *     return sizeof(cimgui.ImDrawIdx)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawIdx))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8056
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_index_buffer_index_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__76, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__79);
            __Pyx_GIVEREF(__pyx_slice__79);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__79);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__79); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__79);
        __Pyx_GIVEREF(__pyx_slice__79);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__79);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4core__Font __pyx_vtable_4core__Font;

static PyObject *__pyx_tp_new_4core__Font(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__Font *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__Font *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__Font;
  return o;
}

static void __pyx_tp_dealloc_4core__Font(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core__Font[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_5_Font_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_5_Font_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__Font = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._Font", /*tp_name*/
  sizeof(struct __pyx_obj_4core__Font), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__Font, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__Font, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__Font, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__ImGuiContext __pyx_vtable_4core__ImGuiContext;

static PyObject *__pyx_tp_new_4core__ImGuiContext(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__ImGuiContext *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__ImGuiContext *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__ImGuiContext;
  return o;
}

static void __pyx_tp_dealloc_4core__ImGuiContext(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_richcompare_4core__ImGuiContext(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_4core_13_ImGuiContext_1__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_4core_13_ImGuiContext_1__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyMethodDef __pyx_methods_4core__ImGuiContext[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_13_ImGuiContext_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_13_ImGuiContext_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__ImGuiContext = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._ImGuiContext", /*tp_name*/
  sizeof(struct __pyx_obj_4core__ImGuiContext), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__ImGuiContext, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_4core__ImGuiContext, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__ImGuiContext, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__ImGuiContext, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__DrawCmd __pyx_vtable_4core__DrawCmd;

static PyObject *__pyx_tp_new_4core__DrawCmd(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__DrawCmd *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__DrawCmd *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__DrawCmd;
  return o;
}

static void __pyx_tp_dealloc_4core__DrawCmd(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_8_DrawCmd_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8_DrawCmd_10texture_id_1__get__(o);
}

static PyObject *__pyx_getprop_4core_8_DrawCmd_clip_rect(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8_DrawCmd_9clip_rect_1__get__(o);
}

static PyObject *__pyx_getprop_4core_8_DrawCmd_elem_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8_DrawCmd_10elem_count_1__get__(o);
}

static PyMethodDef __pyx_methods_4core__DrawCmd[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_8_DrawCmd_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_8_DrawCmd_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core__DrawCmd[] = {
  {(char *)"texture_id", __pyx_getprop_4core_8_DrawCmd_texture_id, 0, (char *)0, 0},
  {(char *)"clip_rect", __pyx_getprop_4core_8_DrawCmd_clip_rect, 0, (char *)0, 0},
  {(char *)"elem_count", __pyx_getprop_4core_8_DrawCmd_elem_count, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__DrawCmd = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._DrawCmd", /*tp_name*/
  sizeof(struct __pyx_obj_4core__DrawCmd), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__DrawCmd, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__DrawCmd, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core__DrawCmd, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__DrawCmd, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__DrawList __pyx_vtable_4core__DrawList;

static PyObject *__pyx_tp_new_4core__DrawList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__DrawList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__DrawList *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__DrawList;
  return o;
}

static void __pyx_tp_dealloc_4core__DrawList(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_cmd_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_15cmd_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_cmd_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_15cmd_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_vtx_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_15vtx_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_vtx_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_15vtx_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_idx_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_15idx_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_idx_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_15idx_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawList_commands(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawList_8commands_1__get__(o);
}

static PyMethodDef __pyx_methods_4core__DrawList[] = {
  {"add_line", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_1add_line, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_rect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_3add_rect, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_rect_filled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_5add_rect_filled, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_circle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_7add_circle, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_circle_filled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_9add_circle_filled, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_11add_text, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_image", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_13add_image, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_polyline", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawList_15add_polyline, METH_VARARGS|METH_KEYWORDS, 0},
  {"channels_split", (PyCFunction)__pyx_pw_4core_9_DrawList_17channels_split, METH_O, 0},
  {"channels_set_current", (PyCFunction)__pyx_pw_4core_9_DrawList_19channels_set_current, METH_O, 0},
  {"channels_merge", (PyCFunction)__pyx_pw_4core_9_DrawList_21channels_merge, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_9_DrawList_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_9_DrawList_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core__DrawList[] = {
  {(char *)"cmd_buffer_size", __pyx_getprop_4core_9_DrawList_cmd_buffer_size, 0, (char *)0, 0},
  {(char *)"cmd_buffer_data", __pyx_getprop_4core_9_DrawList_cmd_buffer_data, 0, (char *)0, 0},
  {(char *)"vtx_buffer_size", __pyx_getprop_4core_9_DrawList_vtx_buffer_size, 0, (char *)0, 0},
  {(char *)"vtx_buffer_data", __pyx_getprop_4core_9_DrawList_vtx_buffer_data, 0, (char *)0, 0},
  {(char *)"idx_buffer_size", __pyx_getprop_4core_9_DrawList_idx_buffer_size, 0, (char *)0, 0},
  {(char *)"idx_buffer_data", __pyx_getprop_4core_9_DrawList_idx_buffer_data, 0, (char *)0, 0},
  {(char *)"commands", __pyx_getprop_4core_9_DrawList_commands, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__DrawList = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._DrawList", /*tp_name*/
  sizeof(struct __pyx_obj_4core__DrawList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__DrawList, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__DrawList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core__DrawList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__DrawList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__Colors __pyx_vtable_4core__Colors;

static PyObject *__pyx_tp_new_4core__Colors(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__Colors *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__Colors *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__Colors;
  p->_style = ((struct __pyx_obj_4core_GuiStyle *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4core_7_Colors_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4core__Colors(PyObject *o) {
  struct __pyx_obj_4core__Colors *p = (struct __pyx_obj_4core__Colors *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_style);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4core__Colors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4core__Colors *p = (struct __pyx_obj_4core__Colors *)o;
  if (p->_style) {
    e = (*v)(((PyObject *)p->_style), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4core__Colors(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4core__Colors *p = (struct __pyx_obj_4core__Colors *)o;
  tmp = ((PyObject*)p->_style);
  p->_style = ((struct __pyx_obj_4core_GuiStyle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_4core__Colors(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_4core__Colors(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_4core_7_Colors_7__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core__Colors[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_7_Colors_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_7_Colors_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

#if 0
static PySequenceMethods __pyx_tp_as_sequence__Colors = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_4core__Colors, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Colors = {
  0, /*mp_length*/
  __pyx_pw_4core_7_Colors_5__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_4core__Colors, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_4core__Colors = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._Colors", /*tp_name*/
  sizeof(struct __pyx_obj_4core__Colors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__Colors, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Colors, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Colors, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4core__Colors, /*tp_traverse*/
  __pyx_tp_clear_4core__Colors, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__Colors, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_7_Colors_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__Colors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core_GuiStyle __pyx_vtable_4core_GuiStyle;

static PyObject *__pyx_tp_new_4core_GuiStyle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_GuiStyle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_GuiStyle *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_GuiStyle;
  p->_colors = ((struct __pyx_obj_4core__Colors *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4core_8GuiStyle_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4core_GuiStyle(PyObject *o) {
  struct __pyx_obj_4core_GuiStyle *p = (struct __pyx_obj_4core_GuiStyle *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4core_8GuiStyle_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_colors);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4core_GuiStyle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4core_GuiStyle *p = (struct __pyx_obj_4core_GuiStyle *)o;
  if (p->_colors) {
    e = (*v)(((PyObject *)p->_colors), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4core_GuiStyle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4core_GuiStyle *p = (struct __pyx_obj_4core_GuiStyle *)o;
  tmp = ((PyObject*)p->_colors);
  p->_colors = ((struct __pyx_obj_4core__Colors *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_4core_GuiStyle(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_4core_8GuiStyle_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_4core_8GuiStyle_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_5alpha_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_alpha(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_5alpha_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_window_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_14window_padding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_window_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_14window_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_window_min_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_15window_min_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_window_min_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_15window_min_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_window_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_15window_rounding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_window_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_15window_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_window_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_18window_border_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_window_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_18window_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_child_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_14child_rounding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_child_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_14child_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_child_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_17child_border_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_child_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_17child_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_popup_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_14popup_rounding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_popup_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_14popup_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_popup_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_17popup_border_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_popup_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_17popup_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_window_title_align(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_18window_title_align_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_window_title_align(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_18window_title_align_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_frame_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_13frame_padding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_frame_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_13frame_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_frame_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_14frame_rounding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_frame_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_14frame_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_frame_border_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_17frame_border_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_frame_border_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_17frame_border_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_item_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_12item_spacing_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_item_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_12item_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_item_inner_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_18item_inner_spacing_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_item_inner_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_18item_inner_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_touch_extra_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_19touch_extra_padding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_touch_extra_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_19touch_extra_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_indent_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_14indent_spacing_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_indent_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_14indent_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_columns_min_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_19columns_min_spacing_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_columns_min_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_19columns_min_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_scrollbar_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_14scrollbar_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_scrollbar_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_14scrollbar_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_scrollbar_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_18scrollbar_rounding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_scrollbar_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_18scrollbar_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_grab_min_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_13grab_min_size_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_grab_min_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_13grab_min_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_grab_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_13grab_rounding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_grab_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_13grab_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_button_text_align(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_17button_text_align_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_button_text_align(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_17button_text_align_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_display_window_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_22display_window_padding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_display_window_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_22display_window_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_display_safe_area_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_25display_safe_area_padding_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_display_safe_area_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_25display_safe_area_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_mouse_cursor_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_18mouse_cursor_scale_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_mouse_cursor_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_18mouse_cursor_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_anti_aliased_lines(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_18anti_aliased_lines_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_anti_aliased_lines(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_18anti_aliased_lines_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_anti_aliased_fill(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_17anti_aliased_fill_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_anti_aliased_fill(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_17anti_aliased_fill_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_curve_tessellation_tolerance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(o);
}

static int __pyx_setprop_4core_8GuiStyle_curve_tessellation_tolerance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_8GuiStyle_colors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_8GuiStyle_6colors_1__get__(o);
}

static PyMethodDef __pyx_methods_4core_GuiStyle[] = {
  {"create", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_8GuiStyle_7create, METH_VARARGS|METH_KEYWORDS, 0},
  {"color", (PyCFunction)__pyx_pw_4core_8GuiStyle_9color, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_8GuiStyle_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_8GuiStyle_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};
#if 0
static struct PyGetSetDef __pyx_getsets_4core_GuiStyle[] = {
  {(char *)"alpha", __pyx_getprop_4core_8GuiStyle_alpha, __pyx_setprop_4core_8GuiStyle_alpha, (char *)"Global alpha blending parameter for windows\n\n        Returns:\n            float\n        ", 0},
  {(char *)"window_padding", __pyx_getprop_4core_8GuiStyle_window_padding, __pyx_setprop_4core_8GuiStyle_window_padding, (char *)0, 0},
  {(char *)"window_min_size", __pyx_getprop_4core_8GuiStyle_window_min_size, __pyx_setprop_4core_8GuiStyle_window_min_size, (char *)0, 0},
  {(char *)"window_rounding", __pyx_getprop_4core_8GuiStyle_window_rounding, __pyx_setprop_4core_8GuiStyle_window_rounding, (char *)0, 0},
  {(char *)"window_border_size", __pyx_getprop_4core_8GuiStyle_window_border_size, __pyx_setprop_4core_8GuiStyle_window_border_size, (char *)0, 0},
  {(char *)"child_rounding", __pyx_getprop_4core_8GuiStyle_child_rounding, __pyx_setprop_4core_8GuiStyle_child_rounding, (char *)0, 0},
  {(char *)"child_border_size", __pyx_getprop_4core_8GuiStyle_child_border_size, __pyx_setprop_4core_8GuiStyle_child_border_size, (char *)0, 0},
  {(char *)"popup_rounding", __pyx_getprop_4core_8GuiStyle_popup_rounding, __pyx_setprop_4core_8GuiStyle_popup_rounding, (char *)0, 0},
  {(char *)"popup_border_size", __pyx_getprop_4core_8GuiStyle_popup_border_size, __pyx_setprop_4core_8GuiStyle_popup_border_size, (char *)0, 0},
  {(char *)"window_title_align", __pyx_getprop_4core_8GuiStyle_window_title_align, __pyx_setprop_4core_8GuiStyle_window_title_align, (char *)0, 0},
  {(char *)"frame_padding", __pyx_getprop_4core_8GuiStyle_frame_padding, __pyx_setprop_4core_8GuiStyle_frame_padding, (char *)0, 0},
  {(char *)"frame_rounding", __pyx_getprop_4core_8GuiStyle_frame_rounding, __pyx_setprop_4core_8GuiStyle_frame_rounding, (char *)0, 0},
  {(char *)"frame_border_size", __pyx_getprop_4core_8GuiStyle_frame_border_size, __pyx_setprop_4core_8GuiStyle_frame_border_size, (char *)0, 0},
  {(char *)"item_spacing", __pyx_getprop_4core_8GuiStyle_item_spacing, __pyx_setprop_4core_8GuiStyle_item_spacing, (char *)0, 0},
  {(char *)"item_inner_spacing", __pyx_getprop_4core_8GuiStyle_item_inner_spacing, __pyx_setprop_4core_8GuiStyle_item_inner_spacing, (char *)0, 0},
  {(char *)"touch_extra_padding", __pyx_getprop_4core_8GuiStyle_touch_extra_padding, __pyx_setprop_4core_8GuiStyle_touch_extra_padding, (char *)0, 0},
  {(char *)"indent_spacing", __pyx_getprop_4core_8GuiStyle_indent_spacing, __pyx_setprop_4core_8GuiStyle_indent_spacing, (char *)0, 0},
  {(char *)"columns_min_spacing", __pyx_getprop_4core_8GuiStyle_columns_min_spacing, __pyx_setprop_4core_8GuiStyle_columns_min_spacing, (char *)0, 0},
  {(char *)"scrollbar_size", __pyx_getprop_4core_8GuiStyle_scrollbar_size, __pyx_setprop_4core_8GuiStyle_scrollbar_size, (char *)0, 0},
  {(char *)"scrollbar_rounding", __pyx_getprop_4core_8GuiStyle_scrollbar_rounding, __pyx_setprop_4core_8GuiStyle_scrollbar_rounding, (char *)0, 0},
  {(char *)"grab_min_size", __pyx_getprop_4core_8GuiStyle_grab_min_size, __pyx_setprop_4core_8GuiStyle_grab_min_size, (char *)0, 0},
  {(char *)"grab_rounding", __pyx_getprop_4core_8GuiStyle_grab_rounding, __pyx_setprop_4core_8GuiStyle_grab_rounding, (char *)0, 0},
  {(char *)"button_text_align", __pyx_getprop_4core_8GuiStyle_button_text_align, __pyx_setprop_4core_8GuiStyle_button_text_align, (char *)0, 0},
  {(char *)"display_window_padding", __pyx_getprop_4core_8GuiStyle_display_window_padding, __pyx_setprop_4core_8GuiStyle_display_window_padding, (char *)0, 0},
  {(char *)"display_safe_area_padding", __pyx_getprop_4core_8GuiStyle_display_safe_area_padding, __pyx_setprop_4core_8GuiStyle_display_safe_area_padding, (char *)0, 0},
  {(char *)"mouse_cursor_scale", __pyx_getprop_4core_8GuiStyle_mouse_cursor_scale, __pyx_setprop_4core_8GuiStyle_mouse_cursor_scale, (char *)0, 0},
  {(char *)"anti_aliased_lines", __pyx_getprop_4core_8GuiStyle_anti_aliased_lines, __pyx_setprop_4core_8GuiStyle_anti_aliased_lines, (char *)0, 0},
  {(char *)"anti_aliased_fill", __pyx_getprop_4core_8GuiStyle_anti_aliased_fill, __pyx_setprop_4core_8GuiStyle_anti_aliased_fill, (char *)0, 0},
  {(char *)"curve_tessellation_tolerance", __pyx_getprop_4core_8GuiStyle_curve_tessellation_tolerance, __pyx_setprop_4core_8GuiStyle_curve_tessellation_tolerance, (char *)0, 0},
  {(char *)"colors", __pyx_getprop_4core_8GuiStyle_colors, 0, (char *)"Retrieve and modify style colors through list-like interface.\n\n        .. visual-example::\n            :width: 700\n            :height: 500\n            :auto_layout:\n\n            style = imgui.get_style()\n            imgui.begin(\"Color window\")\n            imgui.columns(4)\n            for color in range(0, imgui.COLOR_COUNT):\n                imgui.text(\"Color: {}\".format(color))\n                imgui.color_button(\"color#{}\".format(color), *style.colors[color])\n                imgui.next_column()\n\n            imgui.end()\n        ", 0},
  {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_type_4core_GuiStyle = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.GuiStyle", /*tp_name*/
  sizeof(struct __pyx_obj_4core_GuiStyle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_GuiStyle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4core_GuiStyle, /*tp_traverse*/
  __pyx_tp_clear_4core_GuiStyle, /*tp_clear*/
  __pyx_tp_richcompare_4core_GuiStyle, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_GuiStyle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_GuiStyle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_GuiStyle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__DrawData __pyx_vtable_4core__DrawData;

static PyObject *__pyx_tp_new_4core__DrawData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__DrawData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__DrawData *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__DrawData;
  return o;
}

static void __pyx_tp_dealloc_4core__DrawData(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_9_DrawData_valid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawData_5valid_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawData_cmd_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawData_9cmd_count_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawData_total_vtx_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawData_15total_vtx_count_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawData_total_idx_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawData_15total_idx_count_1__get__(o);
}

static PyObject *__pyx_getprop_4core_9_DrawData_commands_lists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9_DrawData_14commands_lists_1__get__(o);
}

static PyMethodDef __pyx_methods_4core__DrawData[] = {
  {"_require_pointer", (PyCFunction)__pyx_pw_4core_9_DrawData_3_require_pointer, METH_NOARGS, 0},
  {"deindex_all_buffers", (PyCFunction)__pyx_pw_4core_9_DrawData_5deindex_all_buffers, METH_NOARGS, 0},
  {"scale_clip_rects", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_9_DrawData_7scale_clip_rects, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_9_DrawData_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_9_DrawData_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core__DrawData[] = {
  {(char *)"valid", __pyx_getprop_4core_9_DrawData_valid, 0, (char *)0, 0},
  {(char *)"cmd_count", __pyx_getprop_4core_9_DrawData_cmd_count, 0, (char *)0, 0},
  {(char *)"total_vtx_count", __pyx_getprop_4core_9_DrawData_total_vtx_count, 0, (char *)0, 0},
  {(char *)"total_idx_count", __pyx_getprop_4core_9_DrawData_total_idx_count, 0, (char *)0, 0},
  {(char *)"commands_lists", __pyx_getprop_4core_9_DrawData_commands_lists, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__DrawData = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._DrawData", /*tp_name*/
  sizeof(struct __pyx_obj_4core__DrawData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__DrawData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__DrawData, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core__DrawData, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_9_DrawData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__DrawData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__StaticGlyphRanges __pyx_vtable_4core__StaticGlyphRanges;

static PyObject *__pyx_tp_new_4core__StaticGlyphRanges(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__StaticGlyphRanges *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__StaticGlyphRanges *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__StaticGlyphRanges;
  return o;
}

static void __pyx_tp_dealloc_4core__StaticGlyphRanges(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core__StaticGlyphRanges[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_18_StaticGlyphRanges_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_18_StaticGlyphRanges_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__StaticGlyphRanges = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._StaticGlyphRanges", /*tp_name*/
  sizeof(struct __pyx_obj_4core__StaticGlyphRanges), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__StaticGlyphRanges, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__StaticGlyphRanges, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__StaticGlyphRanges, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__FontAtlas __pyx_vtable_4core__FontAtlas;

static PyObject *__pyx_tp_new_4core__FontAtlas(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__FontAtlas *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__FontAtlas *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__FontAtlas;
  return o;
}

static void __pyx_tp_dealloc_4core__FontAtlas(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_10_FontAtlas_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10_FontAtlas_10texture_id_1__get__(o);
}

static int __pyx_setprop_4core_10_FontAtlas_texture_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_10_FontAtlas_10texture_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_10_FontAtlas_texture_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10_FontAtlas_13texture_width_1__get__(o);
}

static PyObject *__pyx_getprop_4core_10_FontAtlas_texture_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10_FontAtlas_14texture_height_1__get__(o);
}

static PyMethodDef __pyx_methods_4core__FontAtlas[] = {
  {"_require_pointer", (PyCFunction)__pyx_pw_4core_10_FontAtlas_3_require_pointer, METH_NOARGS, 0},
  {"add_font_default", (PyCFunction)__pyx_pw_4core_10_FontAtlas_5add_font_default, METH_NOARGS, 0},
  {"add_font_from_file_ttf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_10_FontAtlas_7add_font_from_file_ttf, METH_VARARGS|METH_KEYWORDS, 0},
  {"clear_tex_data", (PyCFunction)__pyx_pw_4core_10_FontAtlas_9clear_tex_data, METH_NOARGS, 0},
  {"clear_input_data", (PyCFunction)__pyx_pw_4core_10_FontAtlas_11clear_input_data, METH_NOARGS, 0},
  {"clear_fonts", (PyCFunction)__pyx_pw_4core_10_FontAtlas_13clear_fonts, METH_NOARGS, 0},
  {"clear", (PyCFunction)__pyx_pw_4core_10_FontAtlas_15clear, METH_NOARGS, 0},
  {"get_glyph_ranges_default", (PyCFunction)__pyx_pw_4core_10_FontAtlas_17get_glyph_ranges_default, METH_NOARGS, 0},
  {"get_glyph_ranges_korean", (PyCFunction)__pyx_pw_4core_10_FontAtlas_19get_glyph_ranges_korean, METH_NOARGS, 0},
  {"get_glyph_ranges_japanese", (PyCFunction)__pyx_pw_4core_10_FontAtlas_21get_glyph_ranges_japanese, METH_NOARGS, 0},
  {"get_glyph_ranges_chinese_full", (PyCFunction)__pyx_pw_4core_10_FontAtlas_23get_glyph_ranges_chinese_full, METH_NOARGS, 0},
  {"get_glyph_ranges_chinese", (PyCFunction)__pyx_pw_4core_10_FontAtlas_25get_glyph_ranges_chinese, METH_NOARGS, 0},
  {"get_glyph_ranges_cyrillic", (PyCFunction)__pyx_pw_4core_10_FontAtlas_27get_glyph_ranges_cyrillic, METH_NOARGS, 0},
  {"get_glyph_ranges_latin", (PyCFunction)__pyx_pw_4core_10_FontAtlas_29get_glyph_ranges_latin, METH_NOARGS, 0},
  {"get_tex_data_as_alpha8", (PyCFunction)__pyx_pw_4core_10_FontAtlas_31get_tex_data_as_alpha8, METH_NOARGS, 0},
  {"get_tex_data_as_rgba32", (PyCFunction)__pyx_pw_4core_10_FontAtlas_33get_tex_data_as_rgba32, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_10_FontAtlas_35__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_10_FontAtlas_37__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core__FontAtlas[] = {
  {(char *)"texture_id", __pyx_getprop_4core_10_FontAtlas_texture_id, __pyx_setprop_4core_10_FontAtlas_texture_id, (char *)"\n        Note: difference in mapping (maps actual TexID and not TextureID)\n\n        Note: texture ID type is implementation dependent. It is usually\n        integer (at least for OpenGL).\n\n        ", 0},
  {(char *)"texture_width", __pyx_getprop_4core_10_FontAtlas_texture_width, 0, (char *)0, 0},
  {(char *)"texture_height", __pyx_getprop_4core_10_FontAtlas_texture_height, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if 0
static PyTypeObject __pyx_type_4core__FontAtlas = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._FontAtlas", /*tp_name*/
  sizeof(struct __pyx_obj_4core__FontAtlas), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core__FontAtlas, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core__FontAtlas, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core__FontAtlas, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_10_FontAtlas_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core__FontAtlas, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4core__IO __pyx_vtable_4core__IO;

static PyObject *__pyx_tp_new_4core__IO(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core__IO *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core__IO *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core__IO;
  p->_fonts = Py_None; Py_INCREF(Py_None);
  p->_keep_ini_alive = Py_None; Py_INCREF(Py_None);
  p->_keep_logfile_alive = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4core__IO(PyObject *o) {
  struct __pyx_obj_4core__IO *p = (struct __pyx_obj_4core__IO *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_fonts);
  Py_CLEAR(p->_keep_ini_alive);
  Py_CLEAR(p->_keep_logfile_alive);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4core__IO(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4core__IO *p = (struct __pyx_obj_4core__IO *)o;
  if (p->_fonts) {
    e = (*v)(p->_fonts, a); if (e) return e;
  }
  if (p->_keep_ini_alive) {
    e = (*v)(p->_keep_ini_alive, a); if (e) return e;
  }
  if (p->_keep_logfile_alive) {
    e = (*v)(p->_keep_logfile_alive, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4core__IO(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4core__IO *p = (struct __pyx_obj_4core__IO *)o;
  tmp = ((PyObject*)p->_fonts);
  p->_fonts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_keep_ini_alive);
  p->_keep_ini_alive = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_keep_logfile_alive);
  p->_keep_logfile_alive = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4core_3_IO_config_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_12config_flags_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_config_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_12config_flags_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_backend_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_13backend_flags_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_backend_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_13backend_flags_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_display_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_12display_size_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_display_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_12display_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_delta_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_10delta_time_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_delta_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_10delta_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_ini_saving_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_15ini_saving_rate_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_ini_saving_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_15ini_saving_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_log_file_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_13log_file_name_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_log_file_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_13log_file_name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_ini_file_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_13ini_file_name_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_ini_file_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_13ini_file_name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_double_click_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_23mouse_double_click_time_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_double_click_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_23mouse_double_click_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_double_click_max_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_31mouse_double_click_max_distance_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_double_click_max_distance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_31mouse_double_click_max_distance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_drag_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_20mouse_drag_threshold_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_drag_threshold(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_20mouse_drag_threshold_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_key_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_7key_map_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_key_repeat_delay(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_16key_repeat_delay_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_key_repeat_delay(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_16key_repeat_delay_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_key_repeat_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_15key_repeat_rate_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_key_repeat_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_15key_repeat_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_fonts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_5fonts_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_font_global_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_17font_global_scale_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_font_global_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_17font_global_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_font_allow_user_scaling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_23font_allow_user_scaling_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_font_allow_user_scaling(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_23font_allow_user_scaling_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_display_fb_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_16display_fb_scale_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_display_fb_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_16display_fb_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_display_visible_min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_19display_visible_min_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_display_visible_min(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_19display_visible_min_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_display_visible_max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_19display_visible_max_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_display_visible_max(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_19display_visible_max_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_config_mac_osx_behaviors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_24config_mac_osx_behaviors_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_config_mac_osx_behaviors(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_24config_mac_osx_behaviors_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_config_cursor_blink(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_19config_cursor_blink_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_config_cursor_blink(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_19config_cursor_blink_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_config_resize_windows_from_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_32config_resize_windows_from_edges_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_config_resize_windows_from_edges(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_32config_resize_windows_from_edges_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_get_clipboard_text_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_21get_clipboard_text_fn_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_get_clipboard_text_fn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_21get_clipboard_text_fn_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_set_clipboard_text_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_21set_clipboard_text_fn_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_set_clipboard_text_fn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_21set_clipboard_text_fn_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_9mouse_pos_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_9mouse_pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_10mouse_down_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_wheel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_11mouse_wheel_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_wheel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_11mouse_wheel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_wheel_horizontal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_22mouse_wheel_horizontal_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_wheel_horizontal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_22mouse_wheel_horizontal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_draw_cursor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_17mouse_draw_cursor_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_mouse_draw_cursor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_17mouse_draw_cursor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_key_ctrl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_8key_ctrl_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_key_ctrl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_8key_ctrl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_key_shift(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_9key_shift_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_key_shift(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_9key_shift_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_key_alt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_7key_alt_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_key_alt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_7key_alt_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_key_super(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_9key_super_1__get__(o);
}

static int __pyx_setprop_4core_3_IO_key_super(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_3_IO_9key_super_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_3_IO_keys_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_9keys_down_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_want_capture_mouse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_18want_capture_mouse_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_want_capture_keyboard(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_21want_capture_keyboard_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_want_text_input(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_15want_text_input_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_want_set_mouse_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_18want_set_mouse_pos_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_want_save_ini_setting(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_21want_save_ini_setting_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_nav_active(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_10nav_active_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_nav_visible(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_11nav_visible_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_framerate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_9framerate_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_metrics_render_vertices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_23metrics_render_vertices_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_metrics_active_windows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_22metrics_active_windows_1__get__(o);
}

static PyObject *__pyx_getprop_4core_3_IO_mouse_delta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_3_IO_11mouse_delta_1__get__(o);
}

